Project Path: electron-vite

Source Tree:

```
electron-vite
├── electron.vite.config.ts
├── tsconfig.node.json
├── tailwind.config.js
├── resources
│   └── icon.png
├── README.md
├── tsconfig.web.json
├── package.json
├── xcript.py
├── electron-builder.yml
├── dev-app-update.yml
├── components.json
├── tsconfig.json
├── build
│   ├── icon.png
│   ├── icon.icns
│   ├── entitlements.mac.plist
│   └── icon.ico
├── postcss.config.js
├── output.txt
└── src
    ├── renderer
    │   ├── index.html
    │   └── src
    │       ├── App.tsx
    │       ├── main.tsx
    │       ├── types
    │       │   ├── electron.d.ts
    │       │   └── type.ts
    │       ├── env.d.ts
    │       ├── provider
    │       │   └── theme-provider.tsx
    │       ├── stores
    │       │   ├── useProjectCreateStore.ts
    │       │   ├── useLogStore.ts
    │       │   ├── useProjectListStore.ts
    │       │   ├── useAuthStore.ts
    │       │   ├── useTerminalDrawerStore.ts
    │       │   └── useLoginStore.ts
    │       ├── index.css
    │       ├── components
    │       │   ├── ui
    │       │   │   ├── aspect-ratio.tsx
    │       │   │   ├── alert-dialog.tsx
    │       │   │   ├── pagination.tsx
    │       │   │   ├── link.tsx
    │       │   │   ├── tabs.tsx
    │       │   │   ├── card.tsx
    │       │   │   ├── slider.tsx
    │       │   │   ├── popover.tsx
    │       │   │   ├── loader.tsx
    │       │   │   ├── progress.tsx
    │       │   │   ├── toaster.tsx
    │       │   │   ├── input-otp.tsx
    │       │   │   ├── chart.tsx
    │       │   │   ├── hover-card.tsx
    │       │   │   ├── sheet.tsx
    │       │   │   ├── scroll-area.tsx
    │       │   │   ├── label.tsx
    │       │   │   ├── sonner.tsx
    │       │   │   ├── navigation-menu.tsx
    │       │   │   ├── accordion.tsx
    │       │   │   ├── typography.tsx
    │       │   │   ├── drawer.tsx
    │       │   │   ├── tooltip.tsx
    │       │   │   ├── alert.tsx
    │       │   │   ├── switch.tsx
    │       │   │   ├── calendar.tsx
    │       │   │   ├── breadcrumb.tsx
    │       │   │   ├── radio-group.tsx
    │       │   │   ├── command.tsx
    │       │   │   ├── toggle-group.tsx
    │       │   │   ├── avatar.tsx
    │       │   │   ├── menubar.tsx
    │       │   │   ├── dialog.tsx
    │       │   │   ├── badge.tsx
    │       │   │   ├── sidebar.tsx
    │       │   │   ├── table.tsx
    │       │   │   ├── separator.tsx
    │       │   │   ├── button.tsx
    │       │   │   ├── toggle.tsx
    │       │   │   ├── toast.tsx
    │       │   │   ├── checkbox.tsx
    │       │   │   ├── collapsible.tsx
    │       │   │   ├── dropdown-menu.tsx
    │       │   │   ├── select.tsx
    │       │   │   ├── textarea.tsx
    │       │   │   ├── input.tsx
    │       │   │   ├── skeleton.tsx
    │       │   │   ├── context-menu.tsx
    │       │   │   ├── form.tsx
    │       │   │   └── carousel.tsx
    │       │   └── custom
    │       │       ├── sidebar
    │       │       │   ├── index.tsx
    │       │       │   ├── nav-main.tsx
    │       │       │   ├── nav-user.tsx
    │       │       │   ├── nav-secondary.tsx
    │       │       │   └── nav-projects.tsx
    │       │       ├── terminal
    │       │       │   └── index.tsx
    │       │       ├── theme
    │       │       │   └── theme-toggle.tsx
    │       │       ├── global
    │       │       │   ├── last-reload.tsx
    │       │       │   ├── footer.tsx
    │       │       │   ├── code-block.tsx
    │       │       │   └── refresh.tsx
    │       │       └── navbars
    │       │           ├── login-navbar.tsx
    │       │           └── projects-page-navbar.tsx
    │       ├── hooks
    │       │   ├── use-mobile.tsx
    │       │   └── use-toast.ts
    │       ├── lib
    │       │   ├── utils.ts
    │       │   ├── getApiEndpoint.ts
    │       │   └── ellipsis.ts
    │       ├── assets
    │       │   ├── main.css
    │       │   ├── electron.svg
    │       │   ├── wavy-lines.svg
    │       │   └── base.css
    │       ├── pages
    │       │   ├── server-test.tsx
    │       │   ├── not-found
    │       │   │   └── not-found.tsx
    │       │   ├── projects
    │       │   │   ├── index.tsx
    │       │   │   ├── project-card.tsx
    │       │   │   ├── add-project.tsx
    │       │   │   └── link-project-drawer.tsx
    │       │   ├── dashboard
    │       │   │   ├── log-analysis
    │       │   │   │   ├── index.tsx
    │       │   │   │   ├── explorer
    │       │   │   │   │   ├── index.tsx
    │       │   │   │   │   └── components
    │       │   │   │   │       ├── chart
    │       │   │   │   │       │   └── index.tsx
    │       │   │   │   │       ├── numeric-stats
    │       │   │   │   │       │   └── index.tsx
    │       │   │   │   │       ├── solution-slideover
    │       │   │   │   │       │   ├── index.tsx
    │       │   │   │   │       │   ├── general-info.tsx
    │       │   │   │   │       │   ├── stack-trace.tsx
    │       │   │   │   │       │   └── rag-inference.tsx
    │       │   │   │   │       └── log-table
    │       │   │   │   │           ├── index.tsx
    │       │   │   │   │           ├── action.tsx
    │       │   │   │   │           ├── t-body.tsx
    │       │   │   │   │           ├── http-methods.tsx
    │       │   │   │   │           ├── t-pagination.tsx
    │       │   │   │   │           └── t-head.tsx
    │       │   │   │   ├── header.tsx
    │       │   │   │   ├── analyze
    │       │   │   │   │   └── index.tsx
    │       │   │   │   └── congfigure
    │       │   │   │       └── index.tsx
    │       │   │   └── documantation
    │       │   ├── coming-soon
    │       │   │   └── index.tsx
    │       │   └── login
    │       │       ├── index.tsx
    │       │       ├── choose-org.tsx
    │       │       └── login-form.tsx
    │       ├── axios
    │       │   └── axios.ts
    │       ├── services
    │       │   ├── route-protector
    │       │   │   ├── public-route-protector.tsx
    │       │   │   └── private-route-protector.tsx
    │       │   ├── api
    │       │   │   ├── create-project.ts
    │       │   │   ├── fetch-projects--list.ts
    │       │   │   ├── handle-logout.ts
    │       │   │   ├── fetch-log-table-data.ts
    │       │   │   └── handle-login.ts
    │       │   └── validation
    │       │       ├── login-form.ts
    │       │       └── create-project.ts
    │       └── socket
    │           └── socket.ts
    ├── main
    │   ├── types
    │   │   └── types.ts
    │   ├── server
    │   │   ├── config
    │   │   │   ├── axios.ts
    │   │   │   ├── sqlite.ts
    │   │   │   ├── index.ts
    │   │   │   └── env.ts
    │   │   ├── middlewares
    │   │   │   ├── validation.ts
    │   │   │   ├── cors-option.ts
    │   │   │   └── logging.ts
    │   │   ├── utils
    │   │   │   ├── logger.ts
    │   │   │   └── check-folder-exists.ts
    │   │   ├── models
    │   │   │   ├── projectModel.ts
    │   │   │   └── organizationModel.ts
    │   │   ├── controllers
    │   │   │   ├── handle-check-project-remote-link.ts
    │   │   │   ├── handle-get-org-list.ts
    │   │   │   ├── handle-validate-user.ts
    │   │   │   ├── handle-create-project.ts
    │   │   │   └── handle-login.ts
    │   │   ├── server.ts
    │   │   └── routes
    │   │       └── router.ts
    │   └── index.ts
    └── preload
        ├── index.ts
        └── index.d.ts

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/electron.vite.config.ts`:

```ts
import { resolve } from 'path'
import { defineConfig, externalizeDepsPlugin } from 'electron-vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  main: {
    plugins: [externalizeDepsPlugin()]
  },
  preload: {
    plugins: [externalizeDepsPlugin()]
  },
  renderer: {
    server: {
      port: 6968
    },
    resolve: {
      alias: {
        '@renderer': resolve('src/renderer/src')
      }
    },
    plugins: [react()]
  }
})

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/tsconfig.node.json`:

```json
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.node.json",
  "include": ["electron.vite.config.*", "src/main/**/*", "src/preload/**/*"],
  "compilerOptions": {
    "composite": true,
    "types": ["electron-vite/node"]
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/tailwind.config.js`:

```js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  content: ['./src/renderer/index.html', './src/**/*.{ts,tsx,js,jsx}'],
  theme: {
    extend: {
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          1: 'hsl(var(--chart-1))',
          2: 'hsl(var(--chart-2))',
          3: 'hsl(var(--chart-3))',
          4: 'hsl(var(--chart-4))',
          5: 'hsl(var(--chart-5))'
        },
        sidebar: {
          background: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
          DEFAULT: 'hsl(var(--sidebar-background))'
        }
      },
      fontSize: {
        xs: '11px',
        sm: '12px',
        tiny: '13px',
        base: '15px',
        lg: '17px',
        xl: '19px',
        '2xl': '22px',
        '3xl': '25px',
        '4xl': '29px',
        '5xl': '35px',
        '6xl': '41px',
        '7xl': '49px',
        '8xl': '60px',
        '9xl': '72px'
      },
      lineHeight: {
        1: '0.5rem',
        2: '0.6rem',
        3: '0.7rem',
        4: '0.9rem',
        5: '1.1rem',
        6: '1.3rem',
        7: '1.5rem',
        8: '1.75rem',
        9: '2rem',
        10: '2.25rem',
        none: '0.9',
        tight: '1.1',
        snug: '1.2',
        normal: '1.35',
        relaxed: '1.5',
        loose: '1.75'
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0'
          },
          to: {
            height: 'var(--radix-accordion-content-height)'
          }
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)'
          },
          to: {
            height: '0'
          }
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out'
      },
      transitionProperty: {
        colors: 'color, background-color, border-color, text-decoration-color, fill, stroke',
        shadow: 'box-shadow'
      }
    }
  },
  plugins: [require('tailwindcss-animate')]
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/README.md`:

```md
# electron-vite-tailwind-shadcn

An Electron application with React and TypeScript


## Project Setup

### Install

```bash
$ npm install
```

### Development

```bash
$ npm run dev
```

### Build

```bash
# For windows
$ npm run build:win

# For macOS
$ npm run build:mac

# For Linux
$ npm run build:linux
```

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/tsconfig.web.json`:

```json
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.web.json",
  "include": [
    "src/renderer/src/env.d.ts",
    "src/renderer/src/**/*",
    "src/renderer/src/**/*.tsx",
    "src/preload/*.d.ts",
    "lib"
  ],
  "compilerOptions": {
    "composite": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@renderer/*": [
        "src/renderer/src/*"
      ],
    }
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/package.json`:

```json
{
  "name": "electron-vite",
  "version": "1.0.0",
  "description": "An Electron application with React and TypeScript",
  "main": "./out/main/index.js",
  "author": "example.com",
  "homepage": "https://electron-vite.org",
  "scripts": {
    "format": "prettier --write .",
    "lint": "eslint . --ext .js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix",
    "typecheck:node": "tsc --noEmit -p tsconfig.node.json --composite false",
    "typecheck:web": "tsc --noEmit -p tsconfig.web.json --composite false",
    "typecheck": "npm run typecheck:node && npm run typecheck:web",
    "start": "electron-vite preview",
    "dev": "electron-vite dev",
    "build": "npm run typecheck && electron-vite build",
    "postinstall": "electron-builder install-app-deps",
    "build:unpack": "npm run build && electron-builder --dir",
    "build:win": "npm run build && electron-builder --win",
    "build:mac": "electron-vite build && electron-builder --mac",
    "build:linux": "electron-vite build && electron-builder --linux"
  },
  "dependencies": {
    "@electron-toolkit/preload": "^3.0.1",
    "@electron-toolkit/utils": "^3.0.0",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-hover-card": "^1.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-menubar": "^1.1.4",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@tanstack/react-query": "^5.62.15",
    "@xterm/xterm": "^5.5.0",
    "axios": "^1.7.9",
    "better-sqlite3": "^11.7.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "electron-updater": "^6.1.7",
    "embla-carousel-react": "^8.5.1",
    "express": "^4.21.2",
    "input-otp": "^1.4.1",
    "lucide-react": "^0.469.0",
    "next-themes": "^0.4.4",
    "node-pty": "^1.0.0",
    "react-day-picker": "^8.10.1",
    "react-hook-form": "^7.54.2",
    "react-infinite-scroll-component": "^6.1.0",
    "react-markdown": "^9.0.1",
    "react-router-dom": "^6.28.1",
    "react-syntax-highlighter": "^15.6.1",
    "recharts": "^2.15.0",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2",
    "winston": "^3.17.0",
    "ws": "^8.18.0",
    "xterm-addon-fit": "^0.8.0",
    "xterm-addon-search": "^0.13.0",
    "xterm-addon-web-links": "^0.9.0",
    "zod": "^3.24.1",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@electron-toolkit/eslint-config-prettier": "^2.0.0",
    "@electron-toolkit/eslint-config-ts": "^2.0.0",
    "@electron-toolkit/tsconfig": "^1.0.1",
    "@types/better-sqlite3": "^7.6.12",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^20.17.11",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "electron": "^31.0.2",
    "electron-builder": "^24.13.3",
    "electron-rebuild": "^3.2.9",
    "electron-vite": "^2.3.0",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.3",
    "postcss": "^8.4.49",
    "prettier": "^3.3.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.5.2",
    "vite": "^5.3.1"
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/xcript.py`:

```py
import os

def write_files_to_txt(root_dir, output_file, exclude_dirs=None, exclude_files=None):
    """
    Write the content of all files from the root directory to the leaf directory into a .txt file,
    excluding specified directories and files.

    Args:
        root_dir (str): The root directory to start traversing.
        output_file (str): The path to the output .txt file.
        exclude_dirs (list): A list of directory names to exclude.
        exclude_files (list): A list of file names to exclude.
    """
    exclude_dirs = exclude_dirs or []
    exclude_files = exclude_files or []

    with open(output_file, 'w', encoding='utf-8') as out_file:
        for dirpath, dirnames, filenames in os.walk(root_dir):
            # Exclude specified directories
            dirnames[:] = [d for d in dirnames if d not in exclude_dirs]

            for filename in filenames:
                if filename in exclude_files:
                    continue

                file_path = os.path.join(dirpath, filename)
                try:
                    with open(file_path, 'r', encoding='utf-8') as file:
                        content = file.read()
                        out_file.write(f"\n=== Content of {file_path} ===\n")
                        out_file.write(content)
                        out_file.write("\n\n")
                except Exception as e:
                    print(f"Could not read file {file_path}: {e}")

if __name__ == "__main__":
    root_directory = "./"  # Replace with your root directory
    output_txt_file = "output.txt"

    # Directories and files to exclude
    directories_to_exclude = ["node_modules", "out", ".git", "build"]
    files_to_exclude = ["excluded_file.txt", "package-lock.json", "xcript.py"]

    write_files_to_txt(root_directory, output_txt_file, directories_to_exclude, files_to_exclude)
    print(f"Content written to {output_txt_file}")

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/electron-builder.yml`:

```yml
appId: com.electron.app
productName: electron-vite
directories:
  buildResources: build
files:
  - '!**/.vscode/*'
  - '!src/*'
  - '!electron.vite.config.{js,ts,mjs,cjs}'
  - '!{.eslintignore,.eslintrc.cjs,.prettierignore,.prettierrc.yaml,dev-app-update.yml,CHANGELOG.md,README.md}'
  - '!{.env,.env.*,.npmrc,pnpm-lock.yaml}'
  - '!{tsconfig.json,tsconfig.node.json,tsconfig.web.json}'
asarUnpack:
  - resources/**
win:
  executableName: electron-vite
nsis:
  artifactName: ${name}-${version}-setup.${ext}
  shortcutName: ${productName}
  uninstallDisplayName: ${productName}
  createDesktopShortcut: always
mac:
  entitlementsInherit: build/entitlements.mac.plist
  extendInfo:
    - NSCameraUsageDescription: Application requests access to the device's camera.
    - NSMicrophoneUsageDescription: Application requests access to the device's microphone.
    - NSDocumentsFolderUsageDescription: Application requests access to the user's Documents folder.
    - NSDownloadsFolderUsageDescription: Application requests access to the user's Downloads folder.
  notarize: false
dmg:
  artifactName: ${name}-${version}.${ext}
linux:
  target:
    - AppImage
    - snap
    - deb
  maintainer: electronjs.org
  category: Utility
appImage:
  artifactName: ${name}-${version}.${ext}
npmRebuild: false
publish:
  provider: generic
  url: https://example.com/auto-updates
electronDownload:
  mirror: https://npmmirror.com/mirrors/electron/

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/dev-app-update.yml`:

```yml
provider: generic
url: https://example.com/auto-updates
updaterCacheDirName: electron-vite-updater

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/components.json`:

```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/renderer/src/index.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@renderer/components",
    "ui": "@renderer/components/ui",
    "hooks": "@renderer/hooks",
    "lib": "@renderer/lib",
    "utils": "@renderer/lib/utils"
  },
  "iconLibrary": "lucide"
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/tsconfig.json`:

```json
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.web.json"
    }
  ],
  "compilerOptions": {
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/renderer/src/*"
      ],
      "@renderer/*": [
        "src/renderer/src/*"
      ]
    }
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/build/entitlements.mac.plist`:

```plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
  </dict>
</plist>

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/postcss.config.js`:

```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/output.txt`:

```txt

=== Content of ./electron.vite.config.ts ===
import { resolve } from 'path'
import { defineConfig, externalizeDepsPlugin } from 'electron-vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  main: {
    plugins: [externalizeDepsPlugin()]
  },
  preload: {
    plugins: [externalizeDepsPlugin()]
  },
  renderer: {
    resolve: {
      alias: {
        '@renderer': resolve('src/renderer/src')
      }
    },
    plugins: [react()]
  }
})



=== Content of ./tsconfig.node.json ===
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.node.json",
  "include": ["electron.vite.config.*", "src/main/**/*", "src/preload/**/*"],
  "compilerOptions": {
    "composite": true,
    "types": ["electron-vite/node"]
  }
}



=== Content of ./tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/renderer/index.html', './src/**/*.{ts,tsx,js,jsx}'],
  theme: {
    extend: {
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          1: 'hsl(var(--chart-1))',
          2: 'hsl(var(--chart-2))',
          3: 'hsl(var(--chart-3))',
          4: 'hsl(var(--chart-4))',
          5: 'hsl(var(--chart-5))'
        },
        sidebar: {
          background: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
          DEFAULT: 'hsl(var(--sidebar-background))'
        }
      },
      fontSize: {
        xs: '11px',
        sm: '12px',
        tiny: '13px',
        base: '15px',
        lg: '17px',
        xl: '19px',
        '2xl': '22px',
        '3xl': '25px',
        '4xl': '29px',
        '5xl': '35px',
        '6xl': '41px',
        '7xl': '49px',
        '8xl': '60px',
        '9xl': '72px'
      },
      lineHeight: {
        1: '0.5rem',
        2: '0.6rem',
        3: '0.7rem',
        4: '0.9rem',
        5: '1.1rem',
        6: '1.3rem',
        7: '1.5rem',
        8: '1.75rem',
        9: '2rem',
        10: '2.25rem',
        none: '0.9',
        tight: '1.1',
        snug: '1.2',
        normal: '1.35',
        relaxed: '1.5',
        loose: '1.75'
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0'
          },
          to: {
            height: 'var(--radix-accordion-content-height)'
          }
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)'
          },
          to: {
            height: '0'
          }
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out'
      },
      transitionProperty: {
        colors: 'color, background-color, border-color, text-decoration-color, fill, stroke',
        shadow: 'box-shadow'
      }
    }
  },
  plugins: [require('tailwindcss-animate')]
}



=== Content of ./.eslintrc.cjs ===
module.exports = {
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    '@electron-toolkit/eslint-config-ts/recommended',
    '@electron-toolkit/eslint-config-prettier'
  ],
  rules: {
    // A temporary hack related to IDE not resolving correct package.json
    'import/no-extraneous-dependencies': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/jsx-filename-extension': 'off',
    'import/extensions': 'off',
    'import/no-unresolved': 'off',
    'import/no-import-module-exports': 'off',
    'no-shadow': 'off',
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/no-shadow': 'off'
  }
}



=== Content of ./.npmrc ===
electron_mirror=https://npmmirror.com/mirrors/electron/
electron_builder_binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/



=== Content of ./.prettierignore ===
out
dist
pnpm-lock.yaml
LICENSE.md
tsconfig.json
tsconfig.*.json



=== Content of ./.editorconfig ===
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true


=== Content of ./README.md ===
# electron-vite

An Electron application with React and TypeScript

## Recommended IDE Setup

- [VSCode](https://code.visualstudio.com/) + [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) + [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)

## Project Setup

### Install

```bash
$ npm install
```

### Development

```bash
$ npm run dev
```

### Build

```bash
# For windows
$ npm run build:win

# For macOS
$ npm run build:mac

# For Linux
$ npm run build:linux
```



=== Content of ./tsconfig.web.json ===
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.web.json",
  "include": [
    "src/renderer/src/env.d.ts",
    "src/renderer/src/**/*",
    "src/renderer/src/**/*.tsx",
    "src/preload/*.d.ts",
    "lib"
  ],
  "compilerOptions": {
    "composite": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@renderer/*": [
        "src/renderer/src/*"
      ],
    }
  }
}



=== Content of ./.gitignore ===
node_modules
dist
out
.DS_Store
*.log*



=== Content of ./package.json ===
{
  "name": "electron-vite",
  "version": "1.0.0",
  "description": "An Electron application with React and TypeScript",
  "main": "./out/main/index.js",
  "author": "example.com",
  "homepage": "https://electron-vite.org",
  "scripts": {
    "format": "prettier --write .",
    "lint": "eslint . --ext .js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix",
    "typecheck:node": "tsc --noEmit -p tsconfig.node.json --composite false",
    "typecheck:web": "tsc --noEmit -p tsconfig.web.json --composite false",
    "typecheck": "npm run typecheck:node && npm run typecheck:web",
    "start": "electron-vite preview",
    "dev": "electron-vite dev",
    "build": "npm run typecheck && electron-vite build",
    "postinstall": "electron-builder install-app-deps",
    "build:unpack": "npm run build && electron-builder --dir",
    "build:win": "npm run build && electron-builder --win",
    "build:mac": "electron-vite build && electron-builder --mac",
    "build:linux": "electron-vite build && electron-builder --linux"
  },
  "dependencies": {
    "@electron-toolkit/preload": "^3.0.1",
    "@electron-toolkit/utils": "^3.0.0",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-slot": "^1.1.1",
    "@xterm/xterm": "^5.5.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cors": "^2.8.5",
    "electron-updater": "^6.1.7",
    "express": "^4.21.2",
    "lucide-react": "^0.469.0",
    "node-pty": "^1.0.0",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "ws": "^8.18.0",
    "xterm-addon-fit": "^0.8.0",
    "xterm-addon-search": "^0.13.0",
    "xterm-addon-web-links": "^0.9.0"
  },
  "devDependencies": {
    "@electron-toolkit/eslint-config-prettier": "^2.0.0",
    "@electron-toolkit/eslint-config-ts": "^2.0.0",
    "@electron-toolkit/tsconfig": "^1.0.1",
    "@types/node": "^20.17.11",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "electron": "^31.0.2",
    "electron-builder": "^24.13.3",
    "electron-vite": "^2.3.0",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.3",
    "postcss": "^8.4.49",
    "prettier": "^3.3.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.5.2",
    "vite": "^5.3.1"
  }
}



=== Content of ./electron-builder.yml ===
appId: com.electron.app
productName: electron-vite
directories:
  buildResources: build
files:
  - '!**/.vscode/*'
  - '!src/*'
  - '!electron.vite.config.{js,ts,mjs,cjs}'
  - '!{.eslintignore,.eslintrc.cjs,.prettierignore,.prettierrc.yaml,dev-app-update.yml,CHANGELOG.md,README.md}'
  - '!{.env,.env.*,.npmrc,pnpm-lock.yaml}'
  - '!{tsconfig.json,tsconfig.node.json,tsconfig.web.json}'
asarUnpack:
  - resources/**
win:
  executableName: electron-vite
nsis:
  artifactName: ${name}-${version}-setup.${ext}
  shortcutName: ${productName}
  uninstallDisplayName: ${productName}
  createDesktopShortcut: always
mac:
  entitlementsInherit: build/entitlements.mac.plist
  extendInfo:
    - NSCameraUsageDescription: Application requests access to the device's camera.
    - NSMicrophoneUsageDescription: Application requests access to the device's microphone.
    - NSDocumentsFolderUsageDescription: Application requests access to the user's Documents folder.
    - NSDownloadsFolderUsageDescription: Application requests access to the user's Downloads folder.
  notarize: false
dmg:
  artifactName: ${name}-${version}.${ext}
linux:
  target:
    - AppImage
    - snap
    - deb
  maintainer: electronjs.org
  category: Utility
appImage:
  artifactName: ${name}-${version}.${ext}
npmRebuild: false
publish:
  provider: generic
  url: https://example.com/auto-updates
electronDownload:
  mirror: https://npmmirror.com/mirrors/electron/



=== Content of ./dev-app-update.yml ===
provider: generic
url: https://example.com/auto-updates
updaterCacheDirName: electron-vite-updater



=== Content of ./.prettierrc.yaml ===
singleQuote: true
semi: false
printWidth: 100
trailingComma: none



=== Content of ./components.json ===
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/renderer/src/index.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@renderer/components",
    "ui": "@renderer/components/ui",
    "hooks": "@renderer/hooks",
    "lib": "@renderer/lib",
    "utils": "@renderer/lib/utils"
  },
  "iconLibrary": "lucide"
}



=== Content of ./tsconfig.json ===
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.web.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/renderer/src/*"
      ],
      "@renderer/*": [
        "src/renderer/src/*"
      ]
    }
  }
}



=== Content of ./.eslintignore ===
node_modules
dist
out
.gitignore



=== Content of ./postcss.config.js ===
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}



=== Content of ./output.txt ===

=== Content of ./electron.vite.config.ts ===
import { resolve } from 'path'
import { defineConfig, externalizeDepsPlugin } from 'electron-vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  main: {
    plugins: [externalizeDepsPlugin()]
  },
  preload: {
    plugins: [externalizeDepsPlugin()]
  },
  renderer: {
    resolve: {
      alias: {
        '@renderer': resolve('src/renderer/src')
      }
    },
    plugins: [react()]
  }
})



=== Content of ./tsconfig.node.json ===
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.node.json",
  "include": ["electron.vite.config.*", "src/main/**/*", "src/preload/**/*"],
  "compilerOptions": {
    "composite": true,
    "types": ["electron-vite/node"]
  }
}



=== Content of ./tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/renderer/index.html', './src/**/*.{ts,tsx,js,jsx}'],
  theme: {
    extend: {
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          1: 'hsl(var(--chart-1))',
          2: 'hsl(var(--chart-2))',
          3: 'hsl(var(--chart-3))',
          4: 'hsl(var(--chart-4))',
          5: 'hsl(var(--chart-5))'
        },
        sidebar: {
          background: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
          DEFAULT: 'hsl(var(--sidebar-background))'
        }
      },
      fontSize: {
        xs: '11px',
        sm: '12px',
        tiny: '13px',
        base: '15px',
        lg: '17px',
        xl: '19px',
        '2xl': '22px',
        '3xl': '25px',
        '4xl': '29px',
        '5xl': '35px',
        '6xl': '41px',
        '7xl': '49px',
        '8xl': '60px',
        '9xl': '72px'
      },
      lineHeight: {
        1: '0.5rem',
        2: '0.6rem',
        3: '0.7rem',
        4: '0.9rem',
        5: '1.1rem',
        6: '1.3rem',
        7: '1.5rem',
        8: '1.75rem',
        9: '2rem',
        10: '2.25rem',
        none: '0.9',
        tight: '1.1',
        snug: '1.2',
        normal: '1.35',
        relaxed: '1.5',
        loose: '1.75'
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0'
          },
          to: {
            height: 'var(--radix-accordion-content-height)'
          }
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)'
          },
          to: {
            height: '0'
          }
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out'
      },
      transitionProperty: {
        colors: 'color, background-color, border-color, text-decoration-color, fill, stroke',
        shadow: 'box-shadow'
      }
    }
  },
  plugins: [require('tailwindcss-animate')]
}



=== Content of ./.eslintrc.cjs ===
module.exports = {
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    '@electron-toolkit/eslint-config-ts/recommended',
    '@electron-toolkit/eslint-config-prettier'
  ],
  rules: {
    // A temporary hack related to IDE not resolving correct package.json
    'import/no-extraneous-dependencies': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/jsx-filename-extension': 'off',
    'import/extensions': 'off',
    'import/no-unresolved': 'off',
    'import/no-import-module-exports': 'off',
    'no-shadow': 'off',
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/no-shadow': 'off'
  }
}



=== Content of ./.npmrc ===
electron_mirror=https://npmmirror.com/mirrors/electron/
electron_builder_binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/



=== Content of ./.prettierignore ===
out
dist
pnpm-lock.yaml
LICENSE.md
tsconfig.json
tsconfig.*.json



=== Content of ./.editorconfig ===
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true


=== Content of ./README.md ===
# electron-vite

An Electron application with React and TypeScript

## Recommended IDE Setup

- [VSCode](https://code.visualstudio.com/) + [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) + [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)

## Project Setup

### Install

```bash
$ npm install
```

### Development

```bash
$ npm run dev
```

### Build

```bash
# For windows
$ npm run build:win

# For macOS
$ npm run build:mac

# For Linux
$ npm run build:linux
```



=== Content of ./tsconfig.web.json ===
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.web.json",
  "include": [
    "src/renderer/src/env.d.ts",
    "src/renderer/src/**/*",
    "src/renderer/src/**/*.tsx",
    "src/preload/*.d.ts",
    "lib"
  ],
  "compilerOptions": {
    "composite": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@renderer/*": [
        "src/renderer/src/*"
      ],
    }
  }
}



=== Content of ./.gitignore ===
node_modules
dist
out
.DS_Store
*.log*



=== Content of ./package.json ===



=== Content of ./.vscode/settings.json ===
{
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
}



=== Content of ./.vscode/extensions.json ===
{
  "recommendations": ["dbaeumer.vscode-eslint"]
}



=== Content of ./.vscode/launch.json ===
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Main Process",
      "type": "node",
      "request": "launch",
      "cwd": "${workspaceRoot}",
      "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/electron-vite",
      "windows": {
        "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/electron-vite.cmd"
      },
      "runtimeArgs": ["--sourcemap"],
      "env": {
        "REMOTE_DEBUGGING_PORT": "9222"
      }
    },
    {
      "name": "Debug Renderer Process",
      "port": 9222,
      "request": "attach",
      "type": "chrome",
      "webRoot": "${workspaceFolder}/src/renderer",
      "timeout": 60000,
      "presentation": {
        "hidden": true
      }
    }
  ],
  "compounds": [
    {
      "name": "Debug All",
      "configurations": ["Debug Main Process", "Debug Renderer Process"],
      "presentation": {
        "order": 1
      }
    }
  ]
}



=== Content of ./src/renderer/index.html ===
<!doctype html>
<html>

  <head>
    <meta charset="UTF-8" />
    <title>Electron</title>
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>

</html>



=== Content of ./src/renderer/src/App.tsx ===
// import electronLogo from './assets/electron.svg'
import { ModeToggle } from './components/theme/toggle-theme'
import { Button } from './components/ui/button'

import React, { useEffect, useRef } from 'react'
import { Terminal } from '@xterm/xterm'
import '@xterm/xterm/css/xterm.css'
import { FitAddon } from 'xterm-addon-fit'
import { WebLinksAddon } from 'xterm-addon-web-links'
import { SearchAddon } from 'xterm-addon-search'

const XTerminal: React.FC = function XTerminal() {
  const terminalRef = useRef<HTMLDivElement>(null)
  const commandBuffer = useRef<string>('')
  const term = useRef(
    new Terminal({
      cursorBlink: true,
      theme: {
        background: '#1e1e1e',
        foreground: '#ffffff',
        cursor: '#00ff00'
      }
    })
  ).current

  const fitAddon = useRef(new FitAddon()).current
  const webLinksAddon = useRef(new WebLinksAddon()).current
  const searchAddon = useRef(new SearchAddon()).current

  useEffect(() => {
    term.loadAddon(fitAddon)
    term.loadAddon(webLinksAddon)
    term.loadAddon(searchAddon)

    term.open(terminalRef.current!)
    fitAddon.fit()

    const socket = new WebSocket('ws://localhost:6969/ws')
    socket.onmessage = (event) => term.write(event.data)
    socket.onopen = () => term.writeln('Connected to server')
    socket.onclose = () => term.writeln('Connection closed')
    socket.onerror = () => term.writeln('Error connecting to server')

    term.onData((input: string) => {
      if (input === '\r') {
        // Enter key
        const command = commandBuffer.current.trim()
        if (command) {
          socket.send(JSON.stringify({ type: 'command', command }))
          term.writeln('')
        }
        commandBuffer.current = ''
      } else if (input === '\u007F') {
        // Backspace
        if (commandBuffer.current.length > 0) {
          commandBuffer.current = commandBuffer.current.slice(0, -1)
          term.write('\b \b')
        }
      } else {
        commandBuffer.current += input
        term.write(input)
      }
    })

    return () => {
      socket.close()
      term.dispose()
    }
  }, [term, fitAddon, webLinksAddon, searchAddon])

  return <div ref={terminalRef} style={{ textAlign: 'left', width: '100%', height: '100%' }} />
}

function App(): JSX.Element {
  const ipcHandle = (): void => window.electron.ipcRenderer.send('ping')

  return (
    <div className="">
      <div className="creator">Powered by electron-vite</div>
      <div className="text">
        Build an Electron app with <span className="react">React</span>
        &nbsp;and <span className="ts">TypeScript</span>
      </div>
      <p className="tip">
        Please try pressing <code>F12</code> to open the devTool
      </p>
      <div className="actions bg-pink-500">
        <div className="action">
          <a
            href="https://electron-vite.org/"
            target="_blank"
            rel="noreferrer"
            className="bg-blue-500 text-3xl font-bold underline"
          >
            Documentation
          </a>
        </div>
        <div className="action">
          <a target="_blank" rel="noreferrer" onClick={ipcHandle}>
            Send IPC
          </a>
        </div>
      </div>
      <ModeToggle />
      <Button variant={'destructive'}>Click me</Button>
      <XTerminal />
    </div>
  )
}

export default App



=== Content of ./src/renderer/src/main.tsx ===
// import './assets/main.css'
import './index.css'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import { ThemeProvider } from './provider/theme-provider'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      <App />
    </ThemeProvider>
  </React.StrictMode>
)



=== Content of ./src/renderer/src/env.d.ts ===
/// <reference types="vite/client" />



=== Content of ./src/renderer/src/index.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  outline: none !important;
}
body {
  font-family: Arial, Helvetica, sans-serif;
}

button:hover {
  border: inherit;
}

@layer base {
  :root {
    --background: 210 40% 98%;
    --foreground: 222.2 84% 4.9%;
    --card: 210 40% 96.1%;
    --card-foreground: 217.2 32.6% 17.5%;
    --popover: 210 40% 98%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 96.1%;
    --secondary: 212.7 26.8% 83.9%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 212.7 26.8% 83.9%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 212.7 26.8% 83.9%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 96.1%;
    --border: 215 20.2% 65.1%;
    --input: 215 20.2% 65.1%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 222.2 84% 4.9%;
    --chart-2: 222.2 47.4% 11.2%;
    --chart-3: 217.2 32.6% 17.5%;
    --chart-4: 215.3 25% 26.7%;
    --chart-5: 215.3 19.3% 34.5%;
    --radius: 0.5rem;
    --sidebar-background: 210 40% 96.1%;
    --sidebar-foreground: 222.2 84% 4.9%;
    --sidebar-primary: 214.3 31.8% 91.4%;
    --sidebar-primary-foreground: 217.2 32.6% 17.5%;
    --sidebar-accent: 210 40% 96.1%;
    --sidebar-accent-foreground: 215.3 19.3% 34.5%;
    --sidebar-border: 215.3 19.3% 34.5%;
    --sidebar-ring: 215.4 16.3% 46.9%;
  }

  .dark {
    --background: 222.2 47.4% 11.2%;
    --foreground: 210 40% 96.1%;
    --card: 217.2 32.6% 17.5%;
    --card-foreground: 214.3 31.8% 91.4%;
    --popover: 222.2 47.4% 11.2%;
    --popover-foreground: 210 40% 96.1%;
    --primary: 210 40% 96.1%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 215.3 19.3% 34.5%;
    --secondary-foreground: 210 40% 96.1%;
    --muted: 215.3 19.3% 34.5%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 215.3 19.3% 34.5%;
    --accent-foreground: 210 40% 96.1%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 96.1%;
    --border: 215.3 19.3% 34.5%;
    --input: 215.3 19.3% 34.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 222.2 84% 4.9%;
    --chart-2: 217.2 32.6% 17.5%;
    --chart-3: 215.3 25% 26.7%;
    --chart-4: 215.3 19.3% 34.5%;
    --chart-5: 215.4 16.3% 46.9%;
    --sidebar-background: 223, 58%, 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 217.2 32.6% 17.5%;
    --sidebar-primary-foreground: 214.3 31.8% 91.4%;
    --sidebar-accent: 215.3 19.3% 34.5%;
    --sidebar-accent-foreground: 210 40% 96.1%;
    --sidebar-border: 215.3 19.3% 34.5%;
    --sidebar-ring: 215.4 16.3% 46.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    @apply leading-normal;
    @apply text-tiny;
  }
}

@layer utilities {
  /* * SCROLL BAR */
  /* For Webkit browsers (Chrome, Safari) */
  ::-webkit-scrollbar {
    width: 2px;
    height: 5px;
    border-radius: 4px;
    display: none;
  }

  ::-webkit-scrollbar-track {
    background: #81818142;
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb {
    background: #bfc0c9;
    border-radius: 4px;
  }

  /* For Firefox */
  ::-moz-scrollbar {
    width: 2px;
    height: 5px;
    border-radius: 4px;
  }

  ::-moz-scrollbar-track {
    background: #163141;
    border-radius: 4px;
  }

  ::-moz-scrollbar-thumb {
    background: #3ab2bb;
    border-radius: 4px;
  }
}

.debug {
  border: 1px solid red;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

.animate-spin-slow {
  animation: spin 2s linear infinite;
}

.animate-spin-fast {
  animation: spin 0.5s linear infinite;
}



=== Content of ./src/renderer/src/provider/theme-provider.tsx ===
import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'dark' | 'light' | 'system'

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: 'system',
  setTheme: () => null
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = 'system',
  storageKey = 'vite-ui-theme',
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove('light', 'dark')

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    // eslint-disable-next-line @typescript-eslint/no-shadow
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    }
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined) throw new Error('useTheme must be used within a ThemeProvider')

  return context
}



=== Content of ./src/renderer/src/components/ui/button.tsx ===
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@renderer/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
        outline:
          'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline'
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }



=== Content of ./src/renderer/src/components/ui/dropdown-menu.tsx ===
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@renderer/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



=== Content of ./src/renderer/src/components/theme/toggle-theme.tsx ===
import { Moon, Sun } from 'lucide-react'
import { useTheme } from '../../provider/theme-provider'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from '@renderer/components/ui/dropdown-menu'
import { Button } from '../ui/button'

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}



=== Content of ./src/renderer/src/lib/utils.ts ===
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]): string {
  return twMerge(clsx(inputs))
}



=== Content of ./src/renderer/src/assets/main.css ===
@import './base.css';

body {
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  background-image: url('./wavy-lines.svg');
  background-size: cover;
  user-select: none;
}

code {
  font-weight: 600;
  padding: 3px 5px;
  border-radius: 2px;
  background-color: var(--color-background-mute);
  font-family:
    ui-monospace,
    SFMono-Regular,
    SF Mono,
    Menlo,
    Consolas,
    Liberation Mono,
    monospace;
  font-size: 85%;
}

#root {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  margin-bottom: 80px;
}

.logo {
  margin-bottom: 20px;
  -webkit-user-drag: none;
  height: 128px;
  width: 128px;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 1.2em #6988e6aa);
}

.creator {
  font-size: 14px;
  line-height: 16px;
  color: var(--ev-c-text-2);
  font-weight: 600;
  margin-bottom: 10px;
}

.text {
  font-size: 28px;
  color: var(--ev-c-text-1);
  font-weight: 700;
  line-height: 32px;
  text-align: center;
  margin: 0 10px;
  padding: 16px 0;
}

.tip {
  font-size: 16px;
  line-height: 24px;
  color: var(--ev-c-text-2);
  font-weight: 600;
}

.react {
  background: -webkit-linear-gradient(315deg, #087ea4 55%, #7c93ee);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
}

.ts {
  background: -webkit-linear-gradient(315deg, #3178c6 45%, #f0dc4e);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
}

.actions {
  display: flex;
  padding-top: 32px;
  margin: -6px;
  flex-wrap: wrap;
  justify-content: flex-start;
}

.action {
  flex-shrink: 0;
  padding: 6px;
}

.action a {
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  border: 1px solid transparent;
  text-align: center;
  font-weight: 600;
  white-space: nowrap;
  border-radius: 20px;
  padding: 0 20px;
  line-height: 38px;
  font-size: 14px;
  border-color: var(--ev-button-alt-border);
  color: var(--ev-button-alt-text);
  background-color: var(--ev-button-alt-bg);
}

.action a:hover {
  border-color: var(--ev-button-alt-hover-border);
  color: var(--ev-button-alt-hover-text);
  background-color: var(--ev-button-alt-hover-bg);
}

.versions {
  position: absolute;
  bottom: 30px;
  margin: 0 auto;
  padding: 15px 0;
  font-family: 'Menlo', 'Lucida Console', monospace;
  display: inline-flex;
  overflow: hidden;
  align-items: center;
  border-radius: 22px;
  background-color: #202127;
  backdrop-filter: blur(24px);
}

.versions li {
  display: block;
  float: left;
  border-right: 1px solid var(--ev-c-gray-1);
  padding: 0 20px;
  font-size: 14px;
  line-height: 14px;
  opacity: 0.8;
  &:last-child {
    border: none;
  }
}

@media (max-width: 720px) {
  .text {
    font-size: 20px;
  }
}

@media (max-width: 620px) {
  .versions {
    display: none;
  }
}

@media (max-width: 350px) {
  .tip,
  .actions {
    display: none;
  }
}



=== Content of ./src/renderer/src/assets/electron.svg ===
<svg viewBox="0 0 128 128" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="64" cy="64" r="64" fill="#2F3242"/>
  <ellipse cx="63.9835" cy="23.2036" rx="4.48794" ry="4.495" stroke="#A2ECFB" stroke-width="3.6" stroke-linecap="round"/>
  <path d="M51.3954 39.5028C52.3733 39.6812 53.3108 39.033 53.4892 38.055C53.6676 37.0771 53.0194 36.1396 52.0414 35.9612L51.3954 39.5028ZM28.6153 43.5751L30.1748 44.4741L30.1748 44.4741L28.6153 43.5751ZM28.9393 60.9358C29.4332 61.7985 30.5329 62.0976 31.3957 61.6037C32.2585 61.1098 32.5575 60.0101 32.0636 59.1473L28.9393 60.9358ZM37.6935 66.7457C37.025 66.01 35.8866 65.9554 35.1508 66.6239C34.415 67.2924 34.3605 68.4308 35.029 69.1666L37.6935 66.7457ZM53.7489 81.7014L52.8478 83.2597L53.7489 81.7014ZM96.9206 89.515C97.7416 88.9544 97.9526 87.8344 97.3919 87.0135C96.8313 86.1925 95.7113 85.9815 94.8904 86.5422L96.9206 89.515ZM52.0414 35.9612C46.4712 34.9451 41.2848 34.8966 36.9738 35.9376C32.6548 36.9806 29.0841 39.1576 27.0559 42.6762L30.1748 44.4741C31.5693 42.0549 34.1448 40.3243 37.8188 39.4371C41.5009 38.5479 46.1547 38.5468 51.3954 39.5028L52.0414 35.9612ZM27.0559 42.6762C24.043 47.9029 25.2781 54.5399 28.9393 60.9358L32.0636 59.1473C28.6579 53.1977 28.1088 48.0581 30.1748 44.4741L27.0559 42.6762ZM35.029 69.1666C39.6385 74.24 45.7158 79.1355 52.8478 83.2597L54.6499 80.1432C47.8081 76.1868 42.0298 71.5185 37.6935 66.7457L35.029 69.1666ZM52.8478 83.2597C61.344 88.1726 70.0465 91.2445 77.7351 92.3608C85.359 93.4677 92.2744 92.6881 96.9206 89.515L94.8904 86.5422C91.3255 88.9767 85.4902 89.849 78.2524 88.7982C71.0793 87.7567 62.809 84.8612 54.6499 80.1432L52.8478 83.2597ZM105.359 84.9077C105.359 81.4337 102.546 78.6127 99.071 78.6127V82.2127C100.553 82.2127 101.759 83.4166 101.759 84.9077H105.359ZM99.071 78.6127C95.5956 78.6127 92.7831 81.4337 92.7831 84.9077H96.3831C96.3831 83.4166 97.5892 82.2127 99.071 82.2127V78.6127ZM92.7831 84.9077C92.7831 88.3817 95.5956 91.2027 99.071 91.2027V87.6027C97.5892 87.6027 96.3831 86.3988 96.3831 84.9077H92.7831ZM99.071 91.2027C102.546 91.2027 105.359 88.3817 105.359 84.9077H101.759C101.759 86.3988 100.553 87.6027 99.071 87.6027V91.2027Z" fill="#A2ECFB"/>
  <path d="M91.4873 65.382C90.8456 66.1412 90.9409 67.2769 91.7002 67.9186C92.4594 68.5603 93.5951 68.465 94.2368 67.7058L91.4873 65.382ZM99.3169 43.6354L97.7574 44.5344L99.3169 43.6354ZM84.507 35.2412C83.513 35.2282 82.6967 36.0236 82.6838 37.0176C82.6708 38.0116 83.4661 38.8279 84.4602 38.8409L84.507 35.2412ZM74.9407 39.8801C75.9127 39.6716 76.5315 38.7145 76.323 37.7425C76.1144 36.7706 75.1573 36.1517 74.1854 36.3603L74.9407 39.8801ZM53.7836 46.3728L54.6847 47.931L53.7836 46.3728ZM25.5491 80.9047C25.6932 81.8883 26.6074 82.5688 27.5911 82.4247C28.5747 82.2806 29.2552 81.3664 29.1111 80.3828L25.5491 80.9047ZM94.2368 67.7058C97.8838 63.3907 100.505 58.927 101.752 54.678C103.001 50.4213 102.9 46.2472 100.876 42.7365L97.7574 44.5344C99.1494 46.9491 99.3603 50.0419 98.2974 53.6644C97.2323 57.2945 94.9184 61.3223 91.4873 65.382L94.2368 67.7058ZM100.876 42.7365C97.9119 37.5938 91.7082 35.335 84.507 35.2412L84.4602 38.8409C91.1328 38.9278 95.7262 41.0106 97.7574 44.5344L100.876 42.7365ZM74.1854 36.3603C67.4362 37.8086 60.0878 40.648 52.8826 44.8146L54.6847 47.931C61.5972 43.9338 68.5948 41.2419 74.9407 39.8801L74.1854 36.3603ZM52.8826 44.8146C44.1366 49.872 36.9669 56.0954 32.1491 62.3927C27.3774 68.63 24.7148 75.2115 25.5491 80.9047L29.1111 80.3828C28.4839 76.1026 30.4747 70.5062 35.0084 64.5802C39.496 58.7143 46.2839 52.7889 54.6847 47.931L52.8826 44.8146Z" fill="#A2ECFB"/>
  <path d="M49.0825 87.2295C48.7478 86.2934 47.7176 85.8059 46.7816 86.1406C45.8455 86.4753 45.358 87.5055 45.6927 88.4416L49.0825 87.2295ZM78.5635 96.4256C79.075 95.5732 78.7988 94.4675 77.9464 93.9559C77.0941 93.4443 75.9884 93.7205 75.4768 94.5729L78.5635 96.4256ZM79.5703 85.1795C79.2738 86.1284 79.8027 87.1379 80.7516 87.4344C81.7004 87.7308 82.71 87.2019 83.0064 86.2531L79.5703 85.1795ZM84.3832 64.0673H82.5832H84.3832ZM69.156 22.5301C68.2477 22.1261 67.1838 22.535 66.7799 23.4433C66.3759 24.3517 66.7848 25.4155 67.6931 25.8194L69.156 22.5301ZM45.6927 88.4416C47.5994 93.7741 50.1496 98.2905 53.2032 101.505C56.2623 104.724 59.9279 106.731 63.9835 106.731V103.131C61.1984 103.131 58.4165 101.765 55.8131 99.0249C53.2042 96.279 50.8768 92.2477 49.0825 87.2295L45.6927 88.4416ZM63.9835 106.731C69.8694 106.731 74.8921 102.542 78.5635 96.4256L75.4768 94.5729C72.0781 100.235 68.0122 103.131 63.9835 103.131V106.731ZM83.0064 86.2531C85.0269 79.7864 86.1832 72.1831 86.1832 64.0673H82.5832C82.5832 71.8536 81.4723 79.0919 79.5703 85.1795L83.0064 86.2531ZM86.1832 64.0673C86.1832 54.1144 84.4439 44.922 81.4961 37.6502C78.5748 30.4436 74.3436 24.8371 69.156 22.5301L67.6931 25.8194C71.6364 27.5731 75.3846 32.1564 78.1598 39.0026C80.9086 45.7836 82.5832 54.507 82.5832 64.0673H86.1832Z" fill="#A2ECFB"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M103.559 84.9077C103.559 82.4252 101.55 80.4127 99.071 80.4127C96.5924 80.4127 94.5831 82.4252 94.5831 84.9077C94.5831 87.3902 96.5924 89.4027 99.071 89.4027C101.55 89.4027 103.559 87.3902 103.559 84.9077V84.9077Z" stroke="#A2ECFB" stroke-width="3.6" stroke-linecap="round"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M28.8143 89.4027C31.2929 89.4027 33.3023 87.3902 33.3023 84.9077C33.3023 82.4252 31.2929 80.4127 28.8143 80.4127C26.3357 80.4127 24.3264 82.4252 24.3264 84.9077C24.3264 87.3902 26.3357 89.4027 28.8143 89.4027V89.4027V89.4027Z" stroke="#A2ECFB" stroke-width="3.6" stroke-linecap="round"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M64.8501 68.0857C62.6341 68.5652 60.451 67.1547 59.9713 64.9353C59.4934 62.7159 60.9007 60.5293 63.1167 60.0489C65.3326 59.5693 67.5157 60.9798 67.9954 63.1992C68.4742 65.4186 67.066 67.6052 64.8501 68.0857Z" fill="#A2ECFB"/>
</svg>



=== Content of ./src/renderer/src/assets/wavy-lines.svg ===
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1422 800" opacity="0.3">
  <defs>
    <linearGradient x1="50%" y1="0%" x2="50%" y2="100%" id="oooscillate-grad">
      <stop stop-color="hsl(206, 75%, 49%)" stop-opacity="1" offset="0%"></stop>
      <stop stop-color="hsl(331, 90%, 56%)" stop-opacity="1" offset="100%"></stop>
    </linearGradient>
  </defs>
  <g stroke-width="1" stroke="url(#oooscillate-grad)" fill="none" stroke-linecap="round">
    <path d="M 0 448 Q 355.5 -100 711 400 Q 1066.5 900 1422 448" opacity="0.05"></path>
    <path d="M 0 420 Q 355.5 -100 711 400 Q 1066.5 900 1422 420" opacity="0.11"></path>
    <path d="M 0 392 Q 355.5 -100 711 400 Q 1066.5 900 1422 392" opacity="0.18"></path>
    <path d="M 0 364 Q 355.5 -100 711 400 Q 1066.5 900 1422 364" opacity="0.24"></path>
    <path d="M 0 336 Q 355.5 -100 711 400 Q 1066.5 900 1422 336" opacity="0.30"></path>
    <path d="M 0 308 Q 355.5 -100 711 400 Q 1066.5 900 1422 308" opacity="0.37"></path>
    <path d="M 0 280 Q 355.5 -100 711 400 Q 1066.5 900 1422 280" opacity="0.43"></path>
    <path d="M 0 252 Q 355.5 -100 711 400 Q 1066.5 900 1422 252" opacity="0.49"></path>
    <path d="M 0 224 Q 355.5 -100 711 400 Q 1066.5 900 1422 224" opacity="0.56"></path>
    <path d="M 0 196 Q 355.5 -100 711 400 Q 1066.5 900 1422 196" opacity="0.62"></path>
    <path d="M 0 168 Q 355.5 -100 711 400 Q 1066.5 900 1422 168" opacity="0.68"></path>
    <path d="M 0 140 Q 355.5 -100 711 400 Q 1066.5 900 1422 140" opacity="0.75"></path>
    <path d="M 0 112 Q 355.5 -100 711 400 Q 1066.5 900 1422 112" opacity="0.81"></path>
    <path d="M 0 84 Q 355.5 -100 711 400 Q 1066.5 900 1422 84" opacity="0.87"></path>
    <path d="M 0 56 Q 355.5 -100 711 400 Q 1066.5 900 1422 56" opacity="0.94"></path>
  </g>
</svg>



=== Content of ./src/renderer/src/assets/base.css ===
:root {
  --ev-c-white: #ffffff;
  --ev-c-white-soft: #f8f8f8;
  --ev-c-white-mute: #f2f2f2;

  --ev-c-black: #1b1b1f;
  --ev-c-black-soft: #222222;
  --ev-c-black-mute: #282828;

  --ev-c-gray-1: #515c67;
  --ev-c-gray-2: #414853;
  --ev-c-gray-3: #32363f;

  --ev-c-text-1: rgba(255, 255, 245, 0.86);
  --ev-c-text-2: rgba(235, 235, 245, 0.6);
  --ev-c-text-3: rgba(235, 235, 245, 0.38);

  --ev-button-alt-border: transparent;
  --ev-button-alt-text: var(--ev-c-text-1);
  --ev-button-alt-bg: var(--ev-c-gray-3);
  --ev-button-alt-hover-border: transparent;
  --ev-button-alt-hover-text: var(--ev-c-text-1);
  --ev-button-alt-hover-bg: var(--ev-c-gray-2);
}

:root {
  --color-background: var(--ev-c-black);
  --color-background-soft: var(--ev-c-black-soft);
  --color-background-mute: var(--ev-c-black-mute);

  --color-text: var(--ev-c-text-1);
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  font-weight: normal;
}

ul {
  list-style: none;
}

body {
  min-height: 100vh;
  color: var(--color-text);
  background: var(--color-background);
  line-height: 1.6;
  font-family:
    Inter,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Fira Sans',
    'Droid Sans',
    'Helvetica Neue',
    sans-serif;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}



=== Content of ./src/main/index.ts ===
import { app, shell, BrowserWindow, ipcMain } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'
import startServer from './server'

function createWindow(): void {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 670,
    show: false,
    autoHideMenuBar: true,
    ...(process.platform === 'linux' ? { icon } : {}),
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // Set app user model id for windows
  electronApp.setAppUserModelId('com.electron')

  // Default open or close DevTools by F12 in development
  // and ignore CommandOrControl + R in production.
  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils
  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  // IPC test
  ipcMain.on('ping', () => console.log('pong'))

  startServer()

  createWindow()

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

// In this file you can include the rest of your app"s specific main process
// code. You can also put them in separate files and require them here.



=== Content of ./src/main/server.ts ===
import { WebSocketServer } from 'ws'
import express from 'express'
import cors from 'cors'
import http from 'http'
import os from 'os'
import nodePty from 'node-pty'

// const isDevelopment = process.env.NODE_ENV === 'development'
// const nodePty = isDevelopment
//   ? require('node-pty') // Load from node_modules in development
//   : require(path.join(app.getAppPath(), 'release/app/node_modules/node-pty')) // Load from release/app in production

import path from 'path'

// Electron-specific imports
import { app } from 'electron'

// const isDevelopment = process.env.NODE_ENV === 'development';
const appPath = app.isPackaged ? path.join(process.resourcesPath, 'assets') : process.cwd()

const appExpress = express()
const shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash'

// Enable CORS for all origins
appExpress.use(cors())

// Basic HTTP route
appExpress.get('/', (req, res) => {
  res.send('Hello World!')
})

// Create an HTTP server
const server = http.createServer(appExpress)

// Attach WebSocket server to the HTTP server
const wss = new WebSocketServer({ server, path: '/ws' })

// List of allowed commands (whitelist approach)
const allowedCommands: string[] = ['echo', 'git', 'ls', 'pwd', 'whoami'] // Add safe commands here

wss.on('connection', (ws) => {
  console.log('New WebSocket connection')

  const ptyProcess = nodePty.spawn(shell, [], {
    name: 'xterm-color',
    cwd: appPath,
    env: process.env
  })

  let initialized = false

  ptyProcess.onData((data: string) => {
    if (!initialized) {
      if (data.includes('bash-3.2$')) {
        initialized = true
        ws.send(data.trim())
      }
    } else {
      ws.send(data)
    }
  })

  ws.on('message', (message: string) => {
    try {
      const parsedData = JSON.parse(message)

      if (parsedData.type === 'command' && parsedData.command) {
        const command = parsedData.command.trim().split(' ')[0]
        console.log('Received command:', command)

        if (allowedCommands.includes(command)) {
          ptyProcess.write(`${parsedData.command}\n`)
        } else {
          ws.send(
            `"${parsedData.command}" Command not allowed. Use commands like 'git clone <url>' or check your input.`
          )
        }
      } else {
        ws.send(JSON.stringify({ error: 'Invalid message format' }))
      }
    } catch (error) {
      console.error('Invalid JSON received:', message)
      ws.send(JSON.stringify({ error: 'Invalid JSON format' }))
    }
  })

  ws.on('close', () => {
    console.log('WebSocket connection closed')
    ptyProcess.kill()
  })

  ws.on('error', (error) => {
    console.error('WebSocket error:', error)
  })

  ptyProcess.onExit(({ exitCode }: { exitCode: number }) => {
    console.log(`PTY process exited with code ${exitCode}`)
  })
})

// Start the HTTP server
export default function startServer() {
  server.listen(6969, () => {
    console.log('Express Server started on port 6969')
  })
}



=== Content of ./src/preload/index.ts ===
import { contextBridge } from 'electron'
import { electronAPI } from '@electron-toolkit/preload'

// Custom APIs for renderer
const api = {}

// Use `contextBridge` APIs to expose Electron APIs to
// renderer only if context isolation is enabled, otherwise
// just add to the DOM global.
if (process.contextIsolated) {
  try {
    contextBridge.exposeInMainWorld('electron', electronAPI)
    contextBridge.exposeInMainWorld('api', api)
  } catch (error) {
    console.error(error)
  }
} else {
  // @ts-ignore (define in dts)
  window.electron = electronAPI
  // @ts-ignore (define in dts)
  window.api = api
}



=== Content of ./src/preload/index.d.ts ===
import { ElectronAPI } from '@electron-toolkit/preload'

declare global {
  interface Window {
    electron: ElectronAPI
    api: unknown
  }
}



```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/index.html`:

```html
<!doctype html>
<html>

  <head>
    <meta charset="UTF-8" />
    <title>Electron</title>
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <!-- <meta http-equiv="Content-Security-Policy"
      content="default-src 'self'; connect-src 'self' ws://localhost:6969 http://localhost:6969; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:" /> -->

  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>

</html>

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/App.tsx`:

```tsx
import { Suspense, lazy, useEffect } from 'react'
import { createBrowserRouter, RouterProvider } from 'react-router-dom'
import LoginNavbar from './components/custom/navbars/login-navbar'
import { SidebarInset, SidebarProvider } from './components/ui/sidebar'
import { AppSidebar } from './components/custom/sidebar'
import PublicRouteProtector from './services/route-protector/public-route-protector'
import PrivateRouteProtector from './services/route-protector/private-route-protector'
import ProjectPageNavbar from './components/custom/navbars/projects-page-navbar'
import Footer from './components/custom/global/footer'
import { addMessageListener, disconnectWebSocket, removeMessageListener } from './socket/socket'
import { LogTableEntry } from './types/type'
import { useLogStore } from './stores/useLogStore'

// Lazy load pages
const LogAnalysis = lazy(() => import('./pages/dashboard/log-analysis/index'))
const NotFound = lazy(() => import('./pages/not-found/not-found'))
const Login = lazy(() => import('./pages/login/index'))
const Projects = lazy(() => import('./pages/projects/index'))

const router = createBrowserRouter([
  {
    path: '/',
    element: (
      <>
        <Suspense fallback={<div className="text-center">Loading...</div>}>
          <PublicRouteProtector>
            <>
              <LoginNavbar />
              <Login />
            </>
          </PublicRouteProtector>
        </Suspense>
      </>
    )
  },
  {
    path: '/login',
    element: (
      <>
        <Suspense fallback={<div className="text-center">Loading...</div>}>
          <PublicRouteProtector>
            <>
              <LoginNavbar />
              <Login />
            </>
          </PublicRouteProtector>
        </Suspense>
      </>
    )
  },
  {
    path: '/:organization/projects',
    element: (
      <Suspense fallback={<div className="text-center">Loading...</div>}>
        <PrivateRouteProtector>
          <ProjectPageNavbar />
          <Projects />
        </PrivateRouteProtector>
      </Suspense>
    )
  },
  {
    path: '/:organization/projects/:project_id/log-analysis/:submodule',
    element: (
      <Suspense fallback={<div className="text-center">Loading...</div>}>
        <PrivateRouteProtector>
          <SidebarProvider>
            <AppSidebar variant="inset" className="" />
            <SidebarInset className="">
              <LogAnalysis />
            </SidebarInset>
          </SidebarProvider>
          <div className="fixed bottom-0 right-0 bg-sidebar-background w-full ">
            <Footer />
          </div>
        </PrivateRouteProtector>
      </Suspense>
    )
  },
  {
    path: '*',
    element: (
      <>
        {/* <Header /> */}
        <Suspense fallback={<div className="text-center">Loading...</div>}>
          <NotFound />
        </Suspense>
        {/* <Footer /> */}
      </>
    )
  }
])

function App(): JSX.Element {
  // ! TEST CONNECTION TO MAIN PROCESS
  // const ipcHandle = (): void => window.electron.ipcRenderer.send('ping')

  const { appendTableDataToTop, setLogDataToStream } = useLogStore()
  /*
	WebSocket message handling for new logs

	This logic is part of the Log Analysis page under the Explorer tab.
	The WebSocket connection and its message handling must be initialized at the root level of the app (in App.tsx).
	This ensures the WebSocket listener is active as soon as the app starts, regardless of whether the Log Analysis -> Explorer tab has been rendered.

	If the WebSocket logic were placed in log-analysis.tsx, it would only listen for messages when the Log Analysis page is rendered,
	which is not desirable for real-time log updates.

	By placing the WebSocket handling here, the app can start listening for WebSocket messages immediately after initialization.
	*/
  useEffect(() => {
    // Define a listener to handle chunks
    const handleChunk = (chunk: any) => {
      if (chunk.action === 'new_log') {
        const logTableData: LogTableEntry = {
          id: chunk.data.log_id,
          applicationId: chunk.data.application_id,
          organizationId: chunk.data.raw_log.organization_id.$oid,
          error: chunk.data.raw_log.error,
          url: chunk.data.raw_log.url,
          method: chunk.data.raw_log.method,
          createdAt: chunk.data.raw_log.created_at,
          updatedAt: chunk.data.raw_log.updated_at,
          ragInference: {
            rag_response: {
              formatted_rag_response: [],
              rag_response: {
                application_id: '',
                created_at: '',
                processed_at: '',
                query: '',
                rag_response: ''
              },
              application_id: '',
              created_at: '',
              query: ''
            }
          },
          traceback: chunk.data.raw_log.traceback,
          isStreaming: true
        }
        appendTableDataToTop([logTableData])
        // Show notification in Electron
        if (window.electronAPI) {
          window.electronAPI.sendMessage('toMain', {
            message: `New log received: ${chunk.data.raw_log.error}`
          })
        }
      } else if (chunk.action === 'stream_log_response') {
        setLogDataToStream({
          isStreaming: true,
          application_id: chunk.data.application_id,
          chunk: chunk.data.chunk,
          log_id: chunk.data.log_id
        })
      } else if (chunk.action === 'stream_complete') {
        // const log_id = chunk.data.log_id;
        // setLogStreamingComplete(log_id);
        setLogDataToStream({
          isStreaming: false,
          application_id: chunk.data.application_id,
          chunk: chunk.data.chunk,
          log_id: chunk.data.log_id
        })
      } else {
        console.log('Received message from WebSocket:', chunk)
      }
      // setStreamedMessage((prev) => prev + chunk); // Append each chunk to the current message
    }

    // Add the listener
    addMessageListener(handleChunk)

    // Cleanup on component unmount
    return () => {
      removeMessageListener(handleChunk)
      disconnectWebSocket()
    }
  }, [])

  return <RouterProvider router={router} />
}

export default App

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/main.tsx`:

```tsx
// import './assets/main.css'
import './index.css'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import { ThemeProvider } from './provider/theme-provider'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      <QueryClientProvider client={queryClient}>
        <App />
      </QueryClientProvider>
    </ThemeProvider>
  </React.StrictMode>
)

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/types/electron.d.ts`:

```ts
// react-app/src/types/electron.d.ts
export {}

import { ToMainPayload, FromMainPayload } from '../../../src/types/types'
declare global {
  interface Window {
    electronAPI: {
      sendMessage: (channel: 'toMain', data: ToMainPayload) => void
      receiveMessage: (channel: 'fromMain', callback: (data: FromMainPayload) => void) => void
    }
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/types/type.ts`:

```ts
// ****************************************************************************** //
//! ***************************** LOGIN TYPES *********************************** //
// ****************************************************************************** //
export interface LoginFormData {
  clientId: string
  clientSecret: string
}

export interface LoginFormErrors {
  clientId?: string
  clientSecret?: string
}

export interface LoginState {
  formData: LoginFormData
  errors: LoginFormErrors
  loading: boolean
  setFormData: (field: keyof LoginFormData, value: string) => void
  setErrors: (errors: LoginFormErrors) => void
  setLoading: (loading: boolean) => void
  clearErrors: (field: keyof LoginFormErrors) => void
}

// ****************************************************************************** //
//! ***************************** ORGANIZATION TYPES *********************************** //
// ****************************************************************************** //

export interface Organization {
  id: string
  cd_id: string
  cd_secret: string
  created_at: string
  organization_name: string
}

// ****************************************************************************** //
//! ***************************** PROJECTS TYPES *********************************** //
// ****************************************************************************** //

export type ProjectCardData = {
  name: string
  value: number | string
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | null | undefined
}

export type ProjectCardProps = {
  id: string
  title: string
  description: string
  data: ProjectCardData[]
  isLinkedToRemote: boolean
  remoteUrl: string
  onOpenProject: () => void
  onOpenTerminal: () => void
}

export interface Project {
  id: string
  name: string
  description: string
  errorCount: number
  codeSuggestionCount: number
  totalErrorResolved: number
  isConnectedToRemote: boolean
  remoteUrl: string
}

export type ProjectList = Project[]

export interface CreateProjectState {
  name: string
  setName: (name: string) => void
  description: string
  setDescription: (description: string) => void
  loading: boolean
  setLoading: (loading: boolean) => void
  openModal: boolean
  setOpenModal: (openModal: boolean) => void
  errors: { name?: string; description?: string }
  setErrors: (errors: { name?: string; description?: string }) => void
}

export interface ProjectState {
  loading: boolean
  setLoading: (loading: boolean) => void
  projectList: ProjectList
  setProjectList: (projects: ProjectList) => void
}

export interface TerminalDrawerStoreState {
  loading: boolean
  setLoading: (loading: boolean) => void
  openDrawer: boolean
  setOpenDrawer: (openDrawer: boolean) => void
}

// ****************************************************************************** //
//! ***************************** LOGS TYPES *********************************** //
// ****************************************************************************** //

// Type for each formatted response in ragInference
export interface FormattedRagResponse {
  type: 'markdown' | 'code'
  value: string
}

// Type for rag_response object
export interface RagResponse {
  formatted_rag_response: FormattedRagResponse[]
  rag_response: {
    application_id: string
    created_at: string // ISO 8601 format
    processed_at: string // ISO 8601 format
    query: string
    rag_response: string
  }
  application_id: string
  created_at: string // ISO 8601 format
  query: string
}

// Type for Log Entry
export interface LogTableEntry {
  id: string
  organizationId: string
  applicationId: string
  error: string
  url: string
  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'default'
  createdAt: string // ISO 8601 format
  updatedAt: string // ISO 8601 format
  ragInference: { rag_response: RagResponse | null } // Parsed JSON or null if parsing fails
  traceback: string
  isStreaming?: boolean
}

// Example: Array of log entries
export type LogData = LogTableEntry[]

export interface LogStoreState {
  loading: boolean
  setLoading: (loading: boolean) => void

  openSlideOver: boolean
  setOpenSlideOver: (openSlideOver: boolean) => void

  selectedLog: LogTableEntry | null
  setSelectedLog: (selectedLog: LogTableEntry) => void

  page: number
  setPage: (page: number) => void
  incrementPage: () => void
  decrementPage: () => void
  limit: number
  setLimit: (limit: number) => void
  totalLogs: number | null // Add this
  setTotalLogs: (totalLogs: number) => void // Add this

  tableData: LogTableEntry[]
  setTableData: (tableData: LogTableEntry[]) => void
  resetTableData: () => void

  appendTableDataToBottom: (newData: LogTableEntry[]) => void
  appendTableDataToTop: (newData: LogTableEntry[]) => void

  setLogDataToStream: (dataToStream: StreamResponse | null) => void
  streamingData: LogTableEntry | null
  setStreamingData: (streamingData: LogTableEntry | null) => void
}

export type StreamResponse = {
  isStreaming: boolean
  application_id: string
  chunk: string
  log_id: string
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/env.d.ts`:

```ts
/// <reference types="vite/client" />

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/provider/theme-provider.tsx`:

```tsx
import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'dark' | 'light' | 'system'

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: 'system',
  setTheme: () => null
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = 'system',
  storageKey = 'vite-ui-theme',
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove('light', 'dark')

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    // eslint-disable-next-line @typescript-eslint/no-shadow
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    }
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined) throw new Error('useTheme must be used within a ThemeProvider')

  return context
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/stores/useProjectCreateStore.ts`:

```ts
import { CreateProjectState } from '../types/type'
import { create } from 'zustand'

export const useProjectCreateStore = create<CreateProjectState>((set) => ({
  name: '',
  setName: (name: string) => set({ name }),
  description: '',
  setDescription: (description: string) => set({ description }),
  loading: false,
  setLoading: (loading: boolean) => set({ loading }),
  openModal: false,
  setOpenModal: (openModal: boolean) => set({ openModal }),
  errors: { name: '', description: '' },
  setErrors: (errors) => set({ errors })
}))

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/stores/useLogStore.ts`:

```ts
import { create } from 'zustand'
import { LogStoreState, LogTableEntry, StreamResponse } from '../types/type'

export const useLogStore = create<LogStoreState>((set) => ({
  // Loading state for fetch operations
  loading: false,
  setLoading: (loading: boolean) => set({ loading }),

  // Slide-over state
  openSlideOver: false,
  setOpenSlideOver: (openSlideOver: boolean) => set({ openSlideOver }),

  // Selected log for detailed view
  selectedLog: null,
  setSelectedLog: (selectedLog: LogTableEntry) => set({ selectedLog }),

  // Pagination state
  page: 1,
  setPage: (page: number) => set({ page }),
  incrementPage: () => set((state) => ({ page: state.page + 1 })),
  decrementPage: () => set((state) => ({ page: Math.max(state.page - 1, 1) })), // Prevent page < 1

  // Items per page
  limit: 15,
  setLimit: (limit: number) => set({ limit }),

  // Total logs (used to stop further fetches)
  totalLogs: null, // Nullable to check if total count is known
  setTotalLogs: (totalLogs: number) => set({ totalLogs }),

  // Table data
  tableData: [],
  setTableData: (tableData: LogTableEntry[]) => set({ tableData }),

  streamingData: null,
  setStreamingData: (streamingData: LogTableEntry | null) => set({ streamingData }),

  setLogDataToStream: (dataToStream: StreamResponse | null) =>
    set((state) => {
      if (!dataToStream) return state

      const updatedTableData = state.tableData.map((log) => {
        if (log.id === dataToStream.log_id && log.applicationId === dataToStream.application_id) {
          const updatedLog = {
            ...log,
            isStreaming: dataToStream.isStreaming,
            ragInference: {
              rag_response: {
                formatted_rag_response: [],
                rag_response: {
                  application_id: '',
                  created_at: '',
                  processed_at: '',
                  query: '',
                  rag_response:
                    log.ragInference.rag_response?.rag_response.rag_response +
                    (dataToStream.chunk || '')
                },
                application_id: '',
                created_at: '',
                query: ''
              }
            }
          }
          state.setStreamingData(updatedLog)
          return updatedLog
        }
        return log
      })

      return { tableData: updatedTableData }
    }),

  // Append new logs to the existing table data
  appendTableDataToBottom: (newData: LogTableEntry[]) =>
    set((state) => ({ tableData: [...state.tableData, ...newData] })),

  appendTableDataToTop: (newData: LogTableEntry[]) =>
    set((state) => ({ tableData: [...newData, ...state.tableData] })),

  // Reset table data and pagination
  resetTableData: () =>
    set({
      tableData: [],
      page: 1,
      totalLogs: null
    })
}))

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/stores/useProjectListStore.ts`:

```ts
import { ProjectList, ProjectState } from '../types/type'
import { create } from 'zustand'

export const useProjectListStore = create<ProjectState>((set) => ({
  loading: false,
  setLoading: (loading: boolean) => set({ loading }),
  projectList: [],
  setProjectList: (projectList: ProjectList) => set({ projectList })
}))

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/stores/useAuthStore.ts`:

```ts
import { create } from 'zustand'

interface AuthState {
  isLoggedIn: boolean
  setIsLoggedIn: (status: boolean) => void
  organization: string
  setOrganization: (org: string) => void
}

export const useAuthStore = create<AuthState>((set) => ({
  isLoggedIn: false,
  setIsLoggedIn: (status) => set({ isLoggedIn: status }),
  organization: '',
  setOrganization: (org) => set({ organization: org })
}))

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/stores/useTerminalDrawerStore.ts`:

```ts
import { TerminalDrawerStoreState } from '../types/type'
import { create } from 'zustand'

export const useTerminalDrawerStore = create<TerminalDrawerStoreState>((set) => ({
  loading: false,
  setLoading: (loading: boolean) => set({ loading }),
  openDrawer: false,
  setOpenDrawer: (openDrawer: boolean) => set({ openDrawer })
}))

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/stores/useLoginStore.ts`:

```ts
import { LoginState } from '../types/type'
import { create } from 'zustand'

export const useLoginStore = create<LoginState>((set) => ({
  formData: {
    clientId: '',
    clientSecret: ''
  },
  errors: {},
  loading: false,
  setFormData: (field, value) =>
    set((state) => ({
      formData: {
        ...state.formData,
        [field]: value
      }
    })),
  setErrors: (errors) =>
    set(() => ({
      errors
    })),
  setLoading: (loading) =>
    set(() => ({
      loading
    })),
  clearErrors: (field) =>
    set((state) => ({
      errors: {
        ...state.errors,
        [field]: undefined
      }
    }))
}))

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/index.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  outline: none !important;
}

body {
  font-family: Arial, Helvetica, sans-serif;
}

button:hover {
  border: inherit;
}

@layer base {
  :root {
    --background: 210 40% 98%;
    --foreground: 222.2 84% 4.9%;
    --card: 210 40% 96.1%;
    --card-foreground: 217.2 32.6% 17.5%;
    --popover: 210 40% 98%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 96.1%;
    --secondary: 212.7 26.8% 83.9%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 212.7 26.8% 83.9%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 212.7 26.8% 83.9%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 96.1%;
    --border: 215 20.2% 65.1%;
    --input: 215 20.2% 65.1%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 222.2 84% 4.9%;
    --chart-2: 222.2 47.4% 11.2%;
    --chart-3: 217.2 32.6% 17.5%;
    --chart-4: 215.3 25% 26.7%;
    --chart-5: 215.3 19.3% 34.5%;
    --radius: 0.5rem;
    --sidebar-background: 210 40% 96.1%;
    --sidebar-foreground: 222.2 84% 4.9%;
    --sidebar-primary: 214.3 31.8% 91.4%;
    --sidebar-primary-foreground: 217.2 32.6% 17.5%;
    --sidebar-accent: 210 40% 96.1%;
    --sidebar-accent-foreground: 215.3 19.3% 34.5%;
    --sidebar-border: 215.3 19.3% 34.5%;
    --sidebar-ring: 215.4 16.3% 46.9%;
  }

  .dark {
    --background: 222.2 47.4% 11.2%;
    --foreground: 210 40% 96.1%;
    --card: 217.2 32.6% 17.5%;
    --card-foreground: 214.3 31.8% 91.4%;
    --popover: 222.2 47.4% 11.2%;
    --popover-foreground: 210 40% 96.1%;
    --primary: 210 40% 96.1%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 215.3 19.3% 34.5%;
    --secondary-foreground: 210 40% 96.1%;
    --muted: 215.3 19.3% 34.5%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 215.3 19.3% 34.5%;
    --accent-foreground: 210 40% 96.1%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 96.1%;
    --border: 215.3 19.3% 34.5%;
    --input: 215.3 19.3% 34.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 222.2 84% 4.9%;
    --chart-2: 217.2 32.6% 17.5%;
    --chart-3: 215.3 25% 26.7%;
    --chart-4: 215.3 19.3% 34.5%;
    --chart-5: 215.4 16.3% 46.9%;
    --sidebar-background: 223, 58%, 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 217.2 32.6% 17.5%;
    --sidebar-primary-foreground: 214.3 31.8% 91.4%;
    --sidebar-accent: 215.3 19.3% 34.5%;
    --sidebar-accent-foreground: 210 40% 96.1%;
    --sidebar-border: 215.3 19.3% 34.5%;
    --sidebar-ring: 215.4 16.3% 46.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    @apply leading-normal;
    @apply text-tiny;
  }
}

@layer utilities {

  /* * SCROLL BAR */
  /* For Webkit browsers (Chrome, Safari) */
  ::-webkit-scrollbar {
    width: 2px;
    height: 5px;
    border-radius: 4px;
    display: none;
  }

  ::-webkit-scrollbar-track {
    background: #81818142;
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb {
    background: #bfc0c9;
    border-radius: 4px;
  }

  /* For Firefox */
  ::-moz-scrollbar {
    width: 2px;
    height: 5px;
    border-radius: 4px;
  }

  ::-moz-scrollbar-track {
    background: #163141;
    border-radius: 4px;
  }

  ::-moz-scrollbar-thumb {
    background: #3ab2bb;
    border-radius: 4px;
  }
}

.debug {
  border: 1px solid red;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

.animate-spin-slow {
  animation: spin 2s linear infinite;
}

.animate-spin-fast {
  animation: spin 0.5s linear infinite;
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/aspect-ratio.tsx`:

```tsx
import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/alert-dialog.tsx`:

```tsx
'use client'

import * as React from 'react'
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'

import { cn } from '../../lib/utils'
import { buttonVariants } from './button'

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />
)
AlertDialogHeader.displayName = 'AlertDialogHeader'

const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
    {...props}
  />
)
AlertDialogFooter.displayName = 'AlertDialogFooter'

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold', className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/pagination.tsx`:

```tsx
import * as React from 'react'
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react'

import { cn } from '../../lib/utils'
import { ButtonProps, buttonVariants } from './button'

const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}
    {...props}
  />
)
Pagination.displayName = 'Pagination'

const PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
  ({ className, ...props }, ref) => (
    <ul ref={ref} className={cn('flex flex-row items-center gap-1', className)} {...props} />
  )
)
PaginationContent.displayName = 'PaginationContent'

const PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
  ({ className, ...props }, ref) => <li ref={ref} className={cn('', className)} {...props} />
)
PaginationItem.displayName = 'PaginationItem'

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, 'size'> &
  React.ComponentProps<'a'>

const PaginationLink = ({ className, isActive, size = 'icon', ...props }: PaginationLinkProps) => (
  <a
    aria-current={isActive ? 'page' : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? 'outline' : 'ghost',
        size
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = 'PaginationLink'

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn('gap-1 pl-2.5', className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = 'PaginationPrevious'

const PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn('gap-1 pr-2.5', className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = 'PaginationNext'

const PaginationEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (
  <span
    aria-hidden
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = 'PaginationEllipsis'

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/link.tsx`:

```tsx
import React from 'react'
import { Link, LinkProps } from 'react-router-dom'
import clsx from 'clsx' // For conditional class management (optional)

interface CustomLinkProps extends LinkProps {
  className?: string
  children: React.ReactNode
  variant?: 'default' | 'primary' | 'secondary' // Optional variants
}

const CustomLink: React.FC<CustomLinkProps> = ({
  to,
  className = '',
  children,
  variant = 'default',
  ...rest
}) => {
  const baseClasses = 'inline-block text-sm underline transition-colors'
  const variantClasses = {
    default: 'hover:text-primary/70',
    primary: 'hover:text-primary/70',
    secondary: 'hover:text-secondary/70'
  }

  return (
    <Link to={to} className={clsx(baseClasses, variantClasses[variant], className)} {...rest}>
      {children}
    </Link>
  )
}

export default CustomLink

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/tabs.tsx`:

```tsx
import * as React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'

import { cn } from '@renderer/lib/utils'

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      'inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground',
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow',
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/card.tsx`:

```tsx
import * as React from 'react'

import { cn } from '../../lib/utils'

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('rounded-xl border bg-card text-card-foreground shadow', className)}
      {...props}
    />
  )
)
Card.displayName = 'Card'

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />
  )
)
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('font-semibold leading-none tracking-tight', className)}
      {...props}
    />
  )
)
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />
  )
)
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
  )
)
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} />
  )
)
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/slider.tsx`:

```tsx
import * as React from 'react'
import * as SliderPrimitive from '@radix-ui/react-slider'

import { cn } from '@renderer/lib/utils'

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn('relative flex w-full touch-none select-none items-center', className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/popover.tsx`:

```tsx
import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'

import { cn } from '@renderer/lib/utils'

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/loader.tsx`:

```tsx
import React from 'react'
import clsx from 'clsx'

interface LoaderProps {
  size?: '2' | '4' | '6' | '8' | '10' | '12' | '14' | '16' // Granular size scaling
  color?: 'primary' | 'secondary' | 'accent' | 'muted' | 'destructive' // Tailwind config colors
  speed?: 'slow' | 'normal' | 'fast' // Animation speed
  message?: string // Loading message
  className?: string // Additional className for styling
}

/**
 * A custom loader component that provides size, color, speed and message options.
 *
 * This component renders a div with a flexbox layout and a rounded div that animates
 * based on the speed option. The size, color and speed options are controlled by the
 * props passed to the component.
 *
 * The component also renders a paragraph with the message text.
 *
 * @example
 * <Loader size="large" color="accent" speed="fast" message="Loading..." />
 *
 * @param {CustomLoaderProps} props The props object passed to the component.
 * @param {string} props.size The size of the loader. Options are "2" | "4" | "6" | "8" | "10" | "12" | "14" | "16".
 * @param {string} props.color The color of the loader. Options are "primary", "secondary", "accent", "muted" or "destructive".
 * @param {string} props.speed The speed of the animation. Options are "slow", "normal" or "fast".
 * @param {string} props.message The message displayed below the loader. Defaults to "Loading...".
 * @param {string} props.className Additional className for custom styling.
 * @returns {React.ReactElement} The loader component.
 */
const Loader: React.FC<LoaderProps> = ({
  size = '8', // Default size
  color = 'primary', // Default color
  speed = 'normal', // Default speed
  message = '', // Default message
  className = '' // Additional styling
}) => {
  const sizeClassesMap = {
    '2': 'w-2 h-2 border-[0.5px]',
    '4': 'w-4 h-4 border',
    '6': 'w-6 h-6 border-[1.5px]',
    '8': 'w-8 h-8 border-2',
    '10': 'w-10 h-10 border-[2.5px]',
    '12': 'w-12 h-12 border-3',
    '14': 'w-14 h-14 border-[3.5px]',
    '16': 'w-16 h-16 border-4'
  }

  const sizeClasses = sizeClassesMap[size] || sizeClassesMap['8']

  const colorClasses = {
    primary: 'border-primary border-t-primary-foreground',
    secondary: 'border-secondary border-t-secondary-foreground',
    accent: 'border-accent border-t-accent-foreground',
    muted: 'border-muted border-t-muted-foreground',
    destructive: 'border-destructive border-t-destructive-foreground'
  }

  const speedClasses = {
    slow: 'animate-spin-slow',
    normal: 'animate-spin',
    fast: 'animate-spin-fast'
  }

  return (
    <div className={clsx('flex w-full items-center justify-center', className)}>
      <div className="flex flex-col items-center space-y-4">
        <div
          className={clsx('rounded-full', sizeClasses, colorClasses[color], speedClasses[speed])}
        />
        {message && <p className="text-muted-foreground">{message}</p>}
      </div>
    </div>
  )
}

export default Loader

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/progress.tsx`:

```tsx
import * as React from 'react'
import * as ProgressPrimitive from '@radix-ui/react-progress'

import { cn } from '@renderer/lib/utils'

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn('relative h-2 w-full overflow-hidden rounded-full bg-primary/20', className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/toaster.tsx`:

```tsx
import { useToast } from '../../hooks/use-toast'
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport
} from './toast'

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props} className="py-2">
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && <ToastDescription>{description}</ToastDescription>}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/input-otp.tsx`:

```tsx
import * as React from 'react'
import { OTPInput, OTPInputContext } from 'input-otp'
import { Minus } from 'lucide-react'

import { cn } from '@renderer/lib/utils'

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      'flex items-center gap-2 has-[:disabled]:opacity-50',
      containerClassName
    )}
    className={cn('disabled:cursor-not-allowed', className)}
    {...props}
  />
))
InputOTP.displayName = 'InputOTP'

const InputOTPGroup = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('flex items-center', className)} {...props} />
))
InputOTPGroup.displayName = 'InputOTPGroup'

const InputOTPSlot = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        'relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',
        isActive && 'z-10 ring-1 ring-ring',
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = 'InputOTPSlot'

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<'div'>,
  React.ComponentPropsWithoutRef<'div'>
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
))
InputOTPSeparator.displayName = 'InputOTPSeparator'

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/chart.tsx`:

```tsx
import * as React from 'react'
import * as RechartsPrimitive from 'recharts'
// import { NameType, Payload, ValueType } from 'recharts/types/component/DefaultTooltipContent'

import { cn } from '../../lib/utils'

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />')
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    config: ChartConfig
    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children']
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = 'Chart'

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color)
  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join('\n')}
}
`
          )
          .join('\n')
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<'div'> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: 'line' | 'dot' | 'dashed'
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = 'dot',
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || 'value'}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === 'string'
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn('font-medium', labelClassName)}>{value}</div>
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== 'dot'

    return (
      <div
        ref={ref}
        className={cn(
          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',
                  indicator === 'dot' && 'items-center'
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed'
                            }
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center'
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = 'ChartTooltip'

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> &
    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      ref={ref}
      className={cn(
        'flex items-center justify-center gap-4',
        verticalAlign === 'top' ? 'pb-3' : 'pt-3',
        className
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || 'value'}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
})
ChartLegendContent.displayName = 'ChartLegend'

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined
  }

  const payloadPayload =
    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string
  }

  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/hover-card.tsx`:

```tsx
import * as React from 'react'
import * as HoverCardPrimitive from '@radix-ui/react-hover-card'

import { cn } from '@renderer/lib/utils'

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      'z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/sheet.tsx`:

```tsx
'use client'

import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { cva, type VariantProps } from 'class-variance-authority'
import { X } from 'lucide-react'

import { cn } from '../../lib/utils'

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/50 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-full border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left',
        right:
          'inset-y-0 right-0 h-full w-full  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right'
      }
    },
    defaultVariants: {
      side: 'right'
    }
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />
)
SheetHeader.displayName = 'SheetHeader'

const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
    {...props}
  />
)
SheetFooter.displayName = 'SheetFooter'

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/scroll-area.tsx`:

```tsx
import * as React from 'react'
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'

import { cn } from '../../lib/utils'

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn('relative overflow-hidden', className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = 'vertical', ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      'flex touch-none select-none transition-colors',
      orientation === 'vertical' && 'h-full w-2.5 border-l border-l-transparent p-[1px]',
      orientation === 'horizontal' && 'h-2.5 flex-col border-t border-t-transparent p-[1px]',
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/label.tsx`:

```tsx
import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '../../lib/utils'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/sonner.tsx`:

```tsx
import { useTheme } from 'next-themes'
import { Toaster as Sonner } from 'sonner'

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
          description: 'group-[.toast]:text-muted-foreground',
          actionButton: 'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
          cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground'
        }
      }}
      {...props}
    />
  )
}

export { Toaster }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/navigation-menu.tsx`:

```tsx
import * as React from 'react'
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'
import { cva } from 'class-variance-authority'
import { ChevronDown } from 'lucide-react'

import { cn } from '@renderer/lib/utils'

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn('relative z-10 flex max-w-max flex-1 items-center justify-center', className)}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn('group flex flex-1 list-none items-center justify-center space-x-1', className)}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), 'group', className)}
    {...props}
  >
    {children}{' '}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn('absolute left-0 top-full flex justify-center')}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/accordion.tsx`:

```tsx
import * as React from 'react'
import * as AccordionPrimitive from '@radix-ui/react-accordion'
import { ChevronDown } from 'lucide-react'

import { cn } from '../../lib/utils'

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn(className)} // Removed 'border-b'
    {...props}
  />
))
AccordionItem.displayName = 'AccordionItem'

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all text-left [&[data-state=open]>svg]:rotate-180',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down ring-0"
    {...props}
  >
    <div className={cn('pt-0', className)}>{children}</div> {/* Removed 'pb-4' */}
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/typography.tsx`:

```tsx
import React from 'react'

type TypographyProps = {
  variant?:
    | 'xs'
    | 'sm'
    | 'base'
    | 'md'
    | 'lg'
    | 'xl'
    | '2x'
    | '3xl'
    | '4xl'
    | '5xl'
    | '6xl'
    | '7xl'
    | '8xl'
    | '9xl'
    | 'h1'
    | 'h2'
    | 'h3'
    | 'p'
    | 'small'
    | 'blockquote'
    | 'code'
    | 'ul'
    | 'ol'
    | 'hr'
    | 'caption'
  children?: React.ReactNode
  className?: string
}

export const Typography: React.FC<TypographyProps> = ({
  variant = 'p',
  children,
  className = ''
}) => {
  const baseClass = 'text-foreground'
  const variantClasses = {
    xs: 'text-xs', // 11px
    sm: 'text-sm', // 12px
    base: 'text-base', // 13px
    md: 'text-md', // 15px
    lg: 'text-lg', // 17px
    xl: 'text-xl', // 19px
    '2x': 'text-2xl', // 22px
    '3xl': 'text-3xl', // 25px
    '4xl': 'text-4xl', // 29px
    '5xl': 'text-5xl', // 35px
    '6xl': 'text-6xl', // 41px
    '7xl': 'text-7xl', // 49px
    '8xl': 'text-8xl', // 60px
    '9xl': 'text-9xl', // 72px
    h1: 'text-4xl font-bold mb-6',
    h2: 'text-3xl font-semibold mb-5',
    h3: 'text-2xl font-medium mb-4',
    p: 'text-base mb-4',
    small: 'text-sm text-muted-foreground mb-2',
    blockquote: 'border-l-4 pl-4 italic text-muted-foreground border-muted mb-4',
    code: 'bg-muted/10 px-2 py-1 rounded text-sm font-mono text-accent-foreground',
    ul: 'list-disc list-inside mb-4 space-y-2',
    ol: 'list-decimal list-inside mb-4 space-y-2',
    hr: 'border-t border-muted my-4',
    caption: 'text-xs text-muted-foreground'
  }

  const Component = variant === 'hr' ? 'hr' : variant === 'code' ? 'code' : 'div'

  return (
    <Component className={`${baseClass} ${variantClasses[variant] || ''} ${className}`}>
      {children}
    </Component>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/drawer.tsx`:

```tsx
import * as React from 'react'
import { Drawer as DrawerPrimitive } from 'vaul'

import { cn } from '../../lib/utils'

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
)
Drawer.displayName = 'Drawer'

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn('fixed inset-0 z-50 bg-black/80', className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        'fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background',
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = 'DrawerContent'

const DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn('grid gap-1.5 p-4 text-center sm:text-left', className)} {...props} />
)
DrawerHeader.displayName = 'DrawerHeader'

const DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn('mt-auto flex flex-col gap-2 p-4', className)} {...props} />
)
DrawerFooter.displayName = 'DrawerFooter'

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/tooltip.tsx`:

```tsx
import * as React from 'react'
import * as TooltipPrimitive from '@radix-ui/react-tooltip'

import { cn } from '../../lib/utils'

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/alert.tsx`:

```tsx
import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '../../lib/utils'

const alertVariants = cva(
  'relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        destructive:
          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} />
))
Alert.displayName = 'Alert'

const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5
      ref={ref}
      className={cn('mb-1 font-medium leading-none tracking-tight', className)}
      {...props}
    />
  )
)
AlertTitle.displayName = 'AlertTitle'

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('text-sm [&_p]:leading-relaxed', className)} {...props} />
))
AlertDescription.displayName = 'AlertDescription'

export { Alert, AlertTitle, AlertDescription }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/switch.tsx`:

```tsx
import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'

import { cn } from '@renderer/lib/utils'

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/calendar.tsx`:

```tsx
import * as React from 'react'
import { ChevronLeft, ChevronRight } from 'lucide-react'
import { DayPicker } from 'react-day-picker'

import { cn } from '../../lib/utils'
import { buttonVariants } from './button'

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',
        month: 'space-y-4',
        caption: 'flex justify-center pt-1 relative items-center',
        caption_label: 'text-sm font-medium',
        nav: 'space-x-1 flex items-center',
        nav_button: cn(
          buttonVariants({ variant: 'outline' }),
          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-y-1',
        head_row: 'flex',
        head_cell: 'text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]',
        row: 'flex w-full mt-2',
        cell: cn(
          'relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md',
          props.mode === 'range'
            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'
            : '[&:has([aria-selected])]:rounded-md'
        ),
        day: cn(
          buttonVariants({ variant: 'ghost' }),
          'h-8 w-8 p-0 font-normal aria-selected:opacity-100'
        ),
        day_range_start: 'day-range-start',
        day_range_end: 'day-range-end',
        day_selected:
          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',
        day_today: 'bg-accent text-accent-foreground',
        day_outside:
          'day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground',
        day_disabled: 'text-muted-foreground opacity-50',
        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',
        day_hidden: 'invisible',
        ...classNames
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />
      }}
      {...props}
    />
  )
}
Calendar.displayName = 'Calendar'

export { Calendar }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/breadcrumb.tsx`:

```tsx
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { ChevronRight, MoreHorizontal } from 'lucide-react'

import { cn } from '../../lib/utils'

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<'nav'> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = 'Breadcrumb'

const BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<'ol'>>(
  ({ className, ...props }, ref) => (
    <ol
      ref={ref}
      className={cn(
        'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',
        className
      )}
      {...props}
    />
  )
)
BreadcrumbList.displayName = 'BreadcrumbList'

const BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<'li'>>(
  ({ className, ...props }, ref) => (
    <li ref={ref} className={cn('inline-flex items-center gap-1.5', className)} {...props} />
  )
)
BreadcrumbItem.displayName = 'BreadcrumbItem'

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<'a'> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a'

  return (
    <Comp
      ref={ref}
      className={cn('transition-colors hover:text-foreground', className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = 'BreadcrumbLink'

const BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<'span'>>(
  ({ className, ...props }, ref) => (
    <span
      ref={ref}
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn('font-normal text-foreground', className)}
      {...props}
    />
  )
)
BreadcrumbPage.displayName = 'BreadcrumbPage'

const BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<'li'>) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn('[&>svg]:w-3.5 [&>svg]:h-3.5', className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = 'BreadcrumbSeparator'

const BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn('flex h-9 w-9 items-center justify-center', className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis'

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/radio-group.tsx`:

```tsx
import * as React from 'react'
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group'
import { Circle } from 'lucide-react'

import { cn } from '@renderer/lib/utils'

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn('grid gap-2', className)} {...props} ref={ref} />
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        'aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/command.tsx`:

```tsx
import * as React from 'react'
import { type DialogProps } from '@radix-ui/react-dialog'
import { Command as CommandPrimitive } from 'cmdk'
import { Search } from 'lucide-react'

import { cn } from '@renderer/lib/utils'
import { Dialog, DialogContent } from '@renderer/components/ui/dialog'

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  // eslint-disable-next-line react/no-unknown-property
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 h-px bg-border', className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
      {...props}
    />
  )
}
CommandShortcut.displayName = 'CommandShortcut'

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/toggle-group.tsx`:

```tsx
import * as React from 'react'
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'
import { type VariantProps } from 'class-variance-authority'

import { cn } from '@renderer/lib/utils'
import { toggleVariants } from '@renderer/components/ui/toggle'

const ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({
  size: 'default',
  variant: 'default'
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn('flex items-center justify-center gap-1', className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/avatar.tsx`:

```tsx
'use client'

import * as React from 'react'
import * as AvatarPrimitive from '@radix-ui/react-avatar'

import { cn } from '../../lib/utils'

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/menubar.tsx`:

```tsx
import * as React from 'react'
import * as MenubarPrimitive from '@radix-ui/react-menubar'
import { Check, ChevronRight, Circle } from 'lucide-react'

import { cn } from '@renderer/lib/utils'

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      'flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm',
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(({ className, align = 'start', alignOffset = -4, sideOffset = 8, ...props }, ref) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </MenubarPrimitive.Portal>
))
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
      {...props}
    />
  )
}
MenubarShortcut.displayname = 'MenubarShortcut'

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/dialog.tsx`:

```tsx
import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'

import { cn } from '../../lib/utils'

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)} {...props} />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
    {...props}
  />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold leading-none tracking-tight', className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/badge.tsx`:

```tsx
import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '../../lib/utils'

const badgeVariants = cva(
  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default: 'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',
        outline: 'text-foreground'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/sidebar.tsx`:

```tsx
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { VariantProps, cva } from 'class-variance-authority'
import { PanelLeft } from 'lucide-react'

import { cn } from '../../lib/utils'
import { Button } from './button'
import { Input } from './input'
import { Separator } from './separator'
import { Sheet, SheetContent } from './sheet'
import { Skeleton } from './skeleton'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from './tooltip'
import { useIsMobile } from '../../hooks/use-mobile'

const SIDEBAR_COOKIE_NAME = 'sidebar:state'
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = '16rem'
const SIDEBAR_WIDTH_MOBILE = '18rem'
const SIDEBAR_WIDTH_ICON = '3rem'
const SIDEBAR_KEYBOARD_SHORTCUT = 'b'

type SidebarContext = {
  state: 'expanded' | 'collapsed'
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error('useSidebar must be used within a SidebarProvider.')
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === 'function' ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener('keydown', handleKeyDown)
      return () => window.removeEventListener('keydown', handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? 'expanded' : 'collapsed'

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                '--sidebar-width': SIDEBAR_WIDTH,
                '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
                ...style
              } as React.CSSProperties
            }
            className={cn(
              'group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar',
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = 'SidebarProvider'

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    side?: 'left' | 'right'
    variant?: 'sidebar' | 'floating' | 'inset'
    collapsible?: 'offcanvas' | 'icon' | 'none'
  }
>(
  (
    {
      side = 'left',
      variant = 'sidebar',
      collapsible = 'offcanvas',
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === 'none') {
      return (
        <div
          className={cn(
            'flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground',
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                '--sidebar-width': SIDEBAR_WIDTH_MOBILE
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === 'collapsed' ? collapsible : ''}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',
            'group-data-[collapsible=offcanvas]:w-0',
            'group-data-[side=right]:rotate-180',
            variant === 'floating' || variant === 'inset'
              ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'
              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]'
          )}
        />
        <div
          className={cn(
            'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',
            side === 'left'
              ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
              : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
            // Adjust the padding for floating and inset variants.
            variant === 'floating' || variant === 'inset'
              ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'
              : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = 'Sidebar'

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            ref={ref}
            data-sidebar="trigger"
            variant="ghost"
            size="icon"
            className={cn('h-7 w-7', className)}
            onClick={(event) => {
              onClick?.(event)
              toggleSidebar()
            }}
            {...props}
          >
            <PanelLeft />
            <span className="sr-only">Toggle Sidebar</span>
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>`Ctrl+b` or `⌘ + b` to toggle sidebar</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
})
SidebarTrigger.displayName = 'SidebarTrigger'

const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<'button'>>(
  ({ className, ...props }, ref) => {
    const { toggleSidebar } = useSidebar()

    return (
      <button
        ref={ref}
        data-sidebar="rail"
        aria-label="Toggle Sidebar"
        tabIndex={-1}
        onClick={toggleSidebar}
        title="Toggle Sidebar"
        className={cn(
          'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',
          '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',
          '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
          'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',
          '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
          '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
          className
        )}
        {...props}
      />
    )
  }
)
SidebarRail.displayName = 'SidebarRail'

const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<'main'>>(
  ({ className, ...props }, ref) => {
    return (
      <main
        ref={ref}
        className={cn(
          'relative flex min-h-svh flex-1 flex-col bg-background',
          'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',
          className
        )}
        {...props}
      />
    )
  }
)
SidebarInset.displayName = 'SidebarInset'

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = 'SidebarInput'

const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        data-sidebar="header"
        className={cn('flex flex-col gap-2 p-2', className)}
        {...props}
      />
    )
  }
)
SidebarHeader.displayName = 'SidebarHeader'

const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        data-sidebar="footer"
        className={cn('flex flex-col gap-2 p-2', className)}
        {...props}
      />
    )
  }
)
SidebarFooter.displayName = 'SidebarFooter'

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn('mx-2 w-auto bg-sidebar-border', className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = 'SidebarSeparator'

const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        data-sidebar="content"
        className={cn(
          'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
          className
        )}
        {...props}
      />
    )
  }
)
SidebarContent.displayName = 'SidebarContent'

const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        data-sidebar="group"
        className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
        {...props}
      />
    )
  }
)
SidebarGroup.displayName = 'SidebarGroup'

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'div'

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = 'SidebarGroupLabel'

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<'button'> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'button'

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 after:md:hidden',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = 'SidebarGroupAction'

const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-sidebar="group-content"
      className={cn('w-full text-sm', className)}
      {...props}
    />
  )
)
SidebarGroupContent.displayName = 'SidebarGroupContent'

const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
  ({ className, ...props }, ref) => (
    <ul
      ref={ref}
      data-sidebar="menu"
      className={cn('flex w-full min-w-0 flex-col gap-1', className)}
      {...props}
    />
  )
)
SidebarMenu.displayName = 'SidebarMenu'

const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
  ({ className, ...props }, ref) => (
    <li
      ref={ref}
      data-sidebar="menu-item"
      className={cn('group/menu-item relative', className)}
      {...props}
    />
  )
)
SidebarMenuItem.displayName = 'SidebarMenuItem'

const sidebarMenuButtonVariants = cva(
  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
        outline:
          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]'
      },
      size: {
        default: 'h-8 text-sm',
        sm: 'h-7 text-xs',
        lg: 'h-12 text-sm group-data-[collapsible=icon]:!p-0'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<'button'> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = 'default',
      size = 'default',
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : 'button'
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === 'string') {
      tooltip = {
        children: tooltip
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== 'collapsed' || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = 'SidebarMenuButton'

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<'button'> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : 'button'

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 after:md:hidden',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        showOnHover &&
          'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = 'SidebarMenuAction'

const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<'div'>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-sidebar="menu-badge"
      className={cn(
        'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',
        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
)
SidebarMenuBadge.displayName = 'SidebarMenuBadge'

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<'div'> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn('rounded-md h-8 flex gap-2 px-2 items-center', className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            '--skeleton-width': width
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = 'SidebarMenuSkeleton'

const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(
  ({ className, ...props }, ref) => (
    <ul
      ref={ref}
      data-sidebar="menu-sub"
      className={cn(
        'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
)
SidebarMenuSub.displayName = 'SidebarMenuSub'

const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(
  ({ ...props }, ref) => <li ref={ref} {...props} />
)
SidebarMenuSubItem.displayName = 'SidebarMenuSubItem'

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<'a'> & {
    asChild?: boolean
    size?: 'sm' | 'md'
    isActive?: boolean
  }
>(({ asChild = false, size = 'md', isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : 'a'

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',
        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
        size === 'sm' && 'text-xs',
        size === 'md' && 'text-sm',
        'group-data-[collapsible=icon]:hidden',
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = 'SidebarMenuSubButton'

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/table.tsx`:

```tsx
import * as React from 'react'

import { cn } from '../../lib/utils'

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({ className, ...props }, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn('w-full caption-bottom text-sm', className)} {...props} />
    </div>
  )
)
Table.displayName = 'Table'

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />
))
TableHeader.displayName = 'TableHeader'

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
))
TableBody.displayName = 'TableBody'

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}
    {...props}
  />
))
TableFooter.displayName = 'TableFooter'

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  ({ className, ...props }, ref) => (
    <tr
      ref={ref}
      className={cn(
        'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
        className
      )}
      {...props}
    />
  )
)
TableRow.displayName = 'TableRow'

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
      className
    )}
    {...props}
  />
))
TableHead.displayName = 'TableHead'

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      'p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
      className
    )}
    {...props}
  />
))
TableCell.displayName = 'TableCell'

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption ref={ref} className={cn('mt-4 text-sm text-muted-foreground', className)} {...props} />
))
TableCaption.displayName = 'TableCaption'

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/separator.tsx`:

```tsx
import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'

import { cn } from '../../lib/utils'

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = 'horizontal', decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      'shrink-0 bg-border',
      orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
      className
    )}
    {...props}
  />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/button.tsx`:

```tsx
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '../../lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
        outline:
          'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline'
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
  loading?: boolean // Add loading prop
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, loading = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(
          buttonVariants({ variant, size, className }),
          loading && 'cursor-not-allowed'
        )}
        ref={ref}
        disabled={loading || props.disabled} // Disable button if loading
        {...props}
      >
        {loading ? (
          <svg
            className="animate-spin h-4 w-4 text-current"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        ) : (
          props.children
        )}
      </Comp>
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/toggle.tsx`:

```tsx
import * as React from 'react'
import * as TogglePrimitive from '@radix-ui/react-toggle'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@renderer/lib/utils'

const toggleVariants = cva(
  'inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground'
      },
      size: {
        default: 'h-9 px-2 min-w-9',
        sm: 'h-8 px-1.5 min-w-8',
        lg: 'h-10 px-2.5 min-w-10'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/toast.tsx`:

```tsx
import * as React from 'react'
import * as ToastPrimitives from '@radix-ui/react-toast'
import { cva, type VariantProps } from 'class-variance-authority'
import { X } from 'lucide-react'

import { cn } from '../../lib/utils'

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold [&+div]:text-xs', className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/checkbox.tsx`:

```tsx
import * as React from 'react'
import * as CheckboxPrimitive from '@radix-ui/react-checkbox'
import { Check } from 'lucide-react'

import { cn } from '../../lib/utils'

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/collapsible.tsx`:

```tsx
import * as CollapsiblePrimitive from '@radix-ui/react-collapsible'

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/dropdown-menu.tsx`:

```tsx
import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'

import { cn } from '../../lib/utils'

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn('ml-auto text-xs tracking-widest opacity-60', className)} {...props} />
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/select.tsx`:

```tsx
import * as React from 'react'
import * as SelectPrimitive from '@radix-ui/react-select'
import { Check, ChevronDown, ChevronUp } from 'lucide-react'

import { cn } from '@renderer/lib/utils'

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn('flex cursor-default items-center justify-center py-1', className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn('flex cursor-default items-center justify-center py-1', className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/textarea.tsx`:

```tsx
import * as React from 'react'

import { cn } from '@renderer/lib/utils'

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = 'Textarea'

export { Textarea }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/input.tsx`:

```tsx
import * as React from 'react'

import { cn } from '../../lib/utils'

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<'input'>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = 'Input'

export { Input }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/skeleton.tsx`:

```tsx
import { cn } from '../../lib/utils'

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn('animate-pulse rounded-md bg-primary/10', className)} {...props} />
}

export { Skeleton }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/context-menu.tsx`:

```tsx
import * as React from 'react'
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'

import { cn } from '@renderer/lib/utils'

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold text-foreground', inset && 'pl-8', className)}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-border', className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest text-muted-foreground', className)}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = 'ContextMenuShortcut'

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/form.tsx`:

```tsx
import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { Slot } from '@radix-ui/react-slot'
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext
} from 'react-hook-form'

import { cn } from '@renderer/lib/utils'
import { Label } from '@renderer/components/ui/label'

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>')
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue)

const FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const id = React.useId()

    return (
      <FormItemContext.Provider value={{ id }}>
        <div ref={ref} className={cn('space-y-2', className)} {...props} />
      </FormItemContext.Provider>
    )
  }
)
FormItem.displayName = 'FormItem'

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && 'text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = 'FormLabel'

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = 'FormControl'

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn('text-[0.8rem] text-muted-foreground', className)}
      {...props}
    />
  )
})
FormDescription.displayName = 'FormDescription'

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn('text-[0.8rem] font-medium text-destructive', className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = 'FormMessage'

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/ui/carousel.tsx`:

```tsx
import * as React from 'react'
import useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'
import { ArrowLeft, ArrowRight } from 'lucide-react'

import { cn } from '@renderer/lib/utils'
import { Button } from '@renderer/components/ui/button'

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: 'horizontal' | 'vertical'
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />')
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === 'horizontal' ? 'x' : 'y'
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) {
      return
    }

    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === 'ArrowLeft') {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === 'ArrowRight') {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) {
      return
    }

    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) {
      return
    }

    onSelect(api)
    api.on('reInit', onSelect)
    api.on('select', onSelect)

    return () => {
      api?.off('select', onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext
      }}
    >
      <div
        ref={ref}
        onKeyDownCapture={handleKeyDown}
        className={cn('relative', className)}
        role="region"
        aria-roledescription="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
})
Carousel.displayName = 'Carousel'

const CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { carouselRef, orientation } = useCarousel()

    return (
      <div ref={carouselRef} className="overflow-hidden">
        <div
          ref={ref}
          className={cn(
            'flex',
            orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
            className
          )}
          {...props}
        />
      </div>
    )
  }
)
CarouselContent.displayName = 'CarouselContent'

const CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { orientation } = useCarousel()

    return (
      <div
        ref={ref}
        role="group"
        aria-roledescription="slide"
        className={cn(
          'min-w-0 shrink-0 grow-0 basis-full',
          orientation === 'horizontal' ? 'pl-4' : 'pt-4',
          className
        )}
        {...props}
      />
    )
  }
)
CarouselItem.displayName = 'CarouselItem'

const CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel()

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          'absolute  h-8 w-8 rounded-full',
          orientation === 'horizontal'
            ? '-left-12 top-1/2 -translate-y-1/2'
            : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
          className
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="h-4 w-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    )
  }
)
CarouselPrevious.displayName = 'CarouselPrevious'

const CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel()

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          'absolute h-8 w-8 rounded-full',
          orientation === 'horizontal'
            ? '-right-12 top-1/2 -translate-y-1/2'
            : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
          className
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="h-4 w-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    )
  }
)
CarouselNext.displayName = 'CarouselNext'

export { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/sidebar/index.tsx`:

```tsx
'use client'
import * as React from 'react'
import {
  BookOpen,
  Bot,
  // Command,
  // Frame,
  LifeBuoy,
  ListChecks,
  // Map,
  // PieChart,
  Send,
  ShieldCheck,
  SquareTerminal
} from 'lucide-react'

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem
} from '../../ui/sidebar'
import { NavMain } from './nav-main'
// import { NavProjects } from "./nav-projects"
import { NavSecondary } from './nav-secondary'
import { NavUser } from './nav-user'
import CustomLink from '../../ui/link'
import { useAuthStore } from '../../../stores/useAuthStore'

const data = {
  user: {
    name: 'Rosterly',
    email: 'resources@rosterly.io',
    avatar: '@/public/rosterly.png'
  },
  navMain: [
    {
      title: 'Log Analysis',
      url: 'log-analysis',
      icon: SquareTerminal,
      isActive: true,
      items: [
        {
          title: 'Explorer',
          url: 'explorer'
          // badge: "new",
        },
        {
          title: 'Analyze',
          url: 'analyze',
          badge: 'beta'
        },
        {
          title: 'Configure',
          url: 'configure',
          badge: 'soon'
        }
      ]
    },
    {
      title: 'Documentation',
      url: '#',
      icon: BookOpen,
      items: [
        {
          title: 'Introduction',
          url: '#',
          badge: 'soon'
        },
        {
          title: 'Get Started',
          url: '#',
          badge: 'soon'
        },
        {
          title: 'Tutorials',
          url: '#',
          badge: 'soon'
        },
        {
          title: 'Changelog',
          url: '#',
          badge: 'soon'
        }
      ]
    },
    {
      title: 'Code Analysis',
      url: '#',
      icon: Bot,
      items: [
        {
          title: 'Genesis',
          url: '#',
          badge: 'soon'
        },
        {
          title: 'Explorer',
          url: '#',
          badge: 'soon'
        },
        {
          title: 'Quantum',
          url: '#',
          badge: 'soon'
        }
      ]
    },
    {
      title: 'Unit Testing',
      url: '#',
      icon: ListChecks
      // items: [
      //     {
      //         title: "General",
      //         url: "#",
      //     },
      //     {
      //         title: "Team",
      //         url: "#",
      //     },
      //     {
      //         title: "Billing",
      //         url: "#",
      //     },
      //     {
      //         title: "Limits",
      //         url: "#",
      //     },
      // ],
    },
    {
      title: 'Security and Vulnerabilities',
      url: '#',
      icon: ShieldCheck
      // items: [
      //     {
      //         title: "General",
      //         url: "#",
      //     },
      //     {
      //         title: "Team",
      //         url: "#",
      //     },
      //     {
      //         title: "Billing",
      //         url: "#",
      //     },
      //     {
      //         title: "Limits",
      //         url: "#",
      //     },
      // ],
    }
  ],
  navSecondary: [
    {
      title: 'Support',
      url: '#',
      icon: LifeBuoy
    },
    {
      title: 'Feedback',
      url: '#',
      icon: Send
    }
  ]
  // projects: [
  //     {
  //         name: "Design Engineering",
  //         url: "#",
  //         icon: Frame,
  //     },
  //     {
  //         name: "Sales & Marketing",
  //         url: "#",
  //         icon: PieChart,
  //     },
  //     {
  //         name: "Travel",
  //         url: "#",
  //         icon: Map,
  //     },
  // ],
}

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  const { organization } = useAuthStore() // Zustand state for auth
  return (
    <Sidebar variant="inset" {...props}>
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton size="lg" asChild>
              <CustomLink to={`/${organization}/projects/`}>
                <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                  <img src="/rosterly.png" alt="" className="rounded-sm" />
                </div>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">Rosterly.io</span>
                  <span className="truncate text-xs">Enterprise</span>
                </div>
              </CustomLink>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={data.navMain} />
        {/* <NavProjects projects={data.projects} /> */}
        <NavSecondary items={data.navSecondary} className="mt-auto" />
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={data.user} />
      </SidebarFooter>
    </Sidebar>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/sidebar/nav-main.tsx`:

```tsx
import { ChevronRight, type LucideIcon } from 'lucide-react'
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '../../ui/collapsible'
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem
} from '../../ui/sidebar'
import { Badge } from '../../ui/badge'
import { useNavigate, useParams } from 'react-router-dom'
import { useAuthStore } from '../../../stores/useAuthStore'

export function NavMain({
  items
}: {
  items: {
    title: string
    url: string
    icon: LucideIcon
    isActive?: boolean
    items?: {
      title: string
      url: string
      badge?: string
    }[]
  }[]
}) {
  const navigate = useNavigate()
  const { organization } = useAuthStore()
  const { project_id } = useParams()
  return (
    <SidebarGroup>
      <SidebarGroupLabel>Platform</SidebarGroupLabel>
      <SidebarMenu className="cursor-default">
        {items.map((item) => (
          <Collapsible key={item.title} asChild defaultOpen={item.isActive}>
            <SidebarMenuItem>
              <SidebarMenuButton
                asChild
                tooltip={item.title}
                onClick={() =>
                  navigate(
                    `/${organization}/projects/${project_id}/${item.url}/${item.items?.length ? item.items[0].url : ''}`
                  )
                }
              >
                <div>
                  <item.icon />
                  <span>{item.title}</span>
                </div>
              </SidebarMenuButton>
              {item.items?.length ? (
                <>
                  <CollapsibleTrigger asChild>
                    <SidebarMenuAction className="data-[state=open]:rotate-90">
                      <ChevronRight />
                      <span className="sr-only">Toggle</span>
                    </SidebarMenuAction>
                  </CollapsibleTrigger>
                  <CollapsibleContent>
                    <SidebarMenuSub>
                      {item.items?.map((subItem) => (
                        <SidebarMenuSubItem key={subItem.title}>
                          <SidebarMenuSubButton asChild>
                            <div
                              className="ml-1 flex justify-between items-center gap-2"
                              onClick={() =>
                                navigate(
                                  `/${organization}/projects/${project_id}/${item.url}/${subItem.url}`
                                )
                              }
                            >
                              <span>
                                <span>{subItem.title}</span>
                              </span>
                              {subItem.badge && (
                                <Badge
                                  variant={
                                    subItem.badge === 'new'
                                      ? 'default'
                                      : subItem.badge === 'beta'
                                        ? 'secondary'
                                        : 'outline'
                                  }
                                >
                                  {subItem.badge}
                                </Badge>
                              )}
                            </div>
                          </SidebarMenuSubButton>
                        </SidebarMenuSubItem>
                      ))}
                    </SidebarMenuSub>
                  </CollapsibleContent>
                </>
              ) : null}
            </SidebarMenuItem>
          </Collapsible>
        ))}
      </SidebarMenu>
    </SidebarGroup>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/sidebar/nav-user.tsx`:

```tsx
import { BadgeCheck, Bell, ChevronsUpDown, CreditCard, LogOut, Sparkles } from 'lucide-react'
import { Avatar, AvatarFallback, AvatarImage } from '../../ui/avatar'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '../../ui/dropdown-menu'
import { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '../../ui/sidebar'
import { useNavigate } from 'react-router-dom'
import { handleLogout } from '../../../services/api/handle-logout'
export function NavUser({
  user
}: {
  user: {
    name: string
    email: string
    avatar: string
  }
}) {
  const { isMobile } = useSidebar()
  const navigate = useNavigate()
  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">RO</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            side={isMobile ? 'bottom' : 'right'}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CD</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => handleLogout(navigate)}>
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/sidebar/nav-secondary.tsx`:

```tsx
import * as React from 'react'
import { type LucideIcon } from 'lucide-react'
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem
} from '../../ui/sidebar'
export function NavSecondary({
  items,
  ...props
}: {
  items: {
    title: string
    url: string
    icon: LucideIcon
  }[]
} & React.ComponentPropsWithoutRef<typeof SidebarGroup>) {
  return (
    <SidebarGroup {...props}>
      <SidebarGroupContent>
        <SidebarMenu>
          {items.map((item) => (
            <SidebarMenuItem key={item.title}>
              <SidebarMenuButton asChild size="sm">
                <a href={item.url}>
                  <item.icon />
                  <span>{item.title}</span>
                </a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/sidebar/nav-projects.tsx`:

```tsx
'use client'
import { Folder, MoreHorizontal, Share, Trash2, type LucideIcon } from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '../../ui/dropdown-menu'
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar
} from '../../ui/sidebar'
export function NavProjects({
  projects
}: {
  projects: {
    name: string
    url: string
    icon: LucideIcon
  }[]
}) {
  const { isMobile } = useSidebar()
  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarMenu>
        {projects.map((item) => (
          <SidebarMenuItem key={item.name}>
            <SidebarMenuButton asChild>
              <a href={item.url}>
                <item.icon />
                <span>{item.name}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-48"
                side={isMobile ? 'bottom' : 'right'}
                align={isMobile ? 'end' : 'start'}
              >
                <DropdownMenuItem>
                  <Folder className="text-muted-foreground" />
                  <span>View Project</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Share className="text-muted-foreground" />
                  <span>Share Project</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className="text-muted-foreground" />
                  <span>Delete Project</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton>
            <MoreHorizontal />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/terminal/index.tsx`:

```tsx
import React, { useEffect, useRef } from 'react'
import { Terminal } from '@xterm/xterm'
import '@xterm/xterm/css/xterm.css'

type Props = {
  projectId: string | null
}

const XTerminal: React.FC<Props> = ({ projectId }) => {
  const terminalRef = useRef<HTMLDivElement>(null)
  const socketRef = useRef<WebSocket | null>(null)
  const commandBuffer = useRef<string>('') // Buffer to store the user's input

  useEffect(() => {
    const term = new Terminal({
      // cols: 80,
      // rows: 24,
      cursorBlink: true, // Makes the terminal cursor blink
      theme: {
        background: '#000000', // Background color
        foreground: 'gray', // Text color
        cursor: '#FFFFFF' // Cursor color
      }
    })
    const socket = new WebSocket('ws://localhost:6969/ws')
    socketRef.current = socket
    // Open the terminal in the referenced div
    term.open(terminalRef.current as HTMLDivElement)

    // Handle WebSocket events
    socket.onopen = () => {
      term.write('Connected to cadmium terminal.\r\nbash-$ ')
      console.log('WebSocket connection opened')
    }

    socket.onmessage = (event) => {
      // Write data received from the server to the terminal
      term.write(event.data)
    }

    socket.onerror = (error) => {
      term.write('\r\nError connecting to backend server.\r\n')
      console.error('WebSocket error:', error)
    }

    socket.onclose = () => {
      term.write('\r\nConnection closed by the server.\r\n')
      console.log('WebSocket connection closed')
    }

    // Listen for user input and handle commands on Enter key
    term.onData((input) => {
      if (input === '\r') {
        // User pressed Enter, send the command to the backend
        const command = commandBuffer.current.trim()
        if (command && socket.readyState === WebSocket.OPEN) {
          socket.send(JSON.stringify({ type: 'command', command, projectId }))
          term.write(`\r\n`) // Move to the next line
        } else if (!command) {
          term.write('\r\n') // Just move to the next line for empty input
        }
        commandBuffer.current = '' // Clear the buffer after sending
      } else if (input === '\u007F') {
        // Handle backspace
        if (commandBuffer.current.length > 0) {
          commandBuffer.current = commandBuffer.current.slice(0, -1)
          term.write('\b \b') // Move the cursor back, clear the character, move back again
        }
      } else {
        // Add input to the command buffer and display it on the terminal
        commandBuffer.current += input
        term.write(input)
      }
    })

    // Cleanup on unmount
    return () => {
      socket.close()
      term.dispose()
    }
  }, [])

  return <div ref={terminalRef} style={{ textAlign: 'left', width: '100%', height: '100%' }}></div>
}

export default XTerminal

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/theme/theme-toggle.tsx`:

```tsx
import { Moon, Sun } from 'lucide-react'

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from '../../ui/dropdown-menu'
import { Button } from '../../ui/button'
import { useTheme } from '../../../provider/theme-provider'

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/global/last-reload.tsx`:

```tsx
import { RefreshCcwIcon } from 'lucide-react'
import React, { useEffect, useState } from 'react'

const ReloadWithTimestamp: React.FC = () => {
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date())
  const [timeAgo, setTimeAgo] = useState<string>('A few seconds ago')

  // Function to calculate time ago
  const calculateTimeAgo = (date: Date) => {
    const now = new Date()
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)

    if (diffInSeconds < 60) {
      return 'A few seconds ago'
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60)
      return `${minutes} minute${minutes === 1 ? '' : 's'} ago`
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600)
      return `${hours} hour${hours === 1 ? '' : 's'} ago`
    } else {
      const days = Math.floor(diffInSeconds / 86400)
      return `${days} day${days === 1 ? '' : 's'} ago`
    }
  }

  // Update the time ago periodically
  useEffect(() => {
    const interval = setInterval(() => {
      setTimeAgo(calculateTimeAgo(lastUpdated))
    }, 10000) // Check every 10 seconds instead of every second

    return () => clearInterval(interval) // Cleanup interval on unmount
  }, [lastUpdated])

  // Handle reload
  const handleReload = () => {
    setLastUpdated(new Date()) // Update last updated time
    setTimeAgo('A few seconds ago') // Reset the text immediately
    window.location.reload() // Reload the page
  }

  return (
    <div className="flex items-center space-x-4 px-2">
      <span className="text-sm text-muted-foreground">Last updated: {timeAgo}</span>
      <RefreshCcwIcon onClick={handleReload} className="cursor-pointer W-4 h-4" />
    </div>
  )
}

export default ReloadWithTimestamp

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/global/footer.tsx`:

```tsx
import { Bell, Rocket, SquareTerminal } from 'lucide-react'

export default function Footer() {
  return (
    <footer className="flex w-full shrink-0 flex-row items-center justify-end gap-2 h-[4vh] pr-10">
      <nav className="flex justify-center ">
        <span className="inline-flex gap-1 items-center justify-center rounded-md px-4 text-sm font-medium text-blue-600 hover:text-blue-700 cursor-pointer transition-colors ">
          <Rocket className="w-4 h-4 fill-github" />
          Updates
        </span>
        <span className="inline-flex gap-1 items-center justify-center rounded-md px-4 text-sm font-medium hover:text-primary/70 cursor-pointer transition-colors ">
          <SquareTerminal className="w-4 h-4 fill-github" />
          Terminal
        </span>
      </nav>
      <div className="flex   justify-center">
        <span className="inline-flex  items-center  hover:scale-125 hover:rotate-12 transition-transform">
          <span className="sr-only">YouTube</span>
          <Bell className="w-4 h-4" />
        </span>
      </div>
    </footer>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/global/code-block.tsx`:

```tsx
import SyntaxHighlighter from 'react-syntax-highlighter'
import * as themes from 'react-syntax-highlighter/dist/esm/styles/hljs'
const CodeBlock = ({ codeString, language }: { codeString: string; language: string }) => {
  return (
    <SyntaxHighlighter
      language={language}
      style={themes['atomOneDark']}
      wrapLongLines
      // showLineNumbers
      // showInlineLineNumbers
      startingLineNumber={5}
      customStyle={{
        margin: 0,
        padding: 10,
        background: 'none',
        borderRadius: 5,
        fontSize: 11,
        backgroundColor: 'black'
      }}
    >
      {codeString}
    </SyntaxHighlighter>
  )
}

export default CodeBlock

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/global/refresh.tsx`:

```tsx
import React from 'react'
import { RefreshCw } from 'lucide-react' // Import the refresh icon

const RefreshButton: React.FC = () => {
  const handleRefresh = () => {
    window.location.reload()
  }

  return (
    <button
      onClick={handleRefresh}
      className="fixed bottom-4 right-4 z-50 p-1 bg-primary text-primary-foreground rounded-full shadow-lg hover:bg-primary/80 transition-all"
      aria-label="Refresh"
    >
      <RefreshCw className="h-4 w-4" />
    </button>
  )
}

export default RefreshButton

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/navbars/login-navbar.tsx`:

```tsx
import React from 'react'
import { Button } from '../../ui/button'
import { Image } from 'lucide-react'
import { ThemeToggle } from '../theme/theme-toggle'

const LoginNavbar: React.FC = () => {
  return (
    // <nav className="fixed top-0 z-10 w-full h-[7vh] px-4 flex items-center justify-between bg-background ">
    <nav className=" h-[7vh] px-4 flex items-center justify-between bg-background ">
      <div>
        <Image width={20} height={20} />
      </div>
      <div className="flex items-center gap-2">
        <Button variant={'ghost'} className="">
          Explore more
        </Button>
        <ThemeToggle />
      </div>
    </nav>
  )
}

export default LoginNavbar

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/components/custom/navbars/projects-page-navbar.tsx`:

```tsx
import React from 'react'
import { Image, LogOut } from 'lucide-react'
import { ThemeToggle } from '../theme/theme-toggle'
import { useNavigate } from 'react-router-dom'
import { Button } from '../../ui/button'
import { handleLogout } from '../../../services/api/handle-logout'

const ProjectPageNavbar: React.FC = () => {
  const navigate = useNavigate()
  return (
    // <nav className="fixed top-0 z-10 w-full h-[7vh] px-4 flex items-center justify-between bg-background ">
    <nav className=" h-[7vh] px-4 flex items-center justify-between bg-background ">
      <div>
        <Image width={20} height={20} />
      </div>
      <div className="flex items-center gap-2">
        <Button variant={'ghost'} className="" onClick={() => handleLogout(navigate)}>
          <LogOut className="mr-2 h-4 w-4" />
          Logout
        </Button>
        <ThemeToggle />
      </div>
    </nav>
  )
}

export default ProjectPageNavbar

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/hooks/use-mobile.tsx`:

```tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/hooks/use-toast.ts`:

```ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/lib/utils.ts`:

```ts
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]): string {
  return twMerge(clsx(inputs))
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/lib/getApiEndpoint.ts`:

```ts
/**
 * Extracts the API endpoint from the given URL.
 * @example
 * const url = "https://example.azurewebsites.net/api/invoice/invoices/?search=&page=1&status=&invoice_date=&due_date=&customer_name=&employee_name=&invoice_number=";
 * const apiEndpoint = getApiEndpoint(url);
 * console.log(apiEndpoint); // Output: /api/invoice/invoices
 * @param {string} url - A URL that may contain query parameters.
 * @returns {string} The API endpoint without query parameters.
 */
export function getApiEndpoint(url: string): string {
  try {
    const parsedUrl = new URL(url)
    return parsedUrl.pathname
  } catch (error) {
    console.error('Invalid URL:', error)
    return ''
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/lib/ellipsis.ts`:

```ts
/**
 * Truncates a string based on specified start and end character counts.
 * Truncates only if the sum of start characters, end characters, and ellipsis
 * is less than the total string length.
 *
 * @param text - The input string to truncate.
 * @param startChar - Number of characters to keep from the start.
 * @param endChar - Number of characters to keep from the end.
 * @returns The truncated string or the original string if no truncation is needed.
 */
export default function addEllipsis(
  text: string | null | undefined,
  startChar: number,
  endChar: number
): string {
  // Handle null or undefined inputs
  if (text == null) {
    return ''
  }

  // Validate input arguments
  if (
    typeof startChar !== 'number' ||
    startChar < 0 ||
    typeof endChar !== 'number' ||
    endChar < 0
  ) {
    throw new Error('Start and end character counts must be non-negative numbers.')
  }

  // Calculate total characters including ellipsis
  const ellipsisLength = 3
  const totalReservedChars = startChar + endChar + ellipsisLength

  // If text length is less than or equal to total reserved characters, return original text
  if (text.length <= totalReservedChars) {
    return text
  }

  // Truncate the string
  return text.slice(0, startChar) + '...' + text.slice(-endChar)
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/assets/main.css`:

```css
@import './base.css';

body {
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  background-image: url('./wavy-lines.svg');
  background-size: cover;
  user-select: none;
}

code {
  font-weight: 600;
  padding: 3px 5px;
  border-radius: 2px;
  background-color: var(--color-background-mute);
  font-family:
    ui-monospace,
    SFMono-Regular,
    SF Mono,
    Menlo,
    Consolas,
    Liberation Mono,
    monospace;
  font-size: 85%;
}

#root {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  margin-bottom: 80px;
}

.logo {
  margin-bottom: 20px;
  -webkit-user-drag: none;
  height: 128px;
  width: 128px;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 1.2em #6988e6aa);
}

.creator {
  font-size: 14px;
  line-height: 16px;
  color: var(--ev-c-text-2);
  font-weight: 600;
  margin-bottom: 10px;
}

.text {
  font-size: 28px;
  color: var(--ev-c-text-1);
  font-weight: 700;
  line-height: 32px;
  text-align: center;
  margin: 0 10px;
  padding: 16px 0;
}

.tip {
  font-size: 16px;
  line-height: 24px;
  color: var(--ev-c-text-2);
  font-weight: 600;
}

.react {
  background: -webkit-linear-gradient(315deg, #087ea4 55%, #7c93ee);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
}

.ts {
  background: -webkit-linear-gradient(315deg, #3178c6 45%, #f0dc4e);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-weight: 700;
}

.actions {
  display: flex;
  padding-top: 32px;
  margin: -6px;
  flex-wrap: wrap;
  justify-content: flex-start;
}

.action {
  flex-shrink: 0;
  padding: 6px;
}

.action a {
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  border: 1px solid transparent;
  text-align: center;
  font-weight: 600;
  white-space: nowrap;
  border-radius: 20px;
  padding: 0 20px;
  line-height: 38px;
  font-size: 14px;
  border-color: var(--ev-button-alt-border);
  color: var(--ev-button-alt-text);
  background-color: var(--ev-button-alt-bg);
}

.action a:hover {
  border-color: var(--ev-button-alt-hover-border);
  color: var(--ev-button-alt-hover-text);
  background-color: var(--ev-button-alt-hover-bg);
}

.versions {
  position: absolute;
  bottom: 30px;
  margin: 0 auto;
  padding: 15px 0;
  font-family: 'Menlo', 'Lucida Console', monospace;
  display: inline-flex;
  overflow: hidden;
  align-items: center;
  border-radius: 22px;
  background-color: #202127;
  backdrop-filter: blur(24px);
}

.versions li {
  display: block;
  float: left;
  border-right: 1px solid var(--ev-c-gray-1);
  padding: 0 20px;
  font-size: 14px;
  line-height: 14px;
  opacity: 0.8;
  &:last-child {
    border: none;
  }
}

@media (max-width: 720px) {
  .text {
    font-size: 20px;
  }
}

@media (max-width: 620px) {
  .versions {
    display: none;
  }
}

@media (max-width: 350px) {
  .tip,
  .actions {
    display: none;
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/assets/electron.svg`:

```svg
<svg viewBox="0 0 128 128" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="64" cy="64" r="64" fill="#2F3242"/>
  <ellipse cx="63.9835" cy="23.2036" rx="4.48794" ry="4.495" stroke="#A2ECFB" stroke-width="3.6" stroke-linecap="round"/>
  <path d="M51.3954 39.5028C52.3733 39.6812 53.3108 39.033 53.4892 38.055C53.6676 37.0771 53.0194 36.1396 52.0414 35.9612L51.3954 39.5028ZM28.6153 43.5751L30.1748 44.4741L30.1748 44.4741L28.6153 43.5751ZM28.9393 60.9358C29.4332 61.7985 30.5329 62.0976 31.3957 61.6037C32.2585 61.1098 32.5575 60.0101 32.0636 59.1473L28.9393 60.9358ZM37.6935 66.7457C37.025 66.01 35.8866 65.9554 35.1508 66.6239C34.415 67.2924 34.3605 68.4308 35.029 69.1666L37.6935 66.7457ZM53.7489 81.7014L52.8478 83.2597L53.7489 81.7014ZM96.9206 89.515C97.7416 88.9544 97.9526 87.8344 97.3919 87.0135C96.8313 86.1925 95.7113 85.9815 94.8904 86.5422L96.9206 89.515ZM52.0414 35.9612C46.4712 34.9451 41.2848 34.8966 36.9738 35.9376C32.6548 36.9806 29.0841 39.1576 27.0559 42.6762L30.1748 44.4741C31.5693 42.0549 34.1448 40.3243 37.8188 39.4371C41.5009 38.5479 46.1547 38.5468 51.3954 39.5028L52.0414 35.9612ZM27.0559 42.6762C24.043 47.9029 25.2781 54.5399 28.9393 60.9358L32.0636 59.1473C28.6579 53.1977 28.1088 48.0581 30.1748 44.4741L27.0559 42.6762ZM35.029 69.1666C39.6385 74.24 45.7158 79.1355 52.8478 83.2597L54.6499 80.1432C47.8081 76.1868 42.0298 71.5185 37.6935 66.7457L35.029 69.1666ZM52.8478 83.2597C61.344 88.1726 70.0465 91.2445 77.7351 92.3608C85.359 93.4677 92.2744 92.6881 96.9206 89.515L94.8904 86.5422C91.3255 88.9767 85.4902 89.849 78.2524 88.7982C71.0793 87.7567 62.809 84.8612 54.6499 80.1432L52.8478 83.2597ZM105.359 84.9077C105.359 81.4337 102.546 78.6127 99.071 78.6127V82.2127C100.553 82.2127 101.759 83.4166 101.759 84.9077H105.359ZM99.071 78.6127C95.5956 78.6127 92.7831 81.4337 92.7831 84.9077H96.3831C96.3831 83.4166 97.5892 82.2127 99.071 82.2127V78.6127ZM92.7831 84.9077C92.7831 88.3817 95.5956 91.2027 99.071 91.2027V87.6027C97.5892 87.6027 96.3831 86.3988 96.3831 84.9077H92.7831ZM99.071 91.2027C102.546 91.2027 105.359 88.3817 105.359 84.9077H101.759C101.759 86.3988 100.553 87.6027 99.071 87.6027V91.2027Z" fill="#A2ECFB"/>
  <path d="M91.4873 65.382C90.8456 66.1412 90.9409 67.2769 91.7002 67.9186C92.4594 68.5603 93.5951 68.465 94.2368 67.7058L91.4873 65.382ZM99.3169 43.6354L97.7574 44.5344L99.3169 43.6354ZM84.507 35.2412C83.513 35.2282 82.6967 36.0236 82.6838 37.0176C82.6708 38.0116 83.4661 38.8279 84.4602 38.8409L84.507 35.2412ZM74.9407 39.8801C75.9127 39.6716 76.5315 38.7145 76.323 37.7425C76.1144 36.7706 75.1573 36.1517 74.1854 36.3603L74.9407 39.8801ZM53.7836 46.3728L54.6847 47.931L53.7836 46.3728ZM25.5491 80.9047C25.6932 81.8883 26.6074 82.5688 27.5911 82.4247C28.5747 82.2806 29.2552 81.3664 29.1111 80.3828L25.5491 80.9047ZM94.2368 67.7058C97.8838 63.3907 100.505 58.927 101.752 54.678C103.001 50.4213 102.9 46.2472 100.876 42.7365L97.7574 44.5344C99.1494 46.9491 99.3603 50.0419 98.2974 53.6644C97.2323 57.2945 94.9184 61.3223 91.4873 65.382L94.2368 67.7058ZM100.876 42.7365C97.9119 37.5938 91.7082 35.335 84.507 35.2412L84.4602 38.8409C91.1328 38.9278 95.7262 41.0106 97.7574 44.5344L100.876 42.7365ZM74.1854 36.3603C67.4362 37.8086 60.0878 40.648 52.8826 44.8146L54.6847 47.931C61.5972 43.9338 68.5948 41.2419 74.9407 39.8801L74.1854 36.3603ZM52.8826 44.8146C44.1366 49.872 36.9669 56.0954 32.1491 62.3927C27.3774 68.63 24.7148 75.2115 25.5491 80.9047L29.1111 80.3828C28.4839 76.1026 30.4747 70.5062 35.0084 64.5802C39.496 58.7143 46.2839 52.7889 54.6847 47.931L52.8826 44.8146Z" fill="#A2ECFB"/>
  <path d="M49.0825 87.2295C48.7478 86.2934 47.7176 85.8059 46.7816 86.1406C45.8455 86.4753 45.358 87.5055 45.6927 88.4416L49.0825 87.2295ZM78.5635 96.4256C79.075 95.5732 78.7988 94.4675 77.9464 93.9559C77.0941 93.4443 75.9884 93.7205 75.4768 94.5729L78.5635 96.4256ZM79.5703 85.1795C79.2738 86.1284 79.8027 87.1379 80.7516 87.4344C81.7004 87.7308 82.71 87.2019 83.0064 86.2531L79.5703 85.1795ZM84.3832 64.0673H82.5832H84.3832ZM69.156 22.5301C68.2477 22.1261 67.1838 22.535 66.7799 23.4433C66.3759 24.3517 66.7848 25.4155 67.6931 25.8194L69.156 22.5301ZM45.6927 88.4416C47.5994 93.7741 50.1496 98.2905 53.2032 101.505C56.2623 104.724 59.9279 106.731 63.9835 106.731V103.131C61.1984 103.131 58.4165 101.765 55.8131 99.0249C53.2042 96.279 50.8768 92.2477 49.0825 87.2295L45.6927 88.4416ZM63.9835 106.731C69.8694 106.731 74.8921 102.542 78.5635 96.4256L75.4768 94.5729C72.0781 100.235 68.0122 103.131 63.9835 103.131V106.731ZM83.0064 86.2531C85.0269 79.7864 86.1832 72.1831 86.1832 64.0673H82.5832C82.5832 71.8536 81.4723 79.0919 79.5703 85.1795L83.0064 86.2531ZM86.1832 64.0673C86.1832 54.1144 84.4439 44.922 81.4961 37.6502C78.5748 30.4436 74.3436 24.8371 69.156 22.5301L67.6931 25.8194C71.6364 27.5731 75.3846 32.1564 78.1598 39.0026C80.9086 45.7836 82.5832 54.507 82.5832 64.0673H86.1832Z" fill="#A2ECFB"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M103.559 84.9077C103.559 82.4252 101.55 80.4127 99.071 80.4127C96.5924 80.4127 94.5831 82.4252 94.5831 84.9077C94.5831 87.3902 96.5924 89.4027 99.071 89.4027C101.55 89.4027 103.559 87.3902 103.559 84.9077V84.9077Z" stroke="#A2ECFB" stroke-width="3.6" stroke-linecap="round"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M28.8143 89.4027C31.2929 89.4027 33.3023 87.3902 33.3023 84.9077C33.3023 82.4252 31.2929 80.4127 28.8143 80.4127C26.3357 80.4127 24.3264 82.4252 24.3264 84.9077C24.3264 87.3902 26.3357 89.4027 28.8143 89.4027V89.4027V89.4027Z" stroke="#A2ECFB" stroke-width="3.6" stroke-linecap="round"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M64.8501 68.0857C62.6341 68.5652 60.451 67.1547 59.9713 64.9353C59.4934 62.7159 60.9007 60.5293 63.1167 60.0489C65.3326 59.5693 67.5157 60.9798 67.9954 63.1992C68.4742 65.4186 67.066 67.6052 64.8501 68.0857Z" fill="#A2ECFB"/>
</svg>

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/assets/wavy-lines.svg`:

```svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1422 800" opacity="0.3">
  <defs>
    <linearGradient x1="50%" y1="0%" x2="50%" y2="100%" id="oooscillate-grad">
      <stop stop-color="hsl(206, 75%, 49%)" stop-opacity="1" offset="0%"></stop>
      <stop stop-color="hsl(331, 90%, 56%)" stop-opacity="1" offset="100%"></stop>
    </linearGradient>
  </defs>
  <g stroke-width="1" stroke="url(#oooscillate-grad)" fill="none" stroke-linecap="round">
    <path d="M 0 448 Q 355.5 -100 711 400 Q 1066.5 900 1422 448" opacity="0.05"></path>
    <path d="M 0 420 Q 355.5 -100 711 400 Q 1066.5 900 1422 420" opacity="0.11"></path>
    <path d="M 0 392 Q 355.5 -100 711 400 Q 1066.5 900 1422 392" opacity="0.18"></path>
    <path d="M 0 364 Q 355.5 -100 711 400 Q 1066.5 900 1422 364" opacity="0.24"></path>
    <path d="M 0 336 Q 355.5 -100 711 400 Q 1066.5 900 1422 336" opacity="0.30"></path>
    <path d="M 0 308 Q 355.5 -100 711 400 Q 1066.5 900 1422 308" opacity="0.37"></path>
    <path d="M 0 280 Q 355.5 -100 711 400 Q 1066.5 900 1422 280" opacity="0.43"></path>
    <path d="M 0 252 Q 355.5 -100 711 400 Q 1066.5 900 1422 252" opacity="0.49"></path>
    <path d="M 0 224 Q 355.5 -100 711 400 Q 1066.5 900 1422 224" opacity="0.56"></path>
    <path d="M 0 196 Q 355.5 -100 711 400 Q 1066.5 900 1422 196" opacity="0.62"></path>
    <path d="M 0 168 Q 355.5 -100 711 400 Q 1066.5 900 1422 168" opacity="0.68"></path>
    <path d="M 0 140 Q 355.5 -100 711 400 Q 1066.5 900 1422 140" opacity="0.75"></path>
    <path d="M 0 112 Q 355.5 -100 711 400 Q 1066.5 900 1422 112" opacity="0.81"></path>
    <path d="M 0 84 Q 355.5 -100 711 400 Q 1066.5 900 1422 84" opacity="0.87"></path>
    <path d="M 0 56 Q 355.5 -100 711 400 Q 1066.5 900 1422 56" opacity="0.94"></path>
  </g>
</svg>

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/assets/base.css`:

```css
:root {
  --ev-c-white: #ffffff;
  --ev-c-white-soft: #f8f8f8;
  --ev-c-white-mute: #f2f2f2;

  --ev-c-black: #1b1b1f;
  --ev-c-black-soft: #222222;
  --ev-c-black-mute: #282828;

  --ev-c-gray-1: #515c67;
  --ev-c-gray-2: #414853;
  --ev-c-gray-3: #32363f;

  --ev-c-text-1: rgba(255, 255, 245, 0.86);
  --ev-c-text-2: rgba(235, 235, 245, 0.6);
  --ev-c-text-3: rgba(235, 235, 245, 0.38);

  --ev-button-alt-border: transparent;
  --ev-button-alt-text: var(--ev-c-text-1);
  --ev-button-alt-bg: var(--ev-c-gray-3);
  --ev-button-alt-hover-border: transparent;
  --ev-button-alt-hover-text: var(--ev-c-text-1);
  --ev-button-alt-hover-bg: var(--ev-c-gray-2);
}

:root {
  --color-background: var(--ev-c-black);
  --color-background-soft: var(--ev-c-black-soft);
  --color-background-mute: var(--ev-c-black-mute);

  --color-text: var(--ev-c-text-1);
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  font-weight: normal;
}

ul {
  list-style: none;
}

body {
  min-height: 100vh;
  color: var(--color-text);
  background: var(--color-background);
  line-height: 1.6;
  font-family:
    Inter,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Fira Sans',
    'Droid Sans',
    'Helvetica Neue',
    sans-serif;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/server-test.tsx`:

```tsx
// cadmium-frontend/src/components/ServerTest.tsx

import { ThemeToggle } from '@/components/custom/theme/theme-toggle';
import React, { useEffect, useState } from 'react';

interface ApiResponse {
    message: string;
}

const ServerTest: React.FC = () => {
    const [data, setData] = useState<ApiResponse | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    const fetchData = async () => {
        setLoading(true);
        setError(null);
        try {
            const response = await fetch('http://localhost:6969/api');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const result: ApiResponse = await response.json();
            setData(result);
        } catch (err: Error | any) {
            setError(err.message || 'Unknown error');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
        // Alternatively, you can fetch data on a button click instead of on mount
    }, []);

    return (
        <div style={styles.container}>
            <h2>Express Server Test</h2>
            {loading && <p>Loading...</p>}
            {error && <p style={styles.error}>Error: {error}</p>}
            {data && <p>Response from Server: {data.message}</p>}
            {/* Optional: Add a button to re-fetch data */}
            <button onClick={fetchData} style={styles.button} >
                Refresh
            </button>
            <ThemeToggle />
        </div>
    );
};

const styles: { [key: string]: React.CSSProperties } = {
    container: {
        marginTop: '20px',
        padding: '10px',
        border: '1px solid #ccc',
        borderRadius: '8px',
        maxWidth: '400px',
        textAlign: 'center',
    },
    error: {
        color: 'red',
    },
    button: {
        marginTop: '10px',
        padding: '8px 16px',
        fontSize: '16px',
        cursor: 'pointer',
        borderRadius: '4px',
    },
};

export default ServerTest;

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/not-found/not-found.tsx`:

```tsx
import CustomLink from '../../components/ui/link'
import React from 'react'

const NotFound: React.FC = () => {
  return (
    <div className="flex items-center min-h-screen px-4 py-12 sm:px-6 md:px-8 lg:px-12 xl:px-16">
      <div className="w-full space-y-6 text-center">
        <div className="space-y-3">
          <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl animate-bounce">404</h1>
          <p className="text-muted-foreground">
            Looks like you&apos;ve ventured into the unknown digital realm.
          </p>
        </div>
        <CustomLink
          to="/login"
          className="inline-flex h-10 items-center bg-secondary text-primary no-underline rounded-md px-8 text-sm font-medium shadow transition-colors"
        >
          Return to website
        </CustomLink>
      </div>
    </div>
  )
}

export default NotFound

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/projects/index.tsx`:

```tsx
import ProjectCard from './project-card'
import AddProject from './add-project'
import { useNavigate } from 'react-router-dom'
import { useAuthStore } from '../../stores/useAuthStore'
import { fetchProjectList } from '../../services/api/fetch-projects--list'
import { useProjectListStore } from '../../stores/useProjectListStore'
import { useQuery } from '@tanstack/react-query'
import { useState } from 'react'
import LinkProjectDrawer from './link-project-drawer'

export default function Projects() {
  const { organization, isLoggedIn } = useAuthStore()
  const { projectList } = useProjectListStore()
  const navigate = useNavigate()
  const [isDrawerOpen, setIsDrawerOpen] = useState(false)
  const [idTiLick, setIdToLink] = useState<string | null>(null)

  useQuery({
    queryKey: [organization, 'projects'],
    queryFn: () => (isLoggedIn ? fetchProjectList() : []),
    refetchOnWindowFocus: false
  })

  return (
    <div className="flex flex-col min-h-[calc(100vh-7vh)] w-full items-center justify-center px-4 ">
      <div className="flex flex-1 flex-col justify-center gap-4 p-4 pt-0">
        <div className="grid auto-rows-min gap-4 xs:grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {projectList.map((project, index) => (
            <ProjectCard
              id={project.id}
              key={index}
              title={project.name}
              description={project.description}
              data={[
                {
                  name: 'New Error',
                  value: project.errorCount,
                  variant: 'destructive'
                },
                {
                  name: 'Code Suggestion',
                  value: project.codeSuggestionCount,
                  variant: 'default'
                },
                {
                  name: 'Total Error Resolved',
                  value: project.totalErrorResolved,
                  variant: 'outline'
                }
              ]}
              isLinkedToRemote={project.isConnectedToRemote}
              remoteUrl={project.remoteUrl}
              onOpenProject={() => {
                navigate(`/${organization}/projects/${project.id}/log-analysis/explorer`)
              }}
              onOpenTerminal={() => {
                setIsDrawerOpen(true)
                setIdToLink(project.id)
              }}
            />
          ))}
        </div>
      </div>

      <LinkProjectDrawer
        open={isDrawerOpen}
        onOpenChange={(bool) => {
          setIsDrawerOpen(bool)
          // calling the function to refetch the project list after linking the project to update the button "open/link to remote"
          fetchProjectList()
        }}
        projectId={idTiLick}
      />

      <div className="flex flex-1 flex-col justify-center gap-4 p-4 ">
        <AddProject />
      </div>
    </div>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/projects/project-card.tsx`:

```tsx
import React from 'react'
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle
} from '../../components/ui/card'
import { Badge } from '../../components/ui/badge'
import { ProjectCardProps } from '../../types/type'
import { Avatar, AvatarFallback } from '../../components/ui/avatar'
import { Github } from 'lucide-react'
import { Button } from '../../components/ui/button'

const ProjectCard: React.FC<ProjectCardProps> = (props: ProjectCardProps) => {
  return (
    <Card className="w-[320px]">
      <CardHeader className="bg-muted rounded-t-md">
        <div className="flex items-center gap-x-4 border-b">
          <Avatar className="h-10 w-10 rounded-lg font-bold text-base">
            <AvatarFallback className="rounded-lg bg-muted-foreground">
              {props.title.slice(0, 2).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <CardHeader className="p-0">
            <CardTitle>{props.title}</CardTitle>
            <CardDescription className="text-xs">{props.description}</CardDescription>
          </CardHeader>
        </div>
      </CardHeader>
      <CardContent>
        <dl className="-my-3 divide-y py-4 text-sm/6">
          {props.data.map((data) => (
            <div key={data.name} className="flex justify-between gap-x-4 py-3">
              <dt className="">{data.name}</dt>
              <dd className="">
                <Badge variant={data.variant}>{data.value}</Badge>
              </dd>
            </div>
          ))}
        </dl>
      </CardContent>
      <CardFooter className="flex justify-end">
        {props.isLinkedToRemote ? (
          <Button onClick={props.onOpenProject}>Open</Button>
        ) : (
          <Button onClick={props.onOpenTerminal}>
            <Github className=" h-4 w-4" />
            Link to remote
          </Button>
        )}
      </CardFooter>
    </Card>
  )
}

export default ProjectCard

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/projects/add-project.tsx`:

```tsx
import { FileCode2, Plus } from 'lucide-react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '../../components/ui/dialog'
import { Input } from '../../components/ui/input'
import { Label } from '../../components/ui/label'

import { Typography } from '../../components/ui/typography'
import { useProjectCreateStore } from '../../stores/useProjectCreateStore'
import { validateProjectForm } from '../../services/validation/create-project'
import { createProject } from '../../services/api/create-project'
import { toast } from '../../hooks/use-toast'
import { Button } from '../../components/ui/button'

export default function AddProject() {
  const { setName, setDescription, openModal, setOpenModal, name, description, loading, errors } =
    useProjectCreateStore()

  const handleSubmit = async () => {
    if (validateProjectForm()) {
      try {
        await createProject()
      } catch {
        toast({
          variant: 'destructive',
          title: 'Error',
          description: 'Something went wrong. Please try again later.'
        })
      }
    }
  }

  return (
    <div className="text-center">
      <FileCode2 className="mx-auto h-12 w-12 text-gray-400" />
      <Typography variant="sm" className="mt-2 font-semibold">
        New projects
      </Typography>
      <Typography variant="sm" className="mt-1 text-muted-foreground">
        Get started by creating a new project.
      </Typography>

      <Dialog
        open={openModal}
        onOpenChange={(bool) => {
          setOpenModal(bool)
          setName('')
          setDescription('')
        }}
      >
        <DialogTrigger asChild>
          <div className="mt-6">
            <Button onClick={() => setOpenModal(true)}>
              <Plus aria-hidden="true" className="-ml-0.5 mr-1.5 size-5" />
              New Project
            </Button>
          </div>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>New project</DialogTitle>
            <DialogDescription>
              Make changes to your project here. Click save when you&lsquo;re done.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="project-name" className="text-right">
                Project name <span>*</span>
              </Label>
              <div className="col-span-3">
                <Input
                  id="project-name"
                  value={name}
                  className="col-span-3"
                  required
                  onChange={(e) => setName(e.target.value)}
                />
                {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Input
                id="description"
                value={description}
                className="col-span-3"
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              type="button"
              disabled={loading || !name.trim()}
              onClick={handleSubmit}
              loading={loading}
            >
              Save
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/projects/link-project-drawer.tsx`:

```tsx
import React from 'react'
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle
} from '../../components/ui/drawer'
import { Button } from '../../components/ui/button'
import XTerminal from '../../components/custom/terminal'

type Props = {
  open: boolean
  onOpenChange: React.Dispatch<React.SetStateAction<boolean>>
  projectId: string | null
}

const LinkProjectDrawer: React.FC<Props> = ({ open, onOpenChange, projectId }) => {
  return (
    <Drawer open={open} onOpenChange={onOpenChange}>
      <DrawerContent>
        <DrawerHeader>
          <div className="flex justify-between items-start">
            <div className="">
              <DrawerTitle>Link To Remote</DrawerTitle>
              <br />
              <DrawerDescription>
                Link your remote github repository to your project, which will allow cadmium to
                analyze your code and provide suggestions for fixing errors.
              </DrawerDescription>
              <DrawerDescription>
                Steps 1: Run the command{' '}
                <code className="bg-accent text-primary px-2 underline italic">
                  git clone &apos;remote_url&apos;
                </code>
              </DrawerDescription>
              <DrawerDescription>
                Steps 2: Running above command will clone the default branch of your remote
                repository. If you want to change your working branch, run the command{' '}
                <code className="bg-accent text-primary px-2 underline italic">
                  git checkout &apos;branch_name&apos;
                </code>
              </DrawerDescription>
            </div>
            <DrawerClose>
              <Button variant="ghost">x</Button>
            </DrawerClose>
          </div>
        </DrawerHeader>
        <DrawerFooter>
          <div className="bg-black p-2 rounded-md">
            <XTerminal projectId={projectId} />
          </div>
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  )
}

export default LinkProjectDrawer

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/index.tsx`:

```tsx
import React from 'react'
import Header from './header'
import { useParams } from 'react-router-dom'
import NotFound from '../../../pages/not-found/not-found'
import Analyze from './analyze'
import Configure from './congfigure'
import Explorer from './explorer'

type Submodule = 'explorer' | 'analyze' | 'configure'

const LogAnalysis: React.FC = () => {
  const { submodule } = useParams<{ submodule: Submodule }>() // Treat as a string to handle unmatched cases

  let content

  switch (submodule) {
    case 'explorer':
      content = <Explorer />
      break
    case 'analyze':
      content = <Analyze />
      break
    case 'configure':
      content = <Configure />
      break
    default:
      content = <NotFound /> // Default case for unmatched submodules
      break
  }

  return (
    <div className="flex flex-col mb-[5vh] w-full">
      <Header />
      {content}
    </div>
  )
}

export default LogAnalysis

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/index.tsx`:

```tsx
import React from 'react'
import NumericStats from './components/numeric-stats'
import { LogChart } from './components/chart'
import LogTable from './components/log-table'

const Explorer: React.FC = () => {
  return (
    <div className="">
      <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
        <div className="grid auto-rows-min gap-4 grid-cols-1 md:grid-cols-3">
          <div className="p-2 rounded-xl bg-card text-card-foreground col-span-1 md:col-span-1">
            <NumericStats />
          </div>
          <div className="p-2 rounded-xl bg-card text-card-foreground col-span-1 md:col-span-2  border-none ring-0">
            <LogChart />
          </div>
        </div>
        <div className="flex-1 p-2 rounded-xl bg-card text-card-foreground">
          <LogTable />
        </div>
      </div>
    </div>
  )
}

export default Explorer

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/chart/index.tsx`:

```tsx
import { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'

import { Card, CardContent } from '../../../../../../components/ui/card'
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent
} from '../../../../../../components/ui/chart'

export const description = 'An interactive bar chart'

const chartData = [
  { date: '2024-04-01', desktop: 222, mobile: 150 },
  { date: '2024-04-02', desktop: 97, mobile: 180 },
  { date: '2024-04-03', desktop: 167, mobile: 120 },
  { date: '2024-04-04', desktop: 242, mobile: 260 },
  { date: '2024-04-05', desktop: 373, mobile: 290 },
  { date: '2024-04-06', desktop: 301, mobile: 340 },
  { date: '2024-04-07', desktop: 245, mobile: 180 },
  { date: '2024-04-08', desktop: 409, mobile: 320 },
  { date: '2024-04-09', desktop: 59, mobile: 110 },
  { date: '2024-04-10', desktop: 261, mobile: 190 },
  { date: '2024-04-11', desktop: 327, mobile: 350 },
  { date: '2024-04-12', desktop: 292, mobile: 210 },
  { date: '2024-04-13', desktop: 342, mobile: 380 },
  { date: '2024-04-14', desktop: 137, mobile: 220 },
  { date: '2024-04-15', desktop: 120, mobile: 170 },
  { date: '2024-04-16', desktop: 138, mobile: 190 },
  { date: '2024-04-17', desktop: 446, mobile: 360 },
  { date: '2024-04-18', desktop: 364, mobile: 410 },
  { date: '2024-04-19', desktop: 243, mobile: 180 },
  { date: '2024-04-20', desktop: 89, mobile: 150 },
  { date: '2024-04-21', desktop: 137, mobile: 200 },
  { date: '2024-04-22', desktop: 224, mobile: 170 },
  { date: '2024-04-23', desktop: 138, mobile: 230 },
  { date: '2024-04-24', desktop: 387, mobile: 290 },
  { date: '2024-04-25', desktop: 215, mobile: 250 },
  { date: '2024-04-26', desktop: 75, mobile: 130 },
  { date: '2024-04-27', desktop: 383, mobile: 420 },
  { date: '2024-04-28', desktop: 122, mobile: 180 },
  { date: '2024-04-29', desktop: 315, mobile: 240 },
  { date: '2024-04-30', desktop: 454, mobile: 380 },
  { date: '2024-05-01', desktop: 165, mobile: 220 },
  { date: '2024-05-02', desktop: 293, mobile: 310 },
  { date: '2024-05-03', desktop: 247, mobile: 190 },
  { date: '2024-05-04', desktop: 385, mobile: 420 },
  { date: '2024-05-05', desktop: 481, mobile: 390 },
  { date: '2024-05-06', desktop: 498, mobile: 520 },
  { date: '2024-05-07', desktop: 388, mobile: 300 },
  { date: '2024-05-08', desktop: 149, mobile: 210 },
  { date: '2024-05-09', desktop: 227, mobile: 180 },
  { date: '2024-05-10', desktop: 293, mobile: 330 },
  { date: '2024-05-11', desktop: 335, mobile: 270 },
  { date: '2024-05-12', desktop: 197, mobile: 240 },
  { date: '2024-05-13', desktop: 197, mobile: 160 },
  { date: '2024-05-14', desktop: 448, mobile: 490 },
  { date: '2024-05-15', desktop: 473, mobile: 380 },
  { date: '2024-05-16', desktop: 338, mobile: 400 },
  { date: '2024-05-17', desktop: 499, mobile: 420 },
  { date: '2024-05-18', desktop: 315, mobile: 350 },
  { date: '2024-05-19', desktop: 235, mobile: 180 },
  { date: '2024-05-20', desktop: 177, mobile: 230 },
  { date: '2024-05-21', desktop: 82, mobile: 140 },
  { date: '2024-05-22', desktop: 81, mobile: 120 },
  { date: '2024-05-23', desktop: 252, mobile: 290 },
  { date: '2024-05-24', desktop: 294, mobile: 220 },
  { date: '2024-05-25', desktop: 201, mobile: 250 },
  { date: '2024-05-26', desktop: 213, mobile: 170 },
  { date: '2024-05-27', desktop: 420, mobile: 460 },
  { date: '2024-05-28', desktop: 233, mobile: 190 },
  { date: '2024-05-29', desktop: 78, mobile: 130 },
  { date: '2024-05-30', desktop: 340, mobile: 280 },
  { date: '2024-05-31', desktop: 178, mobile: 230 },
  { date: '2024-06-01', desktop: 178, mobile: 200 },
  { date: '2024-06-02', desktop: 470, mobile: 410 },
  { date: '2024-06-03', desktop: 103, mobile: 160 },
  { date: '2024-06-04', desktop: 439, mobile: 380 },
  { date: '2024-06-05', desktop: 88, mobile: 140 },
  { date: '2024-06-06', desktop: 294, mobile: 250 },
  { date: '2024-06-07', desktop: 323, mobile: 370 },
  { date: '2024-06-08', desktop: 385, mobile: 320 },
  { date: '2024-06-09', desktop: 438, mobile: 480 },
  { date: '2024-06-10', desktop: 155, mobile: 200 },
  { date: '2024-06-11', desktop: 92, mobile: 150 },
  { date: '2024-06-12', desktop: 492, mobile: 420 },
  { date: '2024-06-13', desktop: 81, mobile: 130 }
]

const chartConfig = {
  views: {
    label: 'Error captured'
  },
  desktop: {
    label: 'Desktop',
    color: 'var(--chart-1)'
  }
} satisfies ChartConfig

export function LogChart() {
  return (
    <Card className="border-none shadow-none p-0 bg-transparent">
      <CardContent className="border-none ring-0 rounded-lg p-0">
        <ChartContainer config={chartConfig} className="aspect-auto h-[200px] w-full">
          <BarChart
            accessibilityLayer
            data={chartData}
            margin={{
              left: 12,
              right: 12
            }}
          >
            <CartesianGrid vertical={false} horizontal={false} />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              minTickGap={32}
              tickFormatter={(value) => {
                const date = new Date(value)
                return date.toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric'
                })
              }}
            />
            {/* <YAxis
                            tickLine={false}
                            axisLine={false}
                            tickMargin={-8}
                        /> */}
            <ChartTooltip
              content={
                <ChartTooltipContent
                  className="w-[150px]"
                  nameKey="views"
                  labelFormatter={(value) => {
                    return new Date(value).toLocaleDateString('en-US', {
                      month: 'short',
                      day: 'numeric',
                      year: 'numeric'
                    })
                  }}
                />
              }
            />
            <Bar dataKey={'desktop'} fill={`#9db2bf`} />
          </BarChart>
        </ChartContainer>
      </CardContent>
    </Card>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/numeric-stats/index.tsx`:

```tsx
import { Typography } from '../../../../../../components/ui/typography'

const NumericStats = () => {
  return (
    <div className="border-none ring-0 bg-transparent">
      <div className="flex flex-col items-stretch space-y-0 p-0 sm:flex-row">
        <div className="flex flex-1 flex-col justify-center gap-1 px-2 py-2">
          <Typography variant="xl" className="">
            Log captured
          </Typography>
          <Typography variant="sm" className="text-muted-foreground">
            Showing total visitors for the last 3 months
          </Typography>
        </div>
      </div>
      <div className="p-0 flex flex-1 flex-row flex-wrap justify-start items-center">
        <div className="flex flex-1 flex-col justify-center items-start gap-1 h-28 px-2 data-[active=true]:bg-muted">
          <span className="text-xs text-muted-foreground">Error Detected</span>
          <span className="text-lg font-bold leading-none sm:text-3xl">354</span>
        </div>
        <div className="flex flex-1 flex-col justify-center items-start gap-1 h-28 px-2 data-[active=true]:bg-muted">
          <span className="text-xs text-muted-foreground">Resolved</span>
          <span className="text-lg font-bold leading-none sm:text-3xl">321</span>
        </div>
        <div className="flex md:hidden xl:flex flex-1 flex-col justify-center items-start gap-1 h-28 px-2 data-[active=true]:bg-muted">
          <span className="text-xs text-muted-foreground">Suggestions</span>
          <span className="text-lg font-bold leading-none sm:text-3xl">657</span>
        </div>
      </div>
    </div>
  )
}

export default NumericStats

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/solution-slideover/index.tsx`:

```tsx
import { Button } from '../../../../../../components/ui/button'
import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader
} from '../../../../../../components/ui/sheet'

import { DialogTitle } from '@radix-ui/react-dialog'
import { LogTableEntry } from '../../../../../../types/type'
import { useLogStore } from '../../../../../../stores/useLogStore'
import { GeneralInfo } from './general-info'
import { StackTrace } from './stack-trace'
import RagInference from './rag-inference'

export interface SlideOverProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  errorLog: LogTableEntry | null
  onMarkResolved: () => void
}

export function SolutionSlideOver({
  open,
  onOpenChange,
  errorLog,
  onMarkResolved
}: SlideOverProps) {
  const { streamingData } = useLogStore()

  if (!errorLog) {
    return null
  }

  console.log('streamingData', streamingData?.id, '====', errorLog.id)

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent className="w-full sm:w-3/4 xl:w-4/6 overflow-y-scroll">
        <SheetHeader>
          <DialogTitle className="text-lg font-semibold">Error Details</DialogTitle>
          <SheetDescription>
            Review the error details and follow the resolution steps below.
          </SheetDescription>
        </SheetHeader>
        <div className="grid gap-4 py-4">
          {/* General Info */}
          <GeneralInfo
            createdAt={errorLog.createdAt}
            url={errorLog.url}
            method={errorLog.method}
            error={errorLog.error}
          />

          {/* Stack Trace Accordion */}
          <StackTrace traceback={errorLog.traceback} />

          <DialogTitle className="text-lg font-semibold">Possible solution</DialogTitle>

          {/* Rag inference */}
          {streamingData && streamingData.id === errorLog.id ? (
            <RagInference
              ragResponse={streamingData.ragInference.rag_response?.rag_response.rag_response}
            />
          ) : (
            <RagInference
              ragResponse={errorLog.ragInference?.rag_response?.rag_response?.rag_response}
            />
          )}
        </div>

        <SheetFooter>
          <SheetClose asChild>
            <Button type="button" onClick={onMarkResolved}>
              Mark as Resolved
            </Button>
          </SheetClose>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/solution-slideover/general-info.tsx`:

```tsx
import { Typography } from '../../../../../../components/ui/typography'
import { HttpMethodBadge } from '../log-table/http-methods'

export interface GeneralInfoProps {
  createdAt: string
  url: string
  method: 'default' | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | null | undefined
  error: string
}

export function GeneralInfo({ createdAt, url, method, error }: GeneralInfoProps) {
  return (
    <div className="grid gap-6 bg-gray-900 text-gray-100 p-6 rounded-lg shadow-lg">
      {/* Timestamp Section */}
      <div>
        <Typography variant="small" className="font-semibold text-gray-100 mb-1">
          Timestamp
        </Typography>
        <Typography variant="sm" className="text-gray-400 text-tiny">
          {new Date(createdAt).toLocaleString()}
        </Typography>
      </div>

      {/* API Endpoint Section */}
      <div>
        <Typography variant="small" className="font-semibold text-gray-100 mb-1">
          API Endpoint
        </Typography>
        <Typography variant="sm" className="text-gray-400 text-tiny break-words">
          {url ? new URL(url).pathname : 'N/A'}
        </Typography>
      </div>

      {/* HTTP Method Section */}
      <div>
        <Typography variant="small" className="font-semibold text-gray-100 mb-1">
          HTTP Method
        </Typography>
        <HttpMethodBadge
          variant={method}
          className="inline-block text-sm px-3 py-1 rounded-md font-mono uppercase bg-gray-800 text-gray-300 border border-gray-700"
        >
          {method || 'N/A'}
        </HttpMethodBadge>
      </div>

      {/* Error Section */}
      <div>
        <Typography variant="small" className="font-semibold text-gray-100 mb-1">
          Error
        </Typography>
        <Typography variant="sm" className="text-gray-400 text-tiny break-words">
          {error || 'No error information available'}
        </Typography>
      </div>
    </div>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/solution-slideover/stack-trace.tsx`:

```tsx
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger
} from '../../../../../../components/ui/accordion'
import { Typography } from '../../../../../../components/ui/typography'
import { ScrollArea } from '../../../../../../components/ui/scroll-area'
import CodeBlock from '../../../../../../components/custom/global/code-block'

export interface StackTraceProps {
  traceback: string
}

export function StackTrace({ traceback }: StackTraceProps) {
  return (
    <div className="text-sm bg-gray-900 text-gray-100 p-4 rounded-lg shadow-lg">
      <Accordion
        type="single"
        collapsible
        className="bg-gray-800 rounded-md shadow-md border border-gray-700"
      >
        <AccordionItem value="item-1">
          {/* Accordion Trigger */}
          <AccordionTrigger className="text-sm bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-gray-100 rounded-md px-3 py-2 transition-all focus:outline-none focus:ring-2 focus:ring-accent">
            <Typography variant="small" className="font-semibold tracking-wide">
              Stack Trace
            </Typography>
          </AccordionTrigger>

          {/* Accordion Content */}
          <AccordionContent className="bg-gray-900 rounded-md p-4">
            <ScrollArea className="h-[400px] rounded-md border border-gray-700 bg-black text-gray-100 shadow-inner overflow-auto">
              <pre className="text-xs leading-5 text-gray-300 whitespace-pre-wrap break-all">
                <code>
                  <CodeBlock codeString={traceback} language="python" />
                </code>
              </pre>
            </ScrollArea>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/solution-slideover/rag-inference.tsx`:

```tsx
import React, { useState } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import rehypeRaw from 'rehype-raw'
import { Typography } from '../../../../../../components/ui/typography'
import { Copy, Check } from 'lucide-react'
import CodeBlock from '../../../../../../components/custom/global/code-block'

export interface RagInferenceProps {
  ragResponse: string | undefined
}
// Extend the props for `ol` and `li` components
interface CustomOlProps extends React.OlHTMLAttributes<HTMLOListElement> {
  ordered?: boolean
}

interface CustomLiProps extends React.LiHTMLAttributes<HTMLLIElement> {
  ordered?: boolean
}

export function RagInference({ ragResponse }: RagInferenceProps) {
  const [copiedCode, setCopiedCode] = useState<string | null>(null)

  const handleCopySuccess = (text: string) => {
    navigator.clipboard.writeText(text)
    setCopiedCode(text)
    setTimeout(() => setCopiedCode(null), 6000) // Reset the copied state after 2 seconds
  }

  if (!ragResponse) {
    return (
      <Typography variant="sm" className="text-center text-gray-400 my-8">
        No inference found to resolve
      </Typography>
    )
  }

  return (
    <div className="bg-gray-900 text-gray-100 p-8 rounded-lg shadow-lg">
      <Typography variant="small" className="font-semibold text-lg text-gray-100 mb-6">
        Steps to Resolve
      </Typography>
      <div className="text-sm leading-7 text-gray-300">
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeRaw]}
          components={{
            code({ className, children, ...props }) {
              const match = /language-(\w+)/.exec(className || '')
              const language = match ? match[1].toLowerCase() : 'code'
              const code = String(children).replace(/\n$/, '')

              return match ? (
                <div className="relative my-4 bg-gray-800 border border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow duration-200">
                  <div className="flex items-center justify-between mb-2">
                    <Typography variant="sm" className="text-gray-400">
                      {language}
                    </Typography>
                    <button
                      onClick={() => handleCopySuccess(code)}
                      className="flex items-center justify-center text-xs cursor-pointer text-gray-400 hover:text-gray-300 bg-gray-700 px-2 py-1 rounded-md min-w-[75px] transition-all duration-200"
                    >
                      <div className="flex items-center gap-1 min-w-[50px] justify-center">
                        {copiedCode === code ? (
                          <>
                            <Check width={16} height={16} className="text-green-400" />
                            <span>Copied</span>
                          </>
                        ) : (
                          <>
                            <Copy width={16} height={16} className="text-gray-400" />
                            <span>Copy</span>
                          </>
                        )}
                      </div>
                    </button>
                  </div>
                  <CodeBlock codeString={code} language={language} />
                </div>
              ) : (
                <code
                  className="inline-block bg-gray-800 text-gray-100 px-3 py-1 rounded-md text-sm font-mono italic shadow-sm"
                  {...props}
                >
                  {children}
                </code>
              )
            },
            strong: ({ ...props }) => (
              <strong className="font-bold text-gray-100 shadow-sm" {...props} />
            ),
            h1: ({ ...props }) => (
              <h1
                className="text-3xl font-bold text-gray-100 border-b border-gray-700 mb-6 pb-2 shadow-lg"
                {...props}
              />
            ),
            h2: ({ ...props }) => (
              <h2 className="text-2xl font-semibold text-gray-200 my-5" {...props} />
            ),
            h3: ({ ...props }) => (
              <h3 className="text-xl font-semibold text-gray-300 my-4" {...props} />
            ),
            p: ({ ...props }) => <p className="my-4 text-gray-300" {...props} />,
            blockquote: ({ ...props }) => (
              <blockquote
                className="border-l-8 bg-gray-800 text-blue-400 italic p-4 my-6 rounded-lg"
                {...props}
              />
            ),
            ul: ({ ...props }) => (
              <ul className="list-disc pl-6 my-4 text-gray-300 space-y-2" {...props} />
            ),
            ol: ({ ordered, children, ...props }: CustomOlProps) => {
              if (ordered) {
                return (
                  <ol className="my-4 space-y-4" {...props}>
                    {React.Children.map(children, (child, index) => (
                      <div className="flex gap-4">
                        <span className="text-gray-300 font-medium min-w-[1.5rem]">
                          {index + 1}.
                        </span>
                        {child}
                      </div>
                    ))}
                  </ol>
                )
              }
              return (
                <ol className="list-decimal pl-6 my-4 text-gray-300 space-y-2" {...props}>
                  {children}
                </ol>
              )
            },
            li: ({ ordered, ...props }: CustomLiProps) => {
              if (ordered) {
                return <li className="flex-1" {...props} />
              }
              return <li {...props} />
            },
            a: ({ ...props }) => (
              <a
                className="text-blue-400 underline hover:text-blue-300 transition-colors duration-200"
                target="_blank"
                rel="noopener noreferrer"
                {...props}
              />
            ),
            img: ({ ...props }) => (
              <img className="my-6 rounded-lg shadow-md border border-gray-700" alt="" {...props} />
            ),
            table: ({ ...props }) => (
              <table
                className="table-auto w-full border-collapse border border-gray-700 my-4 bg-gray-800 text-gray-300 rounded-lg overflow-hidden"
                {...props}
              />
            ),
            th: ({ ...props }) => (
              <th
                className="border border-gray-700 bg-gray-700 p-3 text-left font-semibold text-gray-200 sticky top-0"
                {...props}
              />
            ),
            td: ({ ...props }) => (
              <td className="border border-gray-700 p-3 text-gray-300" {...props} />
            )
          }}
        >
          {ragResponse}
        </ReactMarkdown>
      </div>
    </div>
  )
}

export default RagInference

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/log-table/index.tsx`:

```tsx
import React from 'react'
import { Table } from '../../../../../../components/ui/table'
import THead from './t-head'
import { LogTableEntry } from '../../../../../../types/type'
import { useLogStore } from '../../../../../../stores/useLogStore'
import TBody from './t-body'
import { SolutionSlideOver } from '../solution-slideover'
import { Typography } from '../../../../../../components/ui/typography'
import { useParams } from 'react-router-dom'
import { fetchLogTableData } from '../../../../../../services/api/fetch-log-table-data'
import { useQuery } from '@tanstack/react-query'
import InfiniteScroll from 'react-infinite-scroll-component'

const LogTable: React.FC = () => {
  const {
    tableData,
    setOpenSlideOver,
    setSelectedLog,
    openSlideOver,
    selectedLog,
    incrementPage,
    loading,
    totalLogs,
    limit,
    resetTableData
    // page
  } = useLogStore()
  const { project_id } = useParams()
  const cd_id = localStorage.getItem('cd_id') ?? ''
  const cd_secret = localStorage.getItem('cd_secret') ?? ''

  const { isLoading, error } = useQuery({
    queryKey: ['log-table', cd_id, cd_secret, project_id],
    queryFn: () => {
      resetTableData()
      return fetchLogTableData(project_id ?? '')
    },
    refetchOnWindowFocus: false
  })

  const fetchMoreData = () => {
    if (!loading && tableData.length < (totalLogs || Infinity)) {
      incrementPage()
      fetchLogTableData(project_id ?? '')
    }
  }

  const handleRowClick = async (data: LogTableEntry) => {
    setSelectedLog(data)
    setOpenSlideOver(true)
  }
  return (
    <div>
      <Typography variant="xl" className=" px-2 py-2 ">
        Error logs
      </Typography>
      <Table>
        <THead />
      </Table>
      <div
        id="scrollableDiv"
        className="w-full max-h-[calc(100dvh-46dvh)] overflow-y-scroll relative scrollbar scrollbar-hide"
      >
        <InfiniteScroll
          dataLength={tableData.length} // Current data length
          next={fetchMoreData} // Function to fetch the next page
          hasMore={tableData.length >= limit} // Stop scrolling when all logs are loaded
          loader={loading && <p className="text-center my-4">Loading...</p>} // Loader shown during fetch
          scrollableTarget="scrollableDiv" // Target for scrollable container
        >
          <Table>
            <TBody tableData={tableData ?? []} onRowClick={handleRowClick} />
          </Table>
        </InfiniteScroll>
      </div>
      {isLoading ? (
        <p className="text-center my-5">Loading...</p>
      ) : error ? (
        <p>Error: {error.message}</p>
      ) : null}
      {tableData === null ||
        (tableData.length === 0 && !loading && (
          <Typography variant="sm" className="text-muted-foreground px-2 py-8 text-center">
            No logs found.
          </Typography>
        ))}
      <SolutionSlideOver
        open={openSlideOver}
        onOpenChange={setOpenSlideOver}
        errorLog={selectedLog}
        onMarkResolved={() => setOpenSlideOver(false)}
      />
    </div>
  )
}

export default LogTable

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/log-table/action.tsx`:

```tsx
import React from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from '../../../../../../components/ui/dropdown-menu'
import { CheckCircle, MoreVerticalIcon, Trash, View } from 'lucide-react'

const ActionButton: React.FC = () => {
  return (
    <div className="flex justify-end ">
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <MoreVerticalIcon className="text-foreground w-5" />
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem>
            <CheckCircle className="text-muted-foreground" />
            <span>Mark resolved</span>
          </DropdownMenuItem>
          <DropdownMenuItem>
            <View className="text-muted-foreground" />
            <span>Open</span>
          </DropdownMenuItem>
          <DropdownMenuItem>
            <Trash className="text-muted-foreground" />
            <span>Remove</span>
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

export default ActionButton

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/log-table/t-body.tsx`:

```tsx
import React from 'react'
import { TableBody, TableCell, TableRow } from '../../../../../../components/ui/table'
import { HttpMethodBadge } from './http-methods'
import { LogTableEntry } from '../../../../../../types/type'
import addEllipsis from '../../../../../../lib/ellipsis'
import ActionButton from './action'
import { getApiEndpoint } from '../../../../../../lib/getApiEndpoint'

type Props = {
  tableData: LogTableEntry[] | null
  onRowClick?: (data: LogTableEntry) => void
}

const TBody: React.FC<Props> = ({ tableData, onRowClick }) => {
  const handleRowClick = (data: LogTableEntry) => {
    if (onRowClick) {
      onRowClick(data)
    }
  }

  return (
    <TableBody>
      {tableData &&
        tableData.map((data, index) => (
          <TableRow
            key={index}
            className={`cursor-pointer dark:hover:bg-muted-foreground hover:bg-accent ${data.isStreaming === true && 'animate-pulse bg-muted-foreground'} `}
            onClick={() => handleRowClick(data)}
          >
            <TableCell className="font-medium w-[15%]">
              {new Date(data.createdAt).toLocaleString()}
            </TableCell>
            <TableCell className="text-left w-[50%]">{addEllipsis(data.error, 100, 3)}</TableCell>
            <TableCell className="w-[10%]">
              <HttpMethodBadge variant={data.method}>{data.method}</HttpMethodBadge>
            </TableCell>
            <TableCell className="w-[30%]">{getApiEndpoint(data.url)}</TableCell>
            <TableCell className="text-right " onClick={(e) => e.stopPropagation()}>
              <ActionButton />
            </TableCell>
          </TableRow>
        ))}
    </TableBody>
  )
}

export default TBody

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/log-table/http-methods.tsx`:

```tsx
import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '../../../../../../lib/utils'

const httpMethodBadgeVariants = cva(
  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default: 'border-transparent bg-primary text-primary-foreground shadow',
        GET: 'border-success bg-success-light text-success dark:text-success-foreground shadow',
        POST: 'border-primary-foreground bg-primary text-primary-foreground shadow',
        PUT: 'border-yellow-600 bg-yellow-600/20 text-yellow-600 shadow',
        PATCH: 'border-secondary-foreground bg-secondary text-secondary-foreground shadow',
        DELETE: 'border-destructive bg-destructive-light text-destructive shadow'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

export interface HttpMethodBadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof httpMethodBadgeVariants> {}

/**
 * `HttpMethodBadge` is a React functional component that renders a stylized badge
 * representing an HTTP method. The badge is styled using the `class-variance-authority`
 * library which allows for flexible styling based on the `variant` prop.
 *
 * Props:
 * - `className` (string): Additional class names to apply to the badge for custom styling.
 * - `variant` (`VariantProps<typeof httpMethodBadgeVariants>`): The variant of the badge,
 *   which determines the styling based on the HTTP method type. Supported values are:
 *   - `default`: Default styling for the badge.
 *   - `GET`: Styles the badge for a GET request, using success colors.
 *   - `POST`: Styles the badge for a POST request, using primary colors.
 *   - `PUT`: Styles the badge for a PUT request, using yellow colors.
 *   - `PATCH`: Styles the badge for a PATCH request, using secondary colors.
 *   - `DELETE`: Styles the badge for a DELETE request, using destructive colors.
 * - `...props` (React.HTMLAttributes<HTMLDivElement>): Additional HTML attributes passed
 *   to the badge element.
 *
 * The component applies base styles for the badge, such as rounded borders, padding,
 * font size, and transition effects, and it integrates with the `cn` utility for
 * managing conditional class names.
 */
function HttpMethodBadge({ className, variant, ...props }: HttpMethodBadgeProps) {
  return <div className={cn(httpMethodBadgeVariants({ variant }), className)} {...props} />
}

export { HttpMethodBadge, httpMethodBadgeVariants }

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/log-table/t-pagination.tsx`:

```tsx
import React from 'react'
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious
} from '../../../../../../components/ui/pagination'

const TablePagination: React.FC = () => {
  return (
    <Pagination>
      <PaginationContent>
        <PaginationItem>
          <PaginationPrevious href="#" />
        </PaginationItem>
        <PaginationItem>
          <PaginationLink href="#" isActive>
            1
          </PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationLink href="#">2</PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationLink href="#">3</PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationEllipsis />
        </PaginationItem>
        <PaginationItem>
          <PaginationNext href="#" />
        </PaginationItem>
      </PaginationContent>
    </Pagination>
  )
}

export default TablePagination

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/explorer/components/log-table/t-head.tsx`:

```tsx
import React from 'react'
import { TableHead, TableHeader, TableRow } from '../../../../../../components/ui/table'

const THead: React.FC = () => {
  return (
    <TableHeader>
      <TableRow className="hover:bg-transparent">
        <TableHead className="w-[15%]">Timestamp</TableHead>
        <TableHead className="text-left w-[50%] ">Error message</TableHead>
        <TableHead className="w-[10%] ">Method</TableHead>
        <TableHead className="w-[30%]">API endpoint</TableHead>
        <TableHead className="text-right">Action</TableHead>
      </TableRow>
    </TableHeader>
  )
}

export default THead

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/header.tsx`:

```tsx
import React from 'react'
import { SidebarTrigger } from '../../../components/ui/sidebar'
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator
} from '../../../components/ui/breadcrumb'
import { Separator } from '../../../components/ui/separator'
import ReloadWithTimestamp from '../../../components/custom/global/last-reload'
import { useAuthStore } from '../../../stores/useAuthStore'
import { useParams } from 'react-router-dom'

type Submodule = 'explorer' | 'analyze' | 'configure'

const Header: React.FC = () => {
  const { organization } = useAuthStore()
  const { submodule } = useParams<{ submodule: Submodule }>() // Treat as a string to handle unmatched cases
  return (
    <header className="flex h-16 shrink-0 items-center gap-2">
      <div className="w-full flex items-center justify-between">
        <div className="flex items-center gap-2 px-4">
          <SidebarTrigger className="-ml-1" />
          <Separator orientation="vertical" className="mr-2 h-4" />
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem className="hidden md:block">
                <BreadcrumbLink href={`/${organization.toLowerCase()}/projects`}>
                  Projects
                </BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator className="hidden md:block" />
              <BreadcrumbItem>
                <BreadcrumbPage>{organization}</BreadcrumbPage>
              </BreadcrumbItem>
              <BreadcrumbSeparator className="hidden md:block" />
              <BreadcrumbItem>
                <BreadcrumbPage>
                  Log analysis |{' '}
                  {submodule ? submodule[0].toLocaleUpperCase() + submodule.slice(1) : ''}
                </BreadcrumbPage>
              </BreadcrumbItem>
              <BreadcrumbItem>
                <BreadcrumbPage></BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
        </div>
        <div>
          <ReloadWithTimestamp />
        </div>
      </div>
    </header>
  )
}

export default Header

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/analyze/index.tsx`:

```tsx
import ComingSoon from '../../../../pages/coming-soon'
import React from 'react'

const Analyze: React.FC = () => {
  return <ComingSoon />
}

export default Analyze

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/dashboard/log-analysis/congfigure/index.tsx`:

```tsx
import ComingSoon from '../../../../pages/coming-soon'
import React from 'react'

const Configure: React.FC = () => {
  return <ComingSoon />
}

export default Configure

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/coming-soon/index.tsx`:

```tsx
export default function ComingSoon() {
    return (
        <div className="flex flex-col min-h-[80dvh]">
            <main className="flex-1">
                <section className="w-full py-12 md:py-24 lg:py-32 xl:py-48">
                    <div className="container px-4 md:px-6">
                        <div className="flex flex-col items-center justify-center space-y-6 text-center">
                            <div className="space-y-2">
                                <h1 className="text-3xl font-bold tracking-tighter">Coming Soon</h1>
                                <p className="max-w-[600px] text-muted-foreground text-tiny">
                                    We're working hard to bring you an amazing new feature. Stay tuned for updates!
                                </p>
                            </div>
                        </div>
                    </div>
                </section>
            </main>
        </div>
    )
}
```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/login/index.tsx`:

```tsx
// src/pages/login/index.tsx
import React from 'react'
import { LoginForm } from './login-form'
import ChooseOrg from './choose-org'

const Login: React.FC = () => {
  return (
    <div className="flex flex-col min-h-[calc(100vh-7vh)] w-full items-center justify-center px-4 ">
      <LoginForm />
      <div className="my-4 flex items-center justify-between gap-2 w-full max-w-sm">
        <div className="bg-muted h-[1px] w-full"></div>
        <span>or</span>
        <div className="bg-muted h-[1px] w-full"></div>
      </div>
      <ChooseOrg />
    </div>
  )
}

export default Login

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/login/choose-org.tsx`:

```tsx
import { LOCAL_AXIOS_INSTANCE } from '../../axios/axios'
import { Card, CardContent, CardDescription, CardHeader } from '../../components/ui/card'
import Loader from '../../components/ui/loader'
import { toast } from '../../hooks/use-toast'
import { useAuthStore } from '../../stores/useAuthStore'
import { Organization } from '../../types/type'
import { useQuery } from '@tanstack/react-query'
import React from 'react'

const ChooseOrg: React.FC = () => {
  const { setIsLoggedIn, setOrganization } = useAuthStore()
  const getOrgList = async () => {
    try {
      const { data } = await LOCAL_AXIOS_INSTANCE.get('/org-list')
      return data.clients as Organization[]
    } catch (error: Error | any) {
      console.log(error)
      toast({ title: 'Server Error', description: "Could'nt fetch organization list." })
      return [] // Return an empty array in case of error
    }
  }
  const { isLoading, data } = useQuery({
    queryKey: ['org-list'],
    queryFn: () => getOrgList() as Promise<Organization[] | any>,
    refetchOnWindowFocus: false
  })

  const handleChooseOrg = (org: Organization) => {
    localStorage.setItem('cd_id', org.cd_id)
    localStorage.setItem('cd_secret', org.cd_secret)
    localStorage.setItem('organization_id', org.id)
    localStorage.setItem('organization_name', org.organization_name)
    setIsLoggedIn(true)
    setOrganization(org.organization_name)
  }

  return (
    <Card className="mx-auto max-w-sm w-full">
      <CardHeader className="py-3">
        <CardDescription>Choose saved organization.</CardDescription>
      </CardHeader>
      {isLoading ? (
        <Loader size="6" color="accent" speed="slow" />
      ) : data?.length === 0 ? (
        <p className="text-center my-4">No saved organization found.</p>
      ) : (
        <CardContent className="">
          {data &&
            data?.map((org: Organization) => (
              <div className="mb-2" key={org.id}>
                <p
                  className="text-xl inline no-underline hover:underline cursor-pointer"
                  onClick={() => handleChooseOrg(org)}
                >
                  {org.organization_name}
                </p>
              </div>
            ))}
        </CardContent>
      )}
    </Card>
  )
}

export default ChooseOrg

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/pages/login/login-form.tsx`:

```tsx
import React from 'react'
import { Button } from '../../components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card'
import { Input } from '../../components/ui/input'
import { Label } from '../../components/ui/label'
import CustomLink from '../../components/ui/link'
import { useLoginStore } from '../../stores/useLoginStore'
import { handleLogin } from '../../services/api/handle-login'
import { useNavigate } from 'react-router-dom'

export function LoginForm() {
  const { formData, errors, loading, setFormData, clearErrors } = useLoginStore()
  const navigate = useNavigate()
  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault()
    await handleLogin(navigate) // Call the extracted login handler
  }

  return (
    <Card className="mx-auto max-w-sm w-full">
      <CardHeader>
        <CardTitle className="text-2xl">Login</CardTitle>
        <CardDescription>Enter your client ID and client secret below to login.</CardDescription>
      </CardHeader>
      <CardContent>
        <form className="grid gap-4" onSubmit={handleSubmit}>
          <div className="grid gap-2">
            <Label htmlFor="client-id">Client ID</Label>
            <Input
              id="client-id"
              type="text"
              placeholder="5c133a93-8dd4-4958-847a-ae81a5e11743"
              value={formData.clientId}
              onChange={(e) => {
                setFormData('clientId', e.target.value)
                clearErrors('clientId')
              }}
            />
            {errors.clientId && <span className="text-sm text-red-500">{errors.clientId}</span>}
          </div>
          <div className="grid gap-2">
            <div className="flex items-center">
              <Label htmlFor="client-secret">Client Secret</Label>
              <CustomLink to="/forget-password" className="ml-auto inline-block text-sm underline">
                Lost your credentials?
              </CustomLink>
            </div>
            <Input
              id="client-secret"
              type="password"
              placeholder="2fb5be09-8dba-481c-aaaf-5efad1d0a59c"
              value={formData.clientSecret}
              onChange={(e) => {
                setFormData('clientSecret', e.target.value)
                clearErrors('clientSecret')
              }}
            />
            {errors.clientSecret && (
              <span className="text-sm text-red-500">{errors.clientSecret}</span>
            )}
          </div>
          <Button type="submit" className="w-full" loading={loading}>
            {loading ? 'Logging in...' : 'Login'}
          </Button>
        </form>
        <div className="mt-4 text-center text-sm">
          Don&apos;t have an account?{' '}
          <CustomLink to="/tenant-name/projects" className="underline">
            Create an account
          </CustomLink>
        </div>
      </CardContent>
    </Card>
  )
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/axios/axios.ts`:

```ts
import axios, { AxiosInstance } from 'axios'

const CLOUD_BASE_URL = 'https://cadmium.softwarescompound.in/'
const LOCAL_BASE_URL = 'http://localhost:6969/api'

export const CLOUD_AXIOS_INSTANCE: AxiosInstance = axios.create({
  baseURL: CLOUD_BASE_URL
})

export const LOCAL_AXIOS_INSTANCE: AxiosInstance = axios.create({
  baseURL: LOCAL_BASE_URL
})

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/route-protector/public-route-protector.tsx`:

```tsx
import { LOCAL_AXIOS_INSTANCE } from '../../axios/axios'
import { useAuthStore } from '../../stores/useAuthStore'
import React, { ReactNode, useEffect } from 'react'
import { useLocation, Navigate } from 'react-router-dom'

type Props = {
  children: ReactNode
}

/**
 * PublicRouteProtector is a React functional component that serves as a route
 * guard for public routes. It checks whether a user is authenticated based on
 * tokens stored in local storage and redirects authenticated users to a
 * specified projects page. If the user is not authenticated, it renders the
 * child components, which could be login-related components.
 *
 * The component uses Zustand to manage authentication state and performs
 * validation requests using Axios. If the user's tokens are valid, it updates
 * the authentication state; otherwise, it clears the stored tokens.
 *
 * Props:
 * - children: ReactNode - The child components to render if the user is not
 *   authenticated.
 *
 * Returns:
 * - A loading indicator if validation is in progress.
 * - A redirection to the projects page if the user is authenticated.
 * - The child components if the user is not authenticated.
 */
const PublicRouteProtector: React.FC<Props> = ({ children }) => {
  const { isLoggedIn, setIsLoggedIn, setOrganization, organization } = useAuthStore() // Zustand state for auth
  const [loading, setLoading] = React.useState(false)
  const location = useLocation()
  const validate = async (cd_id: string, cd_secret: string) => {
    try {
      setLoading(true)
      const res = await LOCAL_AXIOS_INSTANCE.post('/validation', { cd_id, cd_secret })
      if (res.data.isValid) {
        setIsLoggedIn(true)
        setOrganization(res.data.return.organization_name)
        localStorage.setItem('organization_name', res.data.return.organization_name)
      }
    } catch (error: Error | any) {
      localStorage.removeItem('cd_id')
      localStorage.removeItem('cd_secret')
      setIsLoggedIn(false)
      console.log(error)
    } finally {
      setLoading(false)
    }
  }
  useEffect(() => {
    if (!isLoggedIn) {
      const cd_id = localStorage.getItem('cd_id')
      const cd_secret = localStorage.getItem('cd_secret')
      if (cd_id && cd_secret) {
        void validate(cd_id, cd_secret)
      }
    }
  }, [isLoggedIn, setIsLoggedIn])

  // If the user is logged in, redirect to the /${org_name}/projects page
  if (isLoggedIn) {
    return <Navigate to={`/${organization}/projects`} state={{ from: location }} replace />
  }

  if (loading) {
    return (
      <div className="">
        <p className="text-center">Loading...</p>
      </div>
    )
  }
  // Otherwise, render the children (e.g., LoginPage)
  return children
}

export default PublicRouteProtector

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/route-protector/private-route-protector.tsx`:

```tsx
import { LOCAL_AXIOS_INSTANCE } from '../../axios/axios'
import { useAuthStore } from '../../stores/useAuthStore'
import React, { ReactNode, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'

type Props = {
  children: ReactNode
}

/**
 * PrivateRouteProtector is a React functional component that serves as a route
 * guard for protected routes. It checks whether a user is authenticated based on
 * tokens stored in local storage and redirects unauthenticated users to a
 * specified login page. If the user is authenticated, it renders the child
 * components, which could be pages or components.
 *
 * The component uses Zustand to manage authentication state and performs
 * validation requests using Axios. If the user's tokens are valid, it updates
 * the authentication state; otherwise, it clears the stored tokens and
 * redirects the user to the login page.
 *
 * Props:
 * - children: ReactNode - The child components to render if the user is
 *   authenticated.
 *
 * Returns:
 * - A loading indicator if validation is in progress.
 * - A redirection to the login page if the user is unauthenticated.
 * - The child components if the user is authenticated.
 */
const PrivateRouteProtector: React.FC<Props> = ({ children }) => {
  const { setIsLoggedIn, setOrganization } = useAuthStore() // Zustand state for auth
  const [loading, setLoading] = React.useState(false)
  const location = useLocation()
  const navigate = useNavigate()
  const validate = async (cd_id: string, cd_secret: string) => {
    try {
      setLoading(true)
      const res = await LOCAL_AXIOS_INSTANCE.post('/validation', { cd_id, cd_secret })
      if (res.data.isValid) {
        setIsLoggedIn(true)
        setOrganization(res.data.return.organization_name)
        localStorage.setItem('organization_name', res.data.return.organization_name)
      }
    } catch (error: Error | any) {
      localStorage.clear()
      setIsLoggedIn(false)
      setOrganization('')
      navigate('/login', { state: { from: location }, replace: true })
      setIsLoggedIn(false)
      console.log(error)
    } finally {
      setLoading(false)
    }
  }
  useEffect(() => {
    const cd_id = localStorage.getItem('cd_id')
    const cd_secret = localStorage.getItem('cd_secret')
    if (cd_id && cd_secret) {
      void validate(cd_id, cd_secret)
    } else {
      navigate('/login', { state: { from: location }, replace: true })
      localStorage.clear()
    }
  }, [])

  if (loading) {
    return (
      <div className="">
        <p className="text-center">Loading...</p>
      </div>
    )
  }
  // Otherwise, render the children (e.g., LoginPage)
  return children
}

export default PrivateRouteProtector

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/api/create-project.ts`:

```ts
/**
 * @file create-project.ts
 * @description Contains the API call logic for creating a project.
 */

import { toast } from '../../hooks/use-toast'
import { useProjectCreateStore } from '../../stores/useProjectCreateStore'
import { useProjectListStore } from '../../stores/useProjectListStore'
import { CLOUD_AXIOS_INSTANCE, LOCAL_AXIOS_INSTANCE } from '../../axios/axios'

/**
 * Sends a request to create a new project.
 * @returns {Promise<Object>} A promise that resolves with the API response.
 * @throws {Error} Throws an error if the API call fails.
 * @example
 * const response = await createProject();
 * console.log(response);
 */
export const createProject = async (): Promise<object> => {
  const { name, description, setOpenModal, setLoading } = useProjectCreateStore.getState()
  const { projectList, setProjectList } = useProjectListStore.getState()
  const cd_id = localStorage.getItem('cd_id') ?? ''
  const cd_secret = localStorage.getItem('cd_secret') ?? ''
  const organization_id = localStorage.getItem('organization_id') ?? ''
  try {
    setLoading(true)
    const response = await CLOUD_AXIOS_INSTANCE.post(
      '/applications',
      {
        application_name: name,
        description: description
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'CD-ID': cd_id,
          'CD-Secret': cd_secret
        }
      }
    )

    if (response.status != 200) {
      throw new Error('Failed to create project')
    }

    const project_id = response.data.application_id
    const body = {
      project_id: project_id,
      organization_id: organization_id,
      project_name: name,
      project_description: description
    }
    await LOCAL_AXIOS_INSTANCE.post(
      `/project`,
      {
        ...body
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'CD-ID': cd_id,
          'CD-Secret': cd_secret
        }
      }
    )
    setProjectList([
      ...projectList,
      {
        id: project_id,
        name: name,
        description: description,
        errorCount: 0,
        codeSuggestionCount: 0,
        totalErrorResolved: 0,
        isConnectedToRemote: false,
        remoteUrl: ''
      }
    ])
    setOpenModal(false)
    toast({
      title: 'Success',
      description:
        'Project created successfully. You can now connect your project to your remote repository.'
    })
    return response.data
  } catch (error) {
    console.error('Error creating project:', error)
    throw error
  } finally {
    setLoading(false)
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/api/fetch-projects--list.ts`:

```ts
import { CLOUD_AXIOS_INSTANCE, LOCAL_AXIOS_INSTANCE } from '../../axios/axios'
import { useProjectListStore } from '../../stores/useProjectListStore'
import { ProjectList } from '../../types/type'

export const fetchProjectList = async (): Promise<ProjectList | undefined> => {
  const { setLoading, setProjectList } = useProjectListStore.getState()
  const cd_id = localStorage.getItem('cd_id') ?? ''
  const cd_secret = localStorage.getItem('cd_secret') ?? ''
  try {
    setLoading(true)
    const response = await CLOUD_AXIOS_INSTANCE.get('/applications', {
      headers: {
        'Content-Type': 'application/json',
        'CD-ID': cd_id,
        'CD-Secret': cd_secret
      }
    })
    const projects = response.data
    const projectList: ProjectList = projects.map((project: any) => ({
      id: project._id.$oid,
      name: project.application_name,
      description: project.description,
      errorCount: project.error_count ?? 0,
      codeSuggestionCount: project.code_suggestion_count ?? 0,
      totalErrorResolved: project.total_error_resolved ?? 0
    }))
    const organization_id = localStorage.getItem('organization_id') ?? ''
    const projectListWithRemoteUrl = await LOCAL_AXIOS_INSTANCE.post(
      `/project/check_remote_link`,
      { projectList, organization_id },
      {
        headers: {
          'Content-Type': 'application/json',
          'CD-ID': cd_id,
          'CD-Secret': cd_secret
        }
      }
    )
    // console.log(projectListWithRemoteUrl.data.list)
    setProjectList(projectListWithRemoteUrl.data.list)
    return projectList
  } catch (error) {
    console.error('Error fetching projects:', error)
    return undefined
  } finally {
    setLoading(false)
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/api/handle-logout.ts`:

```ts
import { useAuthStore } from '../../stores/useAuthStore'
import { NavigateFunction } from 'react-router-dom'

/**
 * Logs the user out of the application by clearing the local storage
 * and setting the authentication state to false. Then redirects
 * the user to the login page.
 *
 * @param navigate - The navigate function from react-router-dom.
 */
export const handleLogout = (navigate: NavigateFunction) => {
  const { setIsLoggedIn, setOrganization } = useAuthStore.getState() // Zustand state for auth

  // Clear the local storage
  localStorage.clear()

  // Set the authentication state to false
  setIsLoggedIn(false)

  // Set the organization to an empty string
  setOrganization('')

  // Redirect the user to the login page
  navigate('/login', { replace: true })
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/api/fetch-log-table-data.ts`:

```ts
import { CLOUD_AXIOS_INSTANCE } from '../../axios/axios'
import { useLogStore } from '../../stores/useLogStore'
import { LogTableEntry, RagResponse } from '../../types/type'
/**
 * Fetches the log table data for a given application.
 *
 * @param {string} cd_id - The ID of the Cadmium instance.
 * @param {string} cd_secret - The secret of the Cadmium instance.
 * @param {string} application_id - The ID of the application.
 * @returns {Promise<LogTableEntry[] | null>} A promise resolving to an array of log table entries or null if there was an error.
 */
export const fetchLogTableData = async (
  application_id: string
): Promise<LogTableEntry[] | null> => {
  const { setLoading, limit, page, appendTableDataToBottom } = useLogStore.getState() // Zustand state for log
  const cd_id = localStorage.getItem('cd_id') ?? ''
  const cd_secret = localStorage.getItem('cd_secret') ?? ''
  const headers = {
    'Content-Type': 'application/json',
    'CD-ID': cd_id,
    'CD-Secret': cd_secret,
    'Application-ID': application_id
  }

  const query = `
    query GetLogs($page: Int, $limit: Int) {
        logs(page: $page, limit: $limit) {
            id
            organizationId
            applicationId
            error
            url
            method
            createdAt
            updatedAt
            ragInference
            traceback
        }
    }
  `

  const variables = {
    page: page,
    limit: limit
  }

  try {
    setLoading(true)
    const response = await CLOUD_AXIOS_INSTANCE.post('/graphql', { query, variables }, { headers })
    if (response.data.errors) {
      console.error('Error fetching logs:', response.data.errors)
      return null
    }

    // Parse ragInference for each log entry
    const logs: LogTableEntry[] = response.data.data.logs.map((log: any) => ({
      ...log,
      isStreaming: false,
      ragInference: log.ragInference ? parseRagInference(log.ragInference) : null
    }))
    appendTableDataToBottom(logs)
    return logs
  } catch (error) {
    console.error('Error during the API request:', error)
    return null
  } finally {
    setLoading(false)
  }
}

/**
 * Parses the ragInference string into a RagResponse object.
 *
 * @param {string} ragInference - The string to parse.
 * @returns {RagResponse | null} The parsed RagResponse object or null if there was an error.
 */
const parseRagInference = (ragInference: string): RagResponse | null => {
  try {
    return JSON.parse(ragInference) as RagResponse
  } catch (error) {
    console.error('Failed to parse ragInference:', error)
    return null
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/api/handle-login.ts`:

```ts
import { toast } from '../../hooks/use-toast'
import { LOCAL_AXIOS_INSTANCE } from '../../axios/axios'
import { useLoginStore } from '../../stores/useLoginStore'
import { validateLoginForm } from '../validation/login-form'
import { useAuthStore } from '../../stores/useAuthStore'
import { NavigateFunction } from 'react-router-dom'

/**
 * Handles the login process by sending a POST request to the local server
 * and handles the response.
 *
 * @param navigate - The navigate function from react-router-dom.
 * @returns A promise that resolves when the login process is complete.
 */
export const handleLogin = async (navigate: NavigateFunction): Promise<void> => {
  const { setIsLoggedIn, setOrganization } = useAuthStore.getState() // Zustand state for auth
  const { formData, setErrors, setLoading } = useLoginStore.getState()
  const validationErrors = validateLoginForm(formData)

  if (Object.keys(validationErrors).length > 0) {
    setErrors(validationErrors)
    return
  }

  const { clientId, clientSecret } = formData

  try {
    setLoading(true) // Start loading
    const resp = await LOCAL_AXIOS_INSTANCE.post('/login', { clientId, clientSecret })
    if (resp.status === 200) {
      // Store credentials in local storage
      localStorage.setItem('cd_id', clientId)
      localStorage.setItem('cd_secret', clientSecret)
      localStorage.setItem('organization_id', resp.data.organization_id)
      localStorage.setItem('organization_name', resp.data.organization_name)
      setOrganization(resp.data.organization_name)
      navigate(`/${resp.data.organization_name}/projects`, { replace: true }) // Use the passed navigate function
      setIsLoggedIn(true)
    }
  } catch (error: any) {
    console.error('[Error] ==>>', error)
    localStorage.clear()

    // Display appropriate error messages
    if (error.response?.status === 401) {
      toast({ title: 'Unauthorized', description: 'Invalid client ID or secret.' })
    } else if (error.response?.status === 400) {
      toast({
        title: 'Client error',
        description: 'Credentials already exist. Select an organization from the list.'
      })
    } else {
      toast({ title: 'Error', description: error.message || 'Unknown error occurred.' })
    }
  } finally {
    setLoading(false) // End loading
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/validation/login-form.ts`:

```ts
import { LoginFormData, LoginFormErrors } from '../../types/type'

/**
 * Validates the given form data and returns an object containing any validation errors.
 *
 * @param formData - The form data to validate.
 * @returns An object containing validation errors, if any.
 */
export const validateLoginForm = (formData: LoginFormData): LoginFormErrors => {
  const errors: LoginFormErrors = {}
  if (!formData.clientId.trim()) {
    errors.clientId = 'Client ID is required.'
  }
  if (!formData.clientSecret.trim()) {
    errors.clientSecret = 'Client Secret is required.'
  }
  return errors
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/services/validation/create-project.ts`:

```ts
/**
 * @file create-project.ts
 * @description Contains the validation logic for the "Add Project" form.
 */

import { useProjectCreateStore } from '../../stores/useProjectCreateStore'

/**
 * Validates the Add Project form input.
 * If catch any error, set the error message in the store and return false.
 * @returns {boolean} An boolean true if no errors were found and false if errors were found.
 * @example
 * const errors = validateProjectForm();
 * console.log(errors); // `true` if no errors
 * console.log(errors); // `false` if errors
 */
export const validateProjectForm = (): boolean => {
  const { name, setErrors } = useProjectCreateStore.getState()

  if (!name.trim()) {
    setErrors({ name: 'Project name is required.' })
    return false
  }

  return true
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/renderer/src/socket/socket.ts`:

```ts
type MessageListener = (message: unknown) => void

let socket: WebSocket | null = null
let isConnected = false
const messageListeners: MessageListener[] = []
let retryInterval = 1000 // Initial retry interval in milliseconds
const maxRetryInterval = 60000 // Maximum retry interval

/**
 * Connect to the WebSocket server.
 * @param url - The WebSocket server URL.
 */
export const connectWebSocket = (url: string): void => {
  if (socket) return // Prevent multiple connections

  socket = new WebSocket(url)

  socket.onopen = (): void => {
    console.log('WebSocket connection established!')
    isConnected = true
    retryInterval = 1000 // Reset retry interval on successful connection
    // startKeepAlive(); // Start sending keep-alive pings
  }

  socket.onmessage = (event: MessageEvent): void => {
    const chunk = JSON.parse(event.data)
    // Notify all listeners of the new message
    messageListeners.forEach((listener) => listener(chunk))
  }

  socket.onclose = (): void => {
    console.log('WebSocket connection closed.')
    isConnected = false
    socket = null
    retryConnection(url) // Attempt reconnection
  }

  socket.onerror = (error: Event): void => {
    console.error('WebSocket error:', error)
    if (!isConnected) retryConnection(url) // Attempt reconnection on error
  }
}

/**
 * Reconnect to the WebSocket server with exponential backoff.
 * @param url - The WebSocket server URL.
 */
const retryConnection = (url: string): void => {
  console.log(`Retrying connection in ${retryInterval / 1000} seconds...`)
  setTimeout(() => {
    console.log('Attempting to reconnect to WebSocket...')
    connectWebSocket(url)
    retryInterval = Math.min(maxRetryInterval, retryInterval * 2) // Exponential backoff
  }, retryInterval)
}

/**
 * Send a message through the WebSocket connection.
 * @param message - The message to send.
 */
export const sendMessage = (message: object): void => {
  if (socket && isConnected) {
    socket.send(JSON.stringify(message))
  } else {
    console.error('WebSocket is not connected!')
  }
}

/**
 * Add a listener to handle incoming WebSocket messages.
 * @param listener - A function to handle messages.
 */
export const addMessageListener = (listener: MessageListener): void => {
  messageListeners.push(listener)
}

/**
 * Remove a listener for WebSocket messages.
 * @param listener - The listener function to remove.
 */
export const removeMessageListener = (listener: MessageListener): void => {
  const index = messageListeners.indexOf(listener)
  if (index > -1) {
    messageListeners.splice(index, 1)
  }
}

/**
 * Disconnect the WebSocket connection.
 */
export const disconnectWebSocket = (): void => {
  if (socket) {
    socket.close()
    socket = null
    isConnected = false
  }
}

/**
 * Periodically send a ping message to the server to keep the connection alive.
 */
// const startKeepAlive = (): void => {
//     if (!socket || !isConnected) return;

//     const intervalId = setInterval(() => {
//         if (socket && isConnected) {
//             socket.send(JSON.stringify({ type: "ping", timestamp: Date.now() }));
//         } else {
//             clearInterval(intervalId); // Stop keep-alive when disconnected
//         }
//     }, 30000); // Send ping every 30 seconds
// };

// Initialize WebSocket connection
connectWebSocket('ws://localhost:6970/ws/electron')

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/types/types.ts`:

```ts
// src/preload/types.ts
export type IPCChannels = 'toMain' | 'fromMain'

export interface ToMainPayload {
  message: string
}

export interface FromMainPayload {
  response: string
}

// ** ORGANIZATION TYPE **
export interface Organization {
  id: string
  cd_id: string
  cd_secret: string
  created_at: string
  organization_id: string
  organization_name: string
}

// ** PROJECT TYPE **
export interface Project {
  id: string
  name: string
  description: string
  project_id: string
  organization_id: string
  is_connected_to_remote: boolean
  remote_url: string
}

export type ProjectList = Project[]

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/config/axios.ts`:

```ts
import axios, { AxiosInstance } from 'axios'

const CLOUD_BASE_URL = 'https://cadmium.softwarescompound.in/'

export const CLOUD_AXIOS_INSTANCE: AxiosInstance = axios.create({
  baseURL: CLOUD_BASE_URL
})

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/config/sqlite.ts`:

```ts
import Database, { Database as DBType } from 'better-sqlite3'
import path from 'path'
import fs from 'fs'

const DB_PATH = path.resolve(__dirname, '../../db/cadmium.db')

// Ensure the database directory exists
function ensureDBDirectoryExists() {
  const dir = path.dirname(DB_PATH)
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true })
  }
}

// Locally define an interface that extends the external DB type
export interface BetterSqliteDatabase extends DBType {}
// Open the SQLite database
export function openDB(): BetterSqliteDatabase {
  ensureDBDirectoryExists()
  return new Database(DB_PATH, { verbose: console.log }) // `verbose` logs all queries
}
// Initialize the database and create the table
export function initializeDB() {
  try {
    const db = openDB()
    console.log('******************************************************')
    console.log('**************Initializing database... ***************')
    console.log('******************************************************')
    db.exec(`
            CREATE TABLE IF NOT EXISTS organization_detail (
                id TEXT PRIMARY KEY UNIQUE,
                cd_id TEXT NOT NULL UNIQUE,
                cd_secret TEXT NOT NULL UNIQUE,
                organization_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS projects (
                project_id TEXT NOT NULL UNIQUE PRIMARY KEY,
                name TEXT NOT NULL,
                description TEXT,
                organization_id INTEGER NOT NULL,
                is_connected_to_remote BOOLEAN DEFAULT 0,
                remote_url TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (organization_id) REFERENCES organization_detail (id)
            );
        `)

    // applyMigrations();
    console.log('Database initialized.')
  } catch (error) {
    console.error('Error initializing database:', error)
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/config/index.ts`:

```ts
// src/config/index.ts
import env from './env'

export default {
  port: env.PORT || 6969,
  cors: {
    origin: env.CORS_ORIGIN || 'http://localhost:6968',
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    credentials: true
  }
  // Add other configurations as needed
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/config/env.ts`:

```ts
// src/config/env.ts
import dotenv from 'dotenv'
dotenv.config()

const env = {
  PORT: process.env.EXPRESS_PORT,
  CORS_ORIGIN: process.env.CORS_ORIGIN
  // Add other environment variables here
}

export default env

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/middlewares/validation.ts`:

```ts
import { Request, Response, NextFunction } from 'express'
import { openDB } from '../config/sqlite'
import { Organization } from '../../types/types'

declare global {
  namespace Express {
    interface Request {
      organization?: {
        id: string
        name: string
      }
    }
  }
}

// Middleware function
const validateHeadersMiddleware = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  console.log('*************')
  console.log('*************')
  console.log('req.body ===>>', req.body, '\n\n\n\n')
  const cdId = req.headers['cd-id'] as string | undefined
  const cdSecret = req.headers['cd-secret'] as string | undefined

  // Validate presence of headers
  if (!cdId || !cdSecret) {
    res.status(400).json({
      error: 'CD-ID and CD-Secret headers are required.'
    })
    return
  }

  try {
    // Open the database connection
    const db = openDB()

    // Query to validate the headers
    const query = `
            SELECT id, organization_name
            FROM organization_detail
            WHERE cd_id = ? AND cd_secret = ?;
        `
    const organization = db.prepare(query).get(cdId, cdSecret) as Organization

    if (!organization) {
      // Invalid credentials
      res.status(401).json({
        error: 'Invalid CD-ID or CD-Secret.'
      })
      return
    }

    // Attach organization info to the request object
    req.organization = {
      id: organization.id,
      name: organization.organization_name
    }

    // Proceed to the next middleware
    next()
  } catch (error) {
    console.error('Error validating headers:', error)
    res.status(500).json({ error: 'Internal server error.' })
    return
  }
}

export default validateHeadersMiddleware

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/middlewares/cors-option.ts`:

```ts
// src/middlewares/corsOptions.ts
import { CorsOptions } from 'cors'
import config from '../config'

const corsOptions: CorsOptions = {
  origin: config.cors.origin,
  methods: config.cors.methods,
  credentials: config.cors.credentials
}

export default corsOptions

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/middlewares/logging.ts`:

```ts
// src/middlewares/errorHandler.ts
import { Request, Response, NextFunction } from 'express'
import logger from '../utils/logger'

const log = (err: any, req: Request, res: Response, next: NextFunction) => {
  logger.error(err.stack)
  next(err)
}

export default log

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/utils/logger.ts`:

```ts
// src/utils/logger.ts
import { createLogger, format, transports } from 'winston'

const logger = createLogger({
  level: 'info',
  format: format.combine(
    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    format.printf(({ timestamp, level, message }) => `${timestamp} [${level}]: ${message}`)
  ),
  transports: [
    new transports.Console(),
    new transports.File({ filename: 'logs/error.log', level: 'error' }),
    new transports.File({ filename: 'logs/combined.log' })
  ]
})

export default logger

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/utils/check-folder-exists.ts`:

```ts
import * as fs from 'fs'
import * as path from 'path'

export class FolderChecker {
  /**
   * Checks if a folder with the given ID exists in the target-codebases directory.
   * @param id - The ID to check for.
   * @returns {boolean} - True if the folder exists, otherwise false.
   */
  static doesFolderExist(id: string): boolean {
    // Resolve the project path based on the given ID
    const PROJECT_PATH = path.resolve(__dirname, `../../target-codebases/${id}`)

    try {
      // Check if the path exists and is a directory
      return fs.existsSync(PROJECT_PATH) && fs.lstatSync(PROJECT_PATH).isDirectory()
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error(`Error checking folder existence: ${error.message}`)
      } else {
        console.error('Unknown error occurred while checking folder existence')
      }
      return false
    }
  }

  /**
   * Checks if there is at least one subdirectory inside /target-codebases/{id}.
   * @param {string} id - The ID that will be used to build the directory path.
   * @returns {boolean} - True if there's at least one subfolder, otherwise false.
   */
  static doesFolderWithinFolderExist(id: string): boolean {
    const PROJECT_PATH = path.resolve(__dirname, `../../target-codebases/${id}`)

    try {
      // First, check that the project path exists and is a directory
      if (!fs.existsSync(PROJECT_PATH) || !fs.lstatSync(PROJECT_PATH).isDirectory()) {
        return false
      }

      // Read all entries (files/folders) within the directory
      const entries = fs.readdirSync(PROJECT_PATH)

      // Return true if at least one entry is itself a directory
      return entries.some((entry) => {
        const entryPath = path.join(PROJECT_PATH, entry)
        return fs.lstatSync(entryPath).isDirectory()
      })
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error(`Error checking if any folder exists: ${error.message}`)
      } else {
        console.error('Unknown error occurred while checking folder existence')
      }
      return false
    }
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/models/projectModel.ts`:

```ts
import { openDB } from '../config/sqlite'

export const ProjectModel = {
  createProject: (
    name: string,
    description: string,
    project_id: string,
    organization_id: string
  ) => {
    const db = openDB()
    const stmt = db.prepare(`
            INSERT INTO projects (name, description, project_id, organization_id)
            VALUES (?, ?, ?, ?)
        `)
    // console.log('project_id ===>>', project_id)
    return stmt.run(name, description, project_id, organization_id)
  },

  getProjectById: (id: string): any => {
    const db = openDB()
    const stmt = db.prepare(`
            SELECT * FROM projects WHERE project_id = ?
        `)
    // console.log('stmt ===>>', stmt)
    return stmt.get(id)
  },

  getAllProjects: (): any[] => {
    const db = openDB()
    const stmt = db.prepare(`
            SELECT * FROM projects
        `)
    return stmt.all()
  },

  getProjectsByOrganization: (organization_id: number): any[] => {
    const db = openDB()
    const stmt = db.prepare(`
            SELECT * FROM projects WHERE organization_id = ?
        `)
    return stmt.all(organization_id)
  },

  deleteProject: (id: number): void => {
    const db = openDB()
    const stmt = db.prepare(`
            DELETE FROM projects WHERE project_id = ?
        `)
    stmt.run(id)
  },
  updateProjectById: (
    id: number,
    name: string,
    description: string,
    is_connected_to_remote: 0 | 1
  ): any => {
    const db = openDB()
    const stmt = db.prepare(`
            UPDATE projects
            SET name = ?, description = ?, is_connected_to_remote = ?
            WHERE project_id = ?
        `)
    return stmt.run(name, description, id, is_connected_to_remote)
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/models/organizationModel.ts`:

```ts
import { Organization } from '../../types/types'
import { openDB } from '../config/sqlite'

export const OrganizationModel = {
  createOrganization: (
    organization_id: string,
    cd_id: string,
    cd_secret: string,
    organization_name: string
  ) => {
    const db = openDB()
    const stmt = db.prepare(`
            INSERT INTO organization_detail (id, cd_id, cd_secret, organization_name)
            VALUES (?, ?, ?, ?)
        `)
    return stmt.run(organization_id, cd_id, cd_secret, organization_name)
  },

  getOrganizationById: (id: string) => {
    const db = openDB()
    const stmt = db.prepare(`
            SELECT * FROM organization_detail WHERE organization_id = ?
        `)
    return stmt.get(id) as Organization
  },

  getAllOrganizations: () => {
    const db = openDB()
    const stmt = db.prepare(`
            SELECT * FROM organization_detail
        `)
    return stmt.all() as Organization[]
  },

  deleteOrganization: (id: string) => {
    const db = openDB()
    const stmt = db.prepare(`
            DELETE FROM organization_detail WHERE organization_id = ?
        `)
    return stmt.run(id)
  }
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/controllers/handle-check-project-remote-link.ts`:

```ts
import { openDB } from '../config/sqlite'
import { Request, Response } from 'express'
import { ProjectModel } from '../models/projectModel'
import path from 'path'
import fs from 'fs'
import { FolderChecker } from '../utils/check-folder-exists'

// Controller to handle fetching clients
const handleCheckProjectRemoteLink = async (req: Request, res: Response): Promise<void> => {
  console.log('*************')
  console.log('*************')
  console.log('req.body ===>>', req.body, '\n\n\n\n')
  try {
    // Open the SQLite database
    const list = req.body.projectList as any[]
    const organization_id = req.body.organization_id
    openDB()

    if (!organization_id) {
      res.status(400).json({ error: 'organization_id is required.' })
      return
    }

    if (!list || list.length === 0) {
      res.status(400).json({ error: 'Need to create project first' })
      return
    }

    console.log('*************all check pass ************** \n\n\n\n')
    const newList = list.map((item: any) => {
      if (!item.id) {
        return {
          ...item,
          remoteUrl: '',
          isConnectedToRemote: false
        }
      }
      console.log('*************')
      console.log('*************')
      console.log('************* loop first iteration ************** \n\n\n\n')
      console.log('item ===>>', item.id)
      const projectDetail = ProjectModel.getProjectById(item.id)
      console.log('#############')
      console.log('#############')
      console.log('projectDetail ===>>', projectDetail, '\n\n\n\n')
      console.log('#############')
      console.log('#############')
      console.log('************* check project exixts ************** \n\n\n\n')
      console.log('doesFolderExist(item.id) ===>>', item.id, FolderChecker.doesFolderExist(item.id))
      // Check if the project exists in the database
      if (projectDetail && FolderChecker.doesFolderExist(item.id)) {
        if (FolderChecker.doesFolderWithinFolderExist(item.id)) {
          ProjectModel.updateProjectById(item.id, item.name, item.description, 1)
          return {
            ...item,
            remoteUrl: projectDetail.remote_url,
            isConnectedToRemote: true
          }
        } else {
          ProjectModel.updateProjectById(item.id, item.name, item.description, 0)
          return {
            ...item,
            remoteUrl: projectDetail.remote_url,
            isConnectedToRemote: false
          }
        }
      } else {
        console.log('************* **************')
        console.log('************* **************')
        console.log('************* **************')
        console.log('************* create new project ************** \n\n\n\n')
        // Create a new project if it doesn't exist
        const { name, description, id } = item
        ProjectModel.createProject(name, description, id, organization_id)
        const PROJECT_PATH = path.resolve(__dirname, `../../target-codebases/${id}`)
        if (!fs.existsSync(PROJECT_PATH)) {
          fs.mkdirSync(PROJECT_PATH, { recursive: true })
        }
        return {
          ...item,
          remoteUrl: '',
          isConnectedToRemote: false
        }
      }
    })
    res.status(200).json({ list: newList })
  } catch (error: any) {
    console.error('[Error] =====>>')
    console.error('[Error] =====>>')
    console.error('[Error] =====>>', error)

    // Handle database errors
    res.status(500).json({
      error: 'Failed to retrieve clients.',
      details: error.message || 'An unexpected error occurred.'
    })
  }
}

export default handleCheckProjectRemoteLink

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/controllers/handle-get-org-list.ts`:

```ts
// src/server/controllers/get-clients.ts

import { Organization } from '../../types/types'
import { Request, Response } from 'express'
import { OrganizationModel } from '../models/organizationModel'

// Controller to handle fetching clients
const handleGetOrgList = async (_req: Request, res: Response): Promise<void> => {
  try {
    const clients: Organization[] = OrganizationModel.getAllOrganizations()
    console.log('Organization List===>> ', clients)
    // Respond with the list of clients
    res.status(200).json({ clients })
  } catch (error: any) {
    console.error('[Error] =====>>', error)

    // Handle database errors
    res.status(500).json({
      error: 'Failed to retrieve clients.',
      details: error.message || 'An unexpected error occurred.'
    })
  }
}

export default handleGetOrgList

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/controllers/handle-validate-user.ts`:

```ts
import { openDB } from '../config/sqlite'
import { Request, Response } from 'express'

const validateCredentials = async (req: Request, res: Response): Promise<void> => {
  try {
    // Extract credentials from the request body
    const { cd_id, cd_secret } = req.body

    if (!cd_id || !cd_secret) {
      res.status(400).json({ error: 'cd_id and cd_secret are required.' })
      return
    }

    // Open the SQLite database and query for the credentials
    const db = openDB()
    const queryStatement = db.prepare(
      `SELECT * FROM organization_detail WHERE cd_id = ? AND cd_secret = ?`
    )

    const result = queryStatement.get(cd_id, cd_secret)

    if (result) {
      // Credentials are valid
      res.status(200).json({ isValid: true, return: result })
    } else {
      // Credentials are invalid
      res.status(401).json({ isValid: false })
    }
  } catch (error: any) {
    console.error('Validation Error:', error.message)

    // Default to a 500 Internal Server Error for other cases
    res.status(500).json({
      error: error.message || 'An unexpected error occurred.'
    })
  }
}

export default validateCredentials

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/controllers/handle-create-project.ts`:

```ts
// src/server/controllers/get-clients.ts

import { Request, Response } from 'express'
import { ProjectModel } from '../models/projectModel'
import path from 'path'
import fs from 'fs'

// Controller to handle fetching clients
const handleCreateProject = async (req: Request, res: Response): Promise<void> => {
  console.log('*************')
  console.log('*************')
  console.log('req.body ===>>', req.body, '\n\n\n\n')
  try {
    const { project_name, project_description, project_id, organization_id } = req.body
    if (!project_name || !project_id || !organization_id) {
      res.status(400).json({ error: 'project_name, project_id and organization_id are required.' })
      return
    }
    const project = ProjectModel.createProject(
      project_name,
      project_description ?? null,
      project_id,
      organization_id
    )

    if (!project) {
      res.status(500).json({ error: 'Failed to create project.' })
      return
    }

    const PROJECT_PATH = path.resolve(__dirname, `../../target-codebases/${project_id}`)
    if (!fs.existsSync(PROJECT_PATH)) {
      fs.mkdirSync(PROJECT_PATH, { recursive: true })
    }

    res.status(200).json({
      name: project_name,
      description: project_description,
      project_id: project_id,
      organization_id: organization_id,
      is_connected_to_remote: false,
      remote_url: ''
    })
  } catch (error: any) {
    console.error('[Error] =====>>', error)

    // Handle database errors
    res.status(500).json({
      error: error.message || 'Failed to create project.',
      details: error || 'An unexpected error occurred.'
    })
  }
}

export default handleCreateProject

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/controllers/handle-login.ts`:

```ts
import { CLOUD_AXIOS_INSTANCE } from '../config/axios'
import { Request, Response } from 'express'
import { OrganizationModel } from '../models/organizationModel'

const handleLogin = async (req: Request, res: Response): Promise<void> => {
  try {
    // Parse the incoming request body
    const body = req.body
    console.log('Request Body:', body)

    if (!body.clientId || !body.clientSecret) {
      res.status(400).json({ error: 'Client ID and Client Secret are required.' })
      return // Ensure no further execution
    }

    // Fetch data from the external API
    await CLOUD_AXIOS_INSTANCE.get('/applications', {
      headers: {
        'Content-Type': 'application/json',
        'CD-ID': body.clientId,
        'CD-Secret': body.clientSecret
      }
    })
    const resp2 = await CLOUD_AXIOS_INSTANCE.get('/organizations', {
      headers: {
        'Content-Type': 'application/json',
        'CD-ID': body.clientId,
        'CD-Secret': body.clientSecret
      }
    })
    const { id: organization_id, org_name: organization_name } = resp2.data
    try {
      // Open the SQLite database and insert the client credentials
      OrganizationModel.createOrganization(
        organization_id,
        body.clientId,
        body.clientSecret,
        organization_name
      )
      console.log(
        'Client credentials successfully inserted into the database.',
        body.clientId,
        body.clientSecret
      )
    } catch (err: any) {
      if (err.code === 'SQLITE_CONSTRAINT_UNIQUE') {
        console.error('Duplicate entry error:', err.message)
        res.status(400).json({
          error: 'Client ID or Client Secret already exists.'
        })
        return // Ensure no further execution
      }
      throw err // Re-throw other errors
    }

    // Return the external API response
    res.status(200).json({
      clientId: body.clientId,
      clientSecret: body.clientSecret,
      organization_name: organization_name,
      organization_id: organization_id
    })
  } catch (error: any) {
    console.error('[Error] =====>>', error)
    // Distinguish between axios and internal errors
    if (error.response && error.response.status) {
      res.status(error.response.status).json({
        error: error.response.data?.error || 'External API Error'
      })
      return
    }

    // Default to a 500 Internal Server Error for other cases
    res.status(500).json({
      error: error.message || 'An unexpected error occurred.'
    })
  }
}

export default handleLogin

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/server.ts`:

```ts
// src/server/server.ts
import express from 'express'
import cors from 'cors'
import http from 'http'
import os from 'os'
import pty from 'node-pty'
import corsOptions from './middlewares/cors-option'
import router from './routes/router'
import log from './middlewares/logging'
import logger from './utils/logger'
import config from './config'
import { WebSocketServer } from 'ws'

const app = express()
const shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash'

// Middleware
app.use(express.json())
app.use(cors(corsOptions))
// Routes
// app.use(router);
app.use('/api', router)
// Global log Handler
app.use(log)

// Create an HTTP server
const server = http.createServer(app)

// Attach WebSocket server to the HTTP server
const wss = new WebSocketServer({ server, path: '/ws' })
console.log('command execution path:', process.cwd() + '/target-codebases/')
// List of allowed commands (whitelist approach)
const allowedCommands = ['echo', 'git', 'ls', 'pwd', 'whoami'] // Add safe commands here

wss.on('connection', (ws) => {
  console.log('New WebSocket connection')

  let ptyProcess: pty.IPty | null = null
  let initialized = false

  ws.on('message', (message) => {
    try {
      const parsedData = JSON.parse(message.toString())
      const { projectId, type, command } = parsedData

      if (type === 'command' && command) {
        if (!ptyProcess) {
          if (!projectId) {
            ws.send(JSON.stringify({ error: 'Project ID is required to initialize the terminal.' }))
            return
          }

          // Dynamically set cwd based on projectId
          const projectPath = process.cwd() + '/target-codebases/' + projectId

          // Initialize the PTY process with the project directory
          ptyProcess = pty.spawn(shell, [], {
            name: 'xterm-color',
            cwd: projectPath,
            env: process.env
          })

          console.log(`PTY process initialized for project: ${projectPath}`)

          // Send shell output to WebSocket
          ptyProcess.onData((data) => {
            if (!initialized) {
              if (data.includes('bash-3.2$')) {
                initialized = true
                ws.send(data.trim())
              }
            } else {
              ws.send(data)
            }
          })

          ptyProcess.onExit(({ exitCode }) => {
            console.log(`PTY process exited with code ${exitCode}`)
          })
        }

        // Process the command
        const baseCommand = command.trim().split(' ')[0]
        console.log(`Project ID: ${projectId}, Command: ${baseCommand}`)

        if (allowedCommands.includes(baseCommand)) {
          ptyProcess.write(`${command}\n`)
        } else {
          ws.send(
            `"${command}" Command not allowed. Please use the terminal to connect Cadmium with your project codebase. \r\nYou can use the following commands: 'git clone <repository-url>'\r\nbash-3.2$ `
          )
        }
      } else {
        ws.send(JSON.stringify({ error: 'Invalid message format' }))
      }
    } catch (error) {
      console.error('Invalid JSON received:', message)
      ws.send(JSON.stringify({ error: 'Invalid JSON format' }))
    }
  })

  ws.on('close', () => {
    console.log('WebSocket connection closed')
    if (ptyProcess) {
      ptyProcess.kill()
      ptyProcess = null
    }
  })

  ws.on('error', (error) => {
    console.error('WebSocket error:', error)
  })
})

export function startServer() {
  server.listen(config.port, () => {
    logger.info(`Express server is running on http://localhost:${config.port}`)
  })
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/server/routes/router.ts`:

```ts
// src/routes/routes.ts
import { Router } from 'express'
import handleLogin from '../controllers/handle-login'
import handleGetOrgList from '../controllers/handle-get-org-list'
import validateCredentials from '../controllers/handle-validate-user'
import handleCreateProject from '../controllers/handle-create-project'
import handleCheckProjectRemoteLink from '../controllers/handle-check-project-remote-link'
import validateHeadersMiddleware from '../middlewares/validation'

const router = Router()
// TEST API
router.post('/echo-request', (req, res) => {
  res.json({ result: req.body })
})

router.post('/login', handleLogin)
router.get('/org-list', handleGetOrgList)
router.post('/project/check_remote_link', validateHeadersMiddleware, handleCheckProjectRemoteLink)
router.post('/project', validateHeadersMiddleware, handleCreateProject)
router.post('/validation', validateCredentials)

export default router

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/main/index.ts`:

```ts
import { app, shell, BrowserWindow, ipcMain, Notification } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'
import { startServer } from './server/server'
import { initializeDB } from './server/config/sqlite'
import { FromMainPayload, ToMainPayload } from './types/types'

function createWindow(): void {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 670,
    show: false,
    autoHideMenuBar: false,
    ...(process.platform === 'linux' ? { icon } : {}),
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

ipcMain.on('toMain', (event, args: ToMainPayload) => {
  console.log('Message received from renderer:', args)

  // Show a notification
  new Notification({
    title: 'Error occured in your application',
    body: args.message
  }).show()

  const response: FromMainPayload = {
    response: `Notification displayed for message: "${args.message}"`
  }

  event.sender.send('fromMain', response)
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // Set app user model id for windows
  electronApp.setAppUserModelId('com.electron')

  // Default open or close DevTools by F12 in development
  // and ignore CommandOrControl + R in production.
  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils
  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  // IPC test
  ipcMain.on('ping', () => console.log('pong'))

  // Initialize the SQLite database
  initializeDB()

  startServer()

  createWindow()

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

// In this file you can include the rest of your app"s specific main process
// code. You can also put them in separate files and require them here.

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/preload/index.ts`:

```ts
import { contextBridge } from 'electron'
import { electronAPI } from '@electron-toolkit/preload'

// Custom APIs for renderer
const api = {}

// Use `contextBridge` APIs to expose Electron APIs to
// renderer only if context isolation is enabled, otherwise
// just add to the DOM global.
if (process.contextIsolated) {
  try {
    contextBridge.exposeInMainWorld('electron', electronAPI)
    contextBridge.exposeInMainWorld('api', api)
  } catch (error) {
    console.error(error)
  }
} else {
  // @ts-ignore (define in dts)
  window.electron = electronAPI
  // @ts-ignore (define in dts)
  window.api = api
}

```

`/Users/amar/Desktop/cadmium-109/electron-vite-shadcn/electron-vite/src/preload/index.d.ts`:

```ts
import { ElectronAPI } from '@electron-toolkit/preload'

declare global {
  interface Window {
    electron: ElectronAPI
    api: unknown
  }
}

```
